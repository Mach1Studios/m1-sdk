name: Contributor Lint & Test

on:
  pull_request:
    types: [opened, edited, reopened, synchronize]

jobs:
  # -------------------------------
  # Lint Job: runs clang-format / clang-tidy
  # -------------------------------
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate Branch Name
        if: github.event_name == 'pull_request'
        run: |
          # Grab the incoming branch name from the pull request head ref
          branch_ref="${{ github.event.pull_request.head.ref }}"

          if [[ ! "$branch_ref" =~ ^(feature|fix)/.*$ ]]; then
            echo "Branch name '$branch_ref' does not match the required pattern: 'feature/...' or 'fix/...'."
            new_branch_ref="fix/${branch_ref}"
          else
            echo "Branch name '$branch_ref' already follows the expected pattern."
          fi
        shell: bash

      - name: Validate PR Labels
        if: github.event_name == 'pull_request'
        run: |
          labels=$(jq -r '.pull_request.labels[].name' "$GITHUB_EVENT_PATH")
          if [[ ! "$labels" =~ (bug|enhancement|documentation) ]]; then
            echo "No required label found. Adding default 'enhancement' label..."
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels" \
              -d '["enhancement"]'
            echo "Default 'enhancement' label added to PR."
          else
            echo "Required label found: $labels"
          fi
        shell: bash

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y clang-format clang-tidy libsndfile-dev

      - name: Checkout dependencies
        run: |
          # Checkout the same dependencies as test-sdk.yaml
          git clone https://github.com/mity/acutest.git libmach1spatial/deps/acutest || true
          git clone https://github.com/g-truc/glm.git libmach1spatial/deps/glm || true
          git clone https://github.com/zeux/pugixml.git libmach1spatial/deps/pugixml || true
          git clone https://github.com/jimmiebergmann/mini-yaml.git libmach1spatial/deps/yaml || true
          git clone https://github.com/nlohmann/json.git libmach1spatial/deps/nlohmann || true
          git clone https://github.com/leetal/ios-cmake.git libmach1spatial/cmake/ios-cmake || true

      - name: Run clang-format (dry run to detect style issues)
        run: |
          # Check formatting on source files, skip if no files found
          files=$(find . -regex '.*\.\(cpp\|c\|h\|hpp\)' -not -path "./libmach1spatial/deps/*" | head -20)
          if [ -n "$files" ]; then
            echo "$files" | xargs clang-format --dry-run --Werror
          else
            echo "No source files found to format"
          fi

      - name: Run clang-tidy (analysis-only)
        run: |
          # Configure with same flags as test to avoid building examples
          cmake -S . -B build -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DM1S_BUILD_EXAMPLES=OFF -DM1S_BUILD_SIGNAL_SUITE=OFF
          
          # Build only the core library components
          cmake --build build --config Debug --target Mach1DecodeTests Mach1EncodeTests Mach1DecodePositionalTests Mach1TranscodeTests || echo "Build completed with some targets missing"
          
          # Run clang-tidy on source files, excluding dependencies
          files=$(find . -regex '.*\.\(cpp\|cc\|cxx\)' -not -path "./libmach1spatial/deps/*" -not -path "./build/*" | head -10)
          if [ -n "$files" ]; then
            echo "$files" | xargs -I {} clang-tidy -p build {} || echo "clang-tidy completed with warnings"
          else
            echo "No source files found to analyze"
          fi

 