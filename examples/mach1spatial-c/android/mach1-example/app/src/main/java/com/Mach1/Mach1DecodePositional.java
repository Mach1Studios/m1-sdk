/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.Mach1;

public class Mach1DecodePositional {

  private long M1obj = 0;

  public Mach1DecodePositional()
  {
    M1obj = Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_create();
  }

  protected void finalize ( ) {
    if(M1obj != 0) Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_delete(M1obj);
  }

  public void setPlatformType(Mach1PlatformType platformType) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_setPlatformType(M1obj, platformType.swigValue());
  }

  public void setDecodeAlgoType(Mach1DecodeAlgoType newAlgorithmType) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_setDecodeAlgoType(M1obj, newAlgorithmType.swigValue());
  }

  public void setMuteWhenOutsideObject(boolean muteWhenOutsideObject) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_setMuteWhenOutsideObject(M1obj, muteWhenOutsideObject);
  }

  public void setMuteWhenInsideObject(boolean muteWhenInsideObject) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_setMuteWhenInsideObject(M1obj, muteWhenInsideObject);
  }

  public void setUseAttenuation(boolean useAttenuation) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_setUseAttenuation(M1obj, useAttenuation);
  }

  public void setAttenuationCurve(float attenuationCurve) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_setAttenuationCurve(M1obj, attenuationCurve);
  }

  public void setUsePlaneCalculation(boolean usePlaneCalculation) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_setUsePlaneCalculation(M1obj, usePlaneCalculation);
  }

  public void setUseYawForRotation(boolean useYawForRotation) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_setUseYawForRotation(M1obj, useYawForRotation);
  }

  public void setUsePitchForRotation(boolean usePitchForRotation) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_setUsePitchForRotation(M1obj, usePitchForRotation);
  }

  public void setUseRollForRotation(boolean useRollForRotation) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_setUseRollForRotation(M1obj, useRollForRotation);
  }

  public void setListenerPosition(Mach1Point3D point) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_setListenerPosition(M1obj, Mach1Point3D.getCPtr(point), point);
  }

  public void setListenerRotation(Mach1Point3D point) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_setListenerRotation(M1obj, Mach1Point3D.getCPtr(point), point);
  }

  public void setListenerRotationQuat(Mach1Point4D point) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_setListenerRotationQuat(M1obj, Mach1Point4D.getCPtr(point), point);
  }

  public void setDecoderAlgoPosition(Mach1Point3D point) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_setDecoderAlgoPosition(M1obj, Mach1Point3D.getCPtr(point), point);
  }

  public void setDecoderAlgoRotation(Mach1Point3D point) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_setDecoderAlgoRotation(M1obj, Mach1Point3D.getCPtr(point), point);
  }

  public void setDecoderAlgoRotationQuat(Mach1Point4D point) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_setDecoderAlgoRotationQuat(M1obj, Mach1Point4D.getCPtr(point), point);
  }

  public void setDecoderAlgoScale(Mach1Point3D point) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_setDecoderAlgoScale(M1obj, Mach1Point3D.getCPtr(point), point);
  }

  public void evaluatePositionResults() {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_evaluatePositionResults(M1obj);
  }

  public void getCoefficients(SWIGTYPE_p_float result) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_getCoefficients(M1obj, SWIGTYPE_p_float.getCPtr(result));
  }

  public float getDist() {
    return Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_getDist(M1obj);
  }

  public Mach1Point3D getCurrentAngle() {
    return new Mach1Point3D(Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_getCurrentAngle(M1obj), true);
  }

  public Mach1Point3D getCoefficientsRotation() {
    return new Mach1Point3D(Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_getCoefficientsRotation(M1obj), true);
  }

  public void setFilterSpeed(float filterSpeed) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_setFilterSpeed(M1obj, filterSpeed);
  }

  public void setUseFalloff(boolean useFalloff) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_setUseFalloff(M1obj, useFalloff);
  }

  public void setFalloffCurve(float falloffCurve) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_setFalloffCurve(M1obj, falloffCurve);
  }

  public void setUseClosestPointRotationMuteInside(boolean useClosestPointRotationMuteInside) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_setUseClosestPointRotationMuteInside(M1obj, useClosestPointRotationMuteInside);
  }

  public void setCameraPosition(Mach1Point3D point) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_setCameraPosition(M1obj, Mach1Point3D.getCPtr(point), point);
  }

  public void setCameraRotation(Mach1Point3D point) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_setCameraRotation(M1obj, Mach1Point3D.getCPtr(point), point);
  }

  public void setCameraRotationQuat(Mach1Point4D point) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_setCameraRotationQuat(M1obj, Mach1Point4D.getCPtr(point), point);
  }

  public void getVolumesWalls(SWIGTYPE_p_float result) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_getVolumesWalls(M1obj, SWIGTYPE_p_float.getCPtr(result));
  }

  public Mach1Point3D getVolumeRotation() {
    return new Mach1Point3D(Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_getVolumeRotation(M1obj), true);
  }

  public void setUseBlendMode(boolean useBlendMode) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_setUseBlendMode(M1obj, useBlendMode);
  }

  public void setIgnoreTopBottom(boolean ignoreTopBottom) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_setIgnoreTopBottom(M1obj, ignoreTopBottom);
  }

  public void setFalloffCurveBlendMode(float falloffCurveBlendMode) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_setFalloffCurveBlendMode(M1obj, falloffCurveBlendMode);
  }

  public void setAttenuationCurveBlendMode(float attenuationCurveBlendMode) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_setAttenuationCurveBlendMode(M1obj, attenuationCurveBlendMode);
  }

  public void getVolumesRoom(SWIGTYPE_p_float result) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_getVolumesRoom(M1obj, SWIGTYPE_p_float.getCPtr(result));
  }

  public void getCoefficientsInterior(SWIGTYPE_p_float result) {
    Mach1DecodePositionalModuleJNI.Mach1DecodePositionalCAPI_getCoefficientsInterior(M1obj, SWIGTYPE_p_float.getCPtr(result));
  }

}
