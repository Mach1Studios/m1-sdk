<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSCore</name>
    </assembly>
    <members>
        <member name="T:CSCore.MmException">
            <summary>
                Exception class for all MM-APIs like waveOut or ACM.
            </summary>
        </member>
        <member name="M:CSCore.MmException.Try(CSCore.MmResult,System.String)">
            <summary>
                Throws an <see cref="T:CSCore.MmException"/> if the <paramref name="result"/> is not
                <see cref="F:CSCore.MmResult.MMSYSERR_NOERROR"/>.
            </summary>
            <param name="result">Errorcode.</param>
            <param name="function">Name of the function which returned the specified <paramref name="result"/>.</param>
        </member>
        <member name="M:CSCore.MmException.#ctor(CSCore.MmResult,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.MmException"/> class.
            </summary>
            <param name="result">Errorcode.</param>
            <param name="function">Name of the function which returned the specified <paramref name="result"/>.</param>
        </member>
        <member name="P:CSCore.MmException.Result">
            <summary>
                Gets the <see cref="T:CSCore.MmResult"/> which describes the error.
            </summary>
        </member>
        <member name="P:CSCore.MmException.Target">
            <summary>
                Gets the name of the function which caused the error.
            </summary>
        </member>
        <member name="P:CSCore.MmException.Function">
            <summary>
                Gets the name of the function which caused the error.
            </summary>
        </member>
        <member name="F:CSCore.ACM.AcmDriverDetails.FourCCType">
            <summary>
            Must be ACMDRIVERDETAILS_FCCTYPE_AUDIOCODEC for acm drivers
            </summary>
        </member>
        <member name="F:CSCore.ACM.AcmDriverDetails.FourCCComp">
            <summary>
            Currently not used. Default value = ACMDRIVERDETAILS_FCCCOMP_UNDEFINED 
            </summary>
        </member>
        <member name="F:CSCore.ACM.AcmDriverDetails.ShortName">
            <summary>
            Length = ACMDRIVERDETAILS_SHORTNAME_CHARS = 32 chars
            </summary>
        </member>
        <member name="F:CSCore.ACM.AcmDriverDetails.LongName">
            <summary>
            Length = ACMDRIVERDETAILS_LONGNAME_CHARS = 128 chars
            </summary>
        </member>
        <member name="F:CSCore.ACM.AcmDriverDetails.Copyright">
            <summary>
            Length = ACMDRIVERDETAILS_COPYRIGHT_CHARS = 80 chars
            </summary>
        </member>
        <member name="F:CSCore.ACM.AcmDriverDetails.Licensing">
            <summary>
            Length = ACMDRIVERDETAILS_LICENSING_CHARS = 128 chars
            </summary>
        </member>
        <member name="F:CSCore.ACM.AcmDriverDetails.Features">
            <summary>
            Length = ACMDRIVERDETAILS_FEATURES_CHARS = 512 chars
            </summary>
        </member>
        <member name="T:CSCore.AudioSubTypes">
            <summary>
            Contains defined MediaTypes and provides methods to convert between AudioEncoding and MediaType.
            </summary>
        </member>
        <member name="M:CSCore.AudioSubTypes.EncodingFromMediaType(System.Guid)">
            <summary>
            Converts a Mediatype-value to a AudioEncoding-value.
            </summary>
            <param name="mediaType"></param>
            <returns></returns>
        </member>
        <member name="M:CSCore.AudioSubTypes.MediaTypeFromEncoding(CSCore.AudioEncoding)">
            <summary>
            Converts a AudioEncoding-value to a Mediatype-value.
            </summary>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="F:CSCore.AudioSubTypes.MediaTypeAudio">
            <summary>
            Major Type: Audio.
            </summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.Unknown">
            <summary>WAVE_FORMAT_UNKNOWN,	Microsoft Corporation</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.Pcm">
            <summary>WAVE_FORMAT_PCM		Microsoft Corporation</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.Adpcm">
            <summary>WAVE_FORMAT_ADPCM		Microsoft Corporation</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.IeeeFloat">
            <summary>WAVE_FORMAT_IEEE_FLOAT Microsoft Corporation</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.Vselp">
            <summary>WAVE_FORMAT_VSELP		Compaq Computer Corp.</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.IbmCvsd">
            <summary>WAVE_FORMAT_IBM_CVSD	IBM Corporation</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.ALaw">
            <summary>WAVE_FORMAT_ALAW		Microsoft Corporation</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.MuLaw">
            <summary>WAVE_FORMAT_MULAW		Microsoft Corporation</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.Dts">
            <summary>WAVE_FORMAT_DTS		Microsoft Corporation</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.Drm">
            <summary>WAVE_FORMAT_DRM		Microsoft Corporation</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WmaVoice9">
            <summary>WAVE_FORMAT_WMAVOICE9 </summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.OkiAdpcm">
            <summary>WAVE_FORMAT_OKI_ADPCM	OKI</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.DviAdpcm">
            <summary>WAVE_FORMAT_DVI_ADPCM	Intel Corporation</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.ImaAdpcm">
            <summary>WAVE_FORMAT_IMA_ADPCM  Intel Corporation</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.MediaspaceAdpcm">
            <summary>WAVE_FORMAT_MEDIASPACE_ADPCM Videologic</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.SierraAdpcm">
            <summary>WAVE_FORMAT_SIERRA_ADPCM Sierra Semiconductor Corp </summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.G723Adpcm">
            <summary>WAVE_FORMAT_G723_ADPCM Antex Electronics Corporation </summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.DigiStd">
            <summary>WAVE_FORMAT_DIGISTD DSP Solutions, Inc.</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.DigiFix">
            <summary>WAVE_FORMAT_DIGIFIX DSP Solutions, Inc.</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.DialogicOkiAdpcm">
            <summary>WAVE_FORMAT_DIALOGIC_OKI_ADPCM Dialogic Corporation</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.MediaVisionAdpcm">
            <summary>WAVE_FORMAT_MEDIAVISION_ADPCM Media Vision, Inc.</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.CUCodec">
            <summary>WAVE_FORMAT_CU_CODEC Hewlett-Packard Company </summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.YamahaAdpcm">
            <summary>WAVE_FORMAT_YAMAHA_ADPCM Yamaha Corporation of America</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.SonarC">
            <summary>WAVE_FORMAT_SONARC Speech Compression</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.DspGroupTrueSpeech">
            <summary>WAVE_FORMAT_DSPGROUP_TRUESPEECH DSP Group, Inc </summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.EchoSpeechCorporation1">
            <summary>WAVE_FORMAT_ECHOSC1 Echo Speech Corporation</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.AudioFileAf36">
            <summary>WAVE_FORMAT_AUDIOFILE_AF36, Virtual Music, Inc.</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.Aptx">
            <summary>WAVE_FORMAT_APTX Audio Processing Technology</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.AudioFileAf10">
            <summary>WAVE_FORMAT_AUDIOFILE_AF10, Virtual Music, Inc.</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.Prosody1612">
            <summary>WAVE_FORMAT_PROSODY_1612, Aculab plc</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.Lrc">
            <summary>WAVE_FORMAT_LRC, Merging Technologies S.A. </summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.DolbyAc2">
            <summary>WAVE_FORMAT_DOLBY_AC2, Dolby Laboratories</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.Gsm610">
            <summary>WAVE_FORMAT_GSM610, Microsoft Corporation</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.MsnAudio">
            <summary>WAVE_FORMAT_MSNAUDIO, Microsoft Corporation</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.AntexAdpcme">
            <summary>WAVE_FORMAT_ANTEX_ADPCME, Antex Electronics Corporation</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.ControlResVqlpc">
            <summary>WAVE_FORMAT_CONTROL_RES_VQLPC, Control Resources Limited </summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.DigiReal">
            <summary>WAVE_FORMAT_DIGIREAL, DSP Solutions, Inc. </summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.DigiAdpcm">
            <summary>WAVE_FORMAT_DIGIADPCM, DSP Solutions, Inc.</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.ControlResCr10">
            <summary>WAVE_FORMAT_CONTROL_RES_CR10, Control Resources Limited</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_NMS_VBXADPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_CS_IMAADPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_ECHOSC3">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_ROCKWELL_ADPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_ROCKWELL_DIGITALK">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_XEBEC">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_G721_ADPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_G728_CELP">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_MSG723">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.Mpeg">
            <summary>WAVE_FORMAT_MPEG, Microsoft Corporation </summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_RT24">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_PAC">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.MpegLayer3">
            <summary>WAVE_FORMAT_MPEGLAYER3, ISO/MPEG Layer3 Format Tag </summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_LUCENT_G723">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_CIRRUS">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_ESPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_VOXWARE">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_CANOPUS_ATRAC">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_G726_ADPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_G722_ADPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_DSAT_DISPLAY">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_VOXWARE_BYTE_ALIGNED">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_VOXWARE_AC8">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_VOXWARE_AC10">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_VOXWARE_AC16">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_VOXWARE_AC20">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_VOXWARE_RT24">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_VOXWARE_RT29">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_VOXWARE_RT29HW">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_VOXWARE_VR12">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_VOXWARE_VR18">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_VOXWARE_TQ40">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_SOFTSOUND">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_VOXWARE_TQ60">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_MSRT24">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_G729A">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_MVI_MVI2">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_DF_G726">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_DF_GSM610">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_ISIAUDIO">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_ONLIVE">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_SBC24">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_DOLBY_AC3_SPDIF">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_MEDIASONIC_G723">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_PROSODY_8KBPS">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_ZYXEL_ADPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_PHILIPS_LPCBB">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_PACKED">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_MALDEN_PHONYTALK">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.Gsm">
            <summary>WAVE_FORMAT_GSM</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.G729">
            <summary>WAVE_FORMAT_G729</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.G723">
            <summary>WAVE_FORMAT_G723</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.Acelp">
            <summary>WAVE_FORMAT_ACELP</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.RawAac">
            <summary>
                WAVE_FORMAT_RAW_AAC1
            </summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_RHETOREX_ADPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_IRAT">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_VIVO_G723">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_VIVO_SIREN">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_DIGITAL_G723">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_SANYO_LD_ADPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_SIPROLAB_ACEPLNET">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_SIPROLAB_ACELP4800">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_SIPROLAB_ACELP8V3">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_SIPROLAB_G729">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_SIPROLAB_G729A">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_SIPROLAB_KELVIN">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_G726ADPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_QUALCOMM_PUREVOICE">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_QUALCOMM_HALFRATE">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_TUBGSM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_MSAUDIO1">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WindowsMediaAudio">
            <summary>
                Windows Media Audio, WAVE_FORMAT_WMAUDIO2, Microsoft Corporation
            </summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WindowsMediaAudioProfessional">
            <summary>
                Windows Media Audio Professional WAVE_FORMAT_WMAUDIO3, Microsoft Corporation
            </summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WindowsMediaAudioLosseless">
            <summary>
                Windows Media Audio Lossless, WAVE_FORMAT_WMAUDIO_LOSSLESS
            </summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WindowsMediaAudioSpdif">
            <summary>
                Windows Media Audio Professional over SPDIF WAVE_FORMAT_WMASPDIF (0x0164)
            </summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_UNISYS_NAP_ADPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_UNISYS_NAP_ULAW">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_UNISYS_NAP_ALAW">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_UNISYS_NAP_16K">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_CREATIVE_ADPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_CREATIVE_FASTSPEECH8">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_CREATIVE_FASTSPEECH10">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_UHER_ADPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_QUARTERDECK">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_ILINK_VC">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_RAW_SPORT">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_ESST_AC3">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_IPI_HSX">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_IPI_RPELP">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_CS2">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_SONY_SCX">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_FM_TOWNS_SND">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_BTV_DIGITAL">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_QDESIGN_MUSIC">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_VME_VMPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_TPC">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_OLIGSM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_OLIADPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_OLICELP">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_OLISBC">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_OLIOPR">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_LH_CODEC">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_NORRIS">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_SOUNDSPACE_MUSICOMPRESS">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.MPEG_ADTS_AAC">
            <summary>
                Advanced Audio Coding (AAC) audio in Audio Data Transport Stream (ADTS) format.
                The format block is a WAVEFORMATEX structure with wFormatTag equal to WAVE_FORMAT_MPEG_ADTS_AAC.
            </summary>
            <remarks>
                The WAVEFORMATEX structure specifies the core AAC-LC sample rate and number of channels,
                prior to applying spectral band replication (SBR) or parametric stereo (PS) tools, if present.
                No additional data is required after the WAVEFORMATEX structure.
            </remarks>
            <see>http://msdn.microsoft.com/en-us/library/dd317599%28VS.85%29.aspx</see>
        </member>
        <member name="F:CSCore.AudioSubTypes.MPEG_RAW_AAC">
            <summary></summary>
            <remarks>Source wmCodec.h</remarks>
        </member>
        <member name="F:CSCore.AudioSubTypes.MPEG_LOAS">
            <summary>
                MPEG-4 audio transport stream with a synchronization layer (LOAS) and a multiplex layer (LATM).
                The format block is a WAVEFORMATEX structure with wFormatTag equal to WAVE_FORMAT_MPEG_LOAS.
            </summary>
            <remarks>
                The WAVEFORMATEX structure specifies the core AAC-LC sample rate and number of channels,
                prior to applying spectral SBR or PS tools, if present.
                No additional data is required after the WAVEFORMATEX structure.
            </remarks>
            <see>http://msdn.microsoft.com/en-us/library/dd317599%28VS.85%29.aspx</see>
        </member>
        <member name="F:CSCore.AudioSubTypes.NOKIA_MPEG_ADTS_AAC">
            <summary>NOKIA_MPEG_ADTS_AAC</summary>
            <remarks>Source wmCodec.h</remarks>
        </member>
        <member name="F:CSCore.AudioSubTypes.NOKIA_MPEG_RAW_AAC">
            <summary>NOKIA_MPEG_RAW_AAC</summary>
            <remarks>Source wmCodec.h</remarks>
        </member>
        <member name="F:CSCore.AudioSubTypes.VODAFONE_MPEG_ADTS_AAC">
            <summary>VODAFONE_MPEG_ADTS_AAC</summary>
            <remarks>Source wmCodec.h</remarks>
        </member>
        <member name="F:CSCore.AudioSubTypes.VODAFONE_MPEG_RAW_AAC">
            <summary>VODAFONE_MPEG_RAW_AAC</summary>
            <remarks>Source wmCodec.h</remarks>
        </member>
        <member name="F:CSCore.AudioSubTypes.MPEG_HEAAC">
            <summary>
                High-Efficiency Advanced Audio Coding (HE-AAC) stream.
                The format block is an HEAACWAVEFORMAT structure.
            </summary>
            <see>http://msdn.microsoft.com/en-us/library/dd317599%28VS.85%29.aspx</see>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_DVM">
            <summary>WAVE_FORMAT_DVM</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.Vorbis1">
            <summary>WAVE_FORMAT_VORBIS1 "Og" Original stream compatible</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.Vorbis2">
            <summary>WAVE_FORMAT_VORBIS2 "Pg" Have independent header</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.Vorbis3">
            <summary>WAVE_FORMAT_VORBIS3 "Qg" Have no codebook header</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.Vorbis1P">
            <summary>WAVE_FORMAT_VORBIS1P "og" Original stream compatible</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.Vorbis2P">
            <summary>WAVE_FORMAT_VORBIS2P "pg" Have independent headere</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.Vorbis3P">
            <summary>WAVE_FORMAT_VORBIS3P "qg" Have no codebook header</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_RAW_AAC1">
            <summary>
            Raw AAC1
            </summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_MPEG_HEAAC">
            <summary>
                Advanced Audio Coding (AAC)
            </summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_WMAVOICE9">
            <summary>
                Windows Media Audio Voice (WMA Voice)
            </summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_WMASPDIF">
            <summary>
                WMASPDIF
            </summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_WMAUDIO_LOSSLESS">
            <summary>
                Windows Media Audio lossless
            </summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_WMAUDIO2">
            <summary>
                Windows Media Audio 2
            </summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_WMAUDIO3">
            <summary>
                Windows Media Audio 3
            </summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.Extensible">
            <summary>WAVE_FORMAT_EXTENSIBLE</summary>
        </member>
        <member name="F:CSCore.AudioSubTypes.WAVE_FORMAT_DEVELOPMENT">
            <summary></summary>
        </member>
        <member name="T:CSCore.ChannelMask">
            <summary>
                Channelmask used by <see cref="T:CSCore.WaveFormatExtensible"/>. For more information see
                http://msdn.microsoft.com/en-us/library/windows/desktop/dd757714(v=vs.85).aspx
            </summary>
        </member>
        <member name="F:CSCore.ChannelMask.SpeakerFrontLeft">
            <summary>
                Front left speaker.
            </summary>
        </member>
        <member name="F:CSCore.ChannelMask.SpeakerFrontRight">
            <summary>
                Front right speaker.
            </summary>
        </member>
        <member name="F:CSCore.ChannelMask.SpeakerFrontCenter">
            <summary>
                Front center speaker.
            </summary>
        </member>
        <member name="F:CSCore.ChannelMask.SpeakerLowFrequency">
            <summary>
                Low frequency speaker.
            </summary>
        </member>
        <member name="F:CSCore.ChannelMask.SpeakerBackLeft">
            <summary>
                Back left speaker.
            </summary>
        </member>
        <member name="F:CSCore.ChannelMask.SpeakerBackRight">
            <summary>
                Back right speaker.
            </summary>
        </member>
        <member name="F:CSCore.ChannelMask.SpeakerFrontLeftOfCenter">
            <summary>
                Front left of center speaker.
            </summary>
        </member>
        <member name="F:CSCore.ChannelMask.SpeakerFrontRightOfCenter">
            <summary>
                Front right of center speaker.
            </summary>
        </member>
        <member name="F:CSCore.ChannelMask.SpeakerBackCenter">
            <summary>
                Back center speaker.
            </summary>
        </member>
        <member name="F:CSCore.ChannelMask.SpeakerSideLeft">
            <summary>
                Side left speaker.
            </summary>
        </member>
        <member name="F:CSCore.ChannelMask.SpeakerSideRight">
            <summary>
                Side right speaker.
            </summary>
        </member>
        <member name="F:CSCore.ChannelMask.SpeakerTopCenter">
            <summary>
                Top center speaker.
            </summary>
        </member>
        <member name="F:CSCore.ChannelMask.SpeakerTopFrontLeft">
            <summary>
                Top front left speaker.
            </summary>
        </member>
        <member name="F:CSCore.ChannelMask.SpeakerTopFrontCenter">
            <summary>
                Top front center speaker.
            </summary>
        </member>
        <member name="F:CSCore.ChannelMask.SpeakerTopFrontRight">
            <summary>
                Top front right speaker.
            </summary>
        </member>
        <member name="F:CSCore.ChannelMask.SpeakerTopBackLeft">
            <summary>
                Top back left speaker.
            </summary>
        </member>
        <member name="F:CSCore.ChannelMask.SpeakerTopBackCenter">
            <summary>
                Top back center speaker.
            </summary>
        </member>
        <member name="F:CSCore.ChannelMask.SpeakerTopBackRight">
            <summary>
                Top back right speaker.
            </summary>
        </member>
        <member name="T:CSCore.Codecs.AAC.AacAudioProfileLevelIndication">
            <summary>
            Specifies the audio profile and level of an Advanced Audio Coding (AAC) stream.
            AACProfile_L2_0x29 is the default setting.
            http://msdn.microsoft.com/en-us/library/windows/desktop/dd319560(v=vs.85).aspx
            </summary>
        </member>
        <member name="F:CSCore.Codecs.AAC.AacAudioProfileLevelIndication.AACProfile_L2_0x29">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:CSCore.Codecs.AAC.AacAudioProfileLevelIndication.AACProfile_L4_0x2A">
            <summary>
            AACProfile_L4_0x2A
            </summary>
        </member>
        <member name="F:CSCore.Codecs.AAC.AacAudioProfileLevelIndication.AACProfile_L5_0x2B">
            <summary>
            AACProfile_L5_0x2B 
            </summary>
        </member>
        <member name="F:CSCore.Codecs.AAC.AacAudioProfileLevelIndication.HighEfficiencyAACProfile_L2_0x2C">
            <summary>
            HighEfficiencyAACProfile_L2_0x2C 
            </summary>
        </member>
        <member name="F:CSCore.Codecs.AAC.AacAudioProfileLevelIndication.HighEfficiencyAACProfile_L3_0x2D">
            <summary>
            HighEfficiencyAACProfile_L3_0x2D 
            </summary>
        </member>
        <member name="F:CSCore.Codecs.AAC.AacAudioProfileLevelIndication.HighEfficiencyAACProfile_L4_0x2E">
            <summary>
            HighEfficiencyAACProfile_L4_0x2E 
            </summary>
        </member>
        <member name="F:CSCore.Codecs.AAC.AacAudioProfileLevelIndication.HighEfficiencyAACProfile_L5_0x2F">
            <summary>
            HighEfficiencyAACProfile_L5_0x2F
            </summary>
        </member>
        <member name="F:CSCore.Codecs.AAC.AacAudioProfileLevelIndication.ReservedForIsoUse_0x30">
            <summary>
            ReservedForIsoUse_0x30 
            </summary>
        </member>
        <member name="F:CSCore.Codecs.AAC.AacAudioProfileLevelIndication.ReservedForIsoUse_0x31">
            <summary>
            ReservedForIsoUse_0x31
            </summary>
        </member>
        <member name="F:CSCore.Codecs.AAC.AacAudioProfileLevelIndication.ReservedForIsoUse_0x32">
            <summary>
            ReservedForIsoUse_0x32
            </summary>
        </member>
        <member name="F:CSCore.Codecs.AAC.AacAudioProfileLevelIndication.ReservedForIsoUse_0x33">
            <summary>
            ReservedForIsoUse_0x33
            </summary>
        </member>
        <member name="T:CSCore.Codecs.AAC.AacEncoder">
            <summary>
            Provides an encoder for encoding raw waveform-audio data to the AAC (Advanced Audio Codec) format.
            </summary>
        </member>
        <member name="T:CSCore.MediaFoundation.MediaFoundationEncoder">
            <summary>
                Provides encoding through the Mediafoundation.
            </summary>
        </member>
        <member name="T:CSCore.IWriteable">
            <summary>
                Provides the <see cref="M:CSCore.IWriteable.Write(System.Byte[],System.Int32,System.Int32)"/> method.
            </summary>
        </member>
        <member name="M:CSCore.IWriteable.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Used to write down raw byte data.
            </summary>
            <param name="buffer">Byte array which contains the data to write down.</param>
            <param name="offset">Zero-based offset in the <paramref name="buffer" />.</param>
            <param name="count">Number of bytes to write.</param>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationEncoder.#ctor(System.IO.Stream,CSCore.MediaFoundation.MFMediaType,CSCore.MediaFoundation.MFMediaType,System.Guid)">
            <summary>
                Creates an new instance of the MediaFoundationEncoder.
            </summary>
            <param name="inputMediaType">Mediatype of the source which gets encoded.</param>
            <param name="stream">Stream which will be used to store the encoded data.</param>
            <param name="targetMediaType">The format, the data gets encoded to.</param>
            <param name="containerType">See TranscodeContainerTypes-class.</param>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationEncoder.Dispose">
            <summary>
                Releases all resources used by the encoder and finalizes encoding.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationEncoder.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Encodes raw data.
            </summary>
            <param name="buffer">Buffer which contains raw data to encode.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin encoding bytes to the underlying stream.</param>
            <param name="count">The number of bytes to encode.</param>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationEncoder.SetTargetStream(System.IO.Stream,CSCore.MediaFoundation.MFMediaType,CSCore.MediaFoundation.MFMediaType,System.Guid)">
            <summary>
            Sets and initializes the targetstream for the encoding process.
            </summary>
            <param name="stream">Stream which should be used as the targetstream.</param>
            <param name="inputMediaType">Mediatype of the raw input data which should be encoded.</param>
            <param name="targetMediaType">Mediatype of the encoded data.</param>
            <param name="containerType">Container type which should be used. See the <see cref="T:CSCore.MediaFoundation.TranscodeContainerTypes"/> class.</param>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationEncoder.WriteBlock(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int64,System.Int32)">
            <returns>Ticks, NO BYTES!</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationEncoder.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:CSCore.MediaFoundation.MediaFoundationEncoder"/>.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationEncoder.Finalize">
            <summary>
            Destructor which calls <see cref="M:CSCore.MediaFoundation.MediaFoundationEncoder.Dispose(System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationEncoder.EncodeWholeSource(CSCore.MediaFoundation.MediaFoundationEncoder,CSCore.IWaveSource)">
            <summary>
            Encodes the whole <paramref name="source"/> with the specified <paramref name="encoder"/>. The encoding process stops as soon as the <see cref="M:CSCore.IWaveSource.Read(System.Byte[],System.Int32,System.Int32)"/> method of the specified <paramref name="source"/> returns 0.
            </summary>
            <param name="encoder">The encoder which should be used to encode the audio data.</param>
            <param name="source">The <see cref="T:CSCore.IWaveSource"/> which provides the raw audio data to encode.</param>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationEncoder.CreateMP3Encoder(CSCore.WaveFormat,System.String,System.Int32)">
            <summary>
                See http://msdn.microsoft.com/en-us/library/windows/desktop/hh162907(v=vs.85).aspx for supported input and output
                types.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationEncoder.CreateMP3Encoder(CSCore.WaveFormat,System.IO.Stream,System.Int32)">
            <summary>
                See http://msdn.microsoft.com/en-us/library/windows/desktop/hh162907(v=vs.85).aspx for supported input and output
                types.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationEncoder.CreateWMAEncoder(CSCore.WaveFormat,System.String,System.Int32)">
            <summary>
                See http://msdn.microsoft.com/en-us/library/windows/desktop/ff819498(v=vs.85).aspx for supported input and output
                types.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationEncoder.CreateWMAEncoder(CSCore.WaveFormat,System.IO.Stream,System.Int32)">
            <summary>
                See http://msdn.microsoft.com/en-us/library/windows/desktop/ff819498(v=vs.85).aspx for supported input and output
                types.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationEncoder.CreateAACEncoder(CSCore.WaveFormat,System.String,System.Int32)">
            <summary>
                See http://msdn.microsoft.com/en-us/library/windows/desktop/dd742785(v=vs.85).aspx for supported input and output
                types.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationEncoder.CreateAACEncoder(CSCore.WaveFormat,System.IO.Stream,System.Int32)">
            <summary>
                See http://msdn.microsoft.com/en-us/library/windows/desktop/dd742785(v=vs.85).aspx for supported input and output
                types.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationEncoder.FindBestMediaType(System.Guid,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tries to find the <see cref="T:CSCore.DMO.MediaType"/> which fits best the requested format specified by the parameters: <paramref name="sampleRate"/>, <paramref name="channels"/>, <paramref name="bitRate"/> and <paramref name="audioSubType"/>.
            </summary>
            <param name="audioSubType">The audio subtype. See the <see cref="T:CSCore.AudioSubTypes"/> class.</param>
            <param name="sampleRate">The requested sample rate.</param>
            <param name="channels">The requested number of channels.</param>
            <param name="bitRate">The requested bit rate.</param>
            <returns>A <see cref="T:CSCore.DMO.MediaType"/> which fits best the requested format. If no mediatype could be found the <see cref="M:CSCore.MediaFoundation.MediaFoundationEncoder.FindBestMediaType(System.Guid,System.Int32,System.Int32,System.Int32)"/> method returns null.</returns>
        </member>
        <member name="P:CSCore.MediaFoundation.MediaFoundationEncoder.EncodedDuration">
            <summary>
                Gets the total length of all encoded data.
            </summary>
        </member>
        <member name="P:CSCore.MediaFoundation.MediaFoundationEncoder.TargetBaseStream">
            <summary>
                Gets the underlying stream which operates as encoding target.
            </summary>
        </member>
        <member name="P:CSCore.MediaFoundation.MediaFoundationEncoder.OutputMediaType">
            <summary>
                Gets the  OutputMediaType.
            </summary>
        </member>
        <member name="P:CSCore.MediaFoundation.MediaFoundationEncoder.SinkWriter">
            <summary>
            Gets the <see cref="T:CSCore.MediaFoundation.MFSinkWriter"/> which is used to write.
            </summary>
        </member>
        <member name="P:CSCore.MediaFoundation.MediaFoundationEncoder.TargetStream">
            <summary>
            Gets the destination stream which is used to store the encoded audio data.
            </summary>
        </member>
        <member name="M:CSCore.Codecs.AAC.AacEncoder.#ctor(CSCore.WaveFormat,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Codecs.AAC.AacEncoder"/> class.
            </summary>
            <param name="sourceFormat"><see cref="T:CSCore.WaveFormat"/> of the audio data which gets encoded.</param>
            <param name="targetStream"><see cref="T:System.IO.Stream"/> which should be used to save the encoded data in.</param>
        </member>
        <member name="M:CSCore.Codecs.AAC.AacEncoder.#ctor(CSCore.WaveFormat,System.IO.Stream,System.Int32,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Codecs.AAC.AacEncoder"/> class.
            </summary>
            <param name="sourceFormat"><see cref="T:CSCore.WaveFormat"/> of the audio data which gets encoded.</param>
            <param name="targetStream"><see cref="T:System.IO.Stream"/> which should be used to save the encoded data in.</param>
            <param name="defaultBitrate">Default samplerate. Use 192000 as the default value.</param>
            <param name="containerType">Guid of the container type. Use <see cref="F:CSCore.MediaFoundation.TranscodeContainerTypes.MFTranscodeContainerType_MPEG4"/> as the default container.</param>
        </member>
        <member name="P:CSCore.Codecs.AAC.AacEncoder.AudioProfileLevelIndication">
            <summary>
            Gets or sets the audio profile and level of an Advanced Audio Coding (AAC) stream.
            </summary>
            <remarks>
            This attribute contains the value of the audioProfileLevelIndication field, as defined by ISO/IEC 14496-3.
            </remarks>
        </member>
        <member name="T:CSCore.Codecs.CodecFactoryEntry">
            <summary>
            Represents an entry of the <see cref="T:CSCore.Codecs.CodecFactory"/> class which provides information about a codec.
            </summary>
        </member>
        <member name="M:CSCore.Codecs.CodecFactoryEntry.#ctor(CSCore.Codecs.GetCodecAction,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Codecs.CodecFactoryEntry"/> class.
            </summary>
            <param name="getCodecAction">Delegate which initializes a codec decoder based on a <see cref="T:System.IO.Stream"/>.</param>
            <param name="fileextensions">All which the codec associated file extensions.</param>
        </member>
        <member name="P:CSCore.Codecs.CodecFactoryEntry.GetCodecAction">
            <summary>
            Gets the <see cref="T:CSCore.Codecs.GetCodecAction"/> which initializes a codec decoder based on a <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.CodecFactoryEntry.FileExtensions">
            <summary>
            Gets all with the codec associated file extensions.
            </summary>
        </member>
        <member name="T:CSCore.Codecs.AAC.AacDecoder">
            <summary>
            Mediafoundation AAC decoder.
            </summary>
        </member>
        <member name="T:CSCore.MediaFoundation.MediaFoundationDecoder">
            <summary>
            The <see cref="T:CSCore.MediaFoundation.MediaFoundationDecoder"/> is a generic decoder for all installed Mediafoundation codecs.
            </summary>
        </member>
        <member name="T:CSCore.IWaveSource">
            <summary>
                Defines the base for all audio streams which provide raw byte data.
            </summary>
        </member>
        <member name="T:CSCore.IWaveStream">
            <summary>
                Defines the base for all audio streams.
            </summary>
        </member>
        <member name="P:CSCore.IWaveStream.WaveFormat">
            <summary>
                Gets the <see cref="P:CSCore.IWaveStream.WaveFormat"/> of the waveform-audio data.
            </summary>
        </member>
        <member name="P:CSCore.IWaveStream.Position">
            <summary>
                Gets or sets the current position. The unit of this property depends on the implementation of this interface. Some
                implementations may don't support this property.
            </summary>
        </member>
        <member name="P:CSCore.IWaveStream.Length">
            <summary>
                Gets the length of the waveform-audio data. The unit of this property depends on the implementation of this
                interface. Some implementations may don't support this property.
            </summary>
        </member>
        <member name="M:CSCore.IWaveSource.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads a sequence of bytes from the <see cref="T:CSCore.IWaveSource"/> and advances the position within the stream by the
                number of bytes read.
            </summary>
            <param name="buffer">
                An array of bytes. When this method returns, the <paramref name="buffer"/> contains the specified
                byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> +
                <paramref name="count"/> - 1) replaced by the bytes read from the current source.
            </param>
            <param name="offset">
                The zero-based byte offset in the <paramref name="buffer"/> at which to begin storing the data
                read from the current stream.
            </param>
            <param name="count">The maximum number of bytes to read from the current source.</param>
            <returns>The total number of bytes read into the buffer.</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationDecoder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.MediaFoundation.MediaFoundationDecoder"/> class.
            </summary>
            <param name="uri">Uri which points to a audio source which can be decoded.</param>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationDecoder.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.MediaFoundation.MediaFoundationDecoder"/> class.
            </summary>
            <param name="stream">Stream which holds audio data which can be decoded.</param>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationDecoder.#ctor(CSCore.MediaFoundation.IMFByteStream)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.MediaFoundation.MediaFoundationDecoder"/> class.
            </summary>
            <param name="byteStream">Stream which holds audio data which can be decoded.</param>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationDecoder.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads a sequence of bytes from the <see cref="T:CSCore.MediaFoundation.MediaFoundationDecoder"/> and advances the position within the stream by the
                number of bytes read.
            </summary>
            <param name="buffer">
                An array of bytes. When this method returns, the <paramref name="buffer"/> contains the specified
                byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> +
                <paramref name="count"/> - 1) replaced by the bytes read from the current source.
            </param>
            <param name="offset">
                The zero-based byte offset in the <paramref name="buffer"/> at which to begin storing the data
                read from the current stream.
            </param>
            <param name="count">The maximum number of bytes to read from the current source.</param>
            <returns>The total number of bytes read into the buffer.</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationDecoder.Dispose">
            <summary>
            Disposes the <see cref="T:CSCore.MediaFoundation.MediaFoundationDecoder"/>.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationDecoder.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:CSCore.MediaFoundation.MediaFoundationDecoder"/> and its internal resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationDecoder.Finalize">
            <summary>
            Destructor which calls <see cref="M:CSCore.MediaFoundation.MediaFoundationDecoder.Dispose(System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:CSCore.MediaFoundation.MediaFoundationDecoder.WaveFormat">
            <summary>
            Gets the format of the decoded audio data.
            </summary>
        </member>
        <member name="P:CSCore.MediaFoundation.MediaFoundationDecoder.Position">
            <summary>
            Gets or sets the position of the output stream in bytes.
            </summary>
        </member>
        <member name="P:CSCore.MediaFoundation.MediaFoundationDecoder.Length">
            <summary>
            Gets the total length of the decoded audio.
            </summary>
        </member>
        <member name="P:CSCore.MediaFoundation.MediaFoundationDecoder.CanSeek">
            <summary>
            Gets a value which indicates whether the seeking is supported. True means that seeking is supported. False means that seeking is not supported.
            </summary>
        </member>
        <member name="M:CSCore.Codecs.AAC.AacDecoder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Codecs.AAC.AacDecoder"/> class.
            </summary>
            <param name="uri">Url which points to a data source which provides AAC data. This is typically a filename.</param>
        </member>
        <member name="M:CSCore.Codecs.AAC.AacDecoder.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Codecs.AAC.AacDecoder"/> class.
            </summary>
            <param name="stream">Stream which contains AAC data.</param>
        </member>
        <member name="P:CSCore.Codecs.AAC.AacDecoder.IsSupported">
            <summary>
            Gets a value which indicates whether the Mediafoundation AAC decoder is supported on the current platform.
            </summary>
        </member>
        <member name="T:CSCore.Codecs.DDP.DDPDecoder">
            <summary>
            Mediafoundation DDP decoder.
            </summary>
        </member>
        <member name="M:CSCore.Codecs.DDP.DDPDecoder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Codecs.DDP.DDPDecoder"/> class.
            </summary>
            <param name="uri">Url which points to a data source which provides DDP data. This is typically a filename.</param>
        </member>
        <member name="M:CSCore.Codecs.DDP.DDPDecoder.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Codecs.DDP.DDPDecoder"/> class.
            </summary>
            <param name="stream">Stream which contains DDP data.</param>
        </member>
        <member name="P:CSCore.Codecs.DDP.DDPDecoder.IsSupported">
            <summary>
            Gets a value which indicates whether the Mediafoundation DDP decoder is supported on the current platform.
            </summary>
        </member>
        <member name="T:CSCore.Codecs.CodecFactory">
            <summary>
                Helps to choose the right decoder for different codecs.
            </summary>
        </member>
        <member name="M:CSCore.Codecs.CodecFactory.Register(System.Object,CSCore.Codecs.CodecFactoryEntry)">
            <summary>
                Registers a new codec.
            </summary>
            <param name="key">
                The key which gets used internally to save the <paramref name="codec"/> in a
                <see cref="T:System.Collections.Generic.Dictionary`2"/>. This is typically the associated file extension. For example: the mp3 codec
                uses the string "mp3" as its key.
            </param>
            <param name="codec"><see cref="T:CSCore.Codecs.CodecFactoryEntry"/> which provides information about the codec.</param>
        </member>
        <member name="M:CSCore.Codecs.CodecFactory.GetCodec(System.String)">
            <summary>
                Returns a fully initialized <see cref="T:CSCore.IWaveSource"/> instance which is able to decode the specified file. If the
                specified file can not be decoded, this method throws an <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="filename">Filename of the specified file.</param>
            <returns>Fully initialized <see cref="T:CSCore.IWaveSource"/> instance which is able to decode the specified file.</returns>
            <exception cref="T:System.NotSupportedException">The codec of the specified file is not supported.</exception>
        </member>
        <member name="M:CSCore.Codecs.CodecFactory.GetCodec(System.Uri)">
            <summary>
                Returns a fully initialized <see cref="T:CSCore.IWaveSource"/> instance which is able to decode the audio source behind the
                specified <paramref name="uri"/>.
                If the specified audio source can not be decoded, this method throws an <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="uri">Uri which points to an audio source.</param>
            <returns>Fully initialized <see cref="T:CSCore.IWaveSource"/> instance which is able to decode the specified audio source.</returns>
            <exception cref="T:System.NotSupportedException">The codec of the specified audio source is not supported.</exception>
        </member>
        <member name="M:CSCore.Codecs.CodecFactory.GetSupportedFileExtensions">
            <summary>
                Returns all the common file extensions of all supported codecs. Note that some of these file extensions belong to
                more than one codec.
                That means that it can be possible that some files with the file extension abc can be decoded but other a few files
                with the file extension abc can't be decoded.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSCore.Codecs.CodecFactory.Instance">
            <summary>
                Gets the default singleton instance of the <see cref="T:CSCore.Codecs.CodecFactory"/> class.
            </summary>
            <remarks>Singleton implementation is not threadsafe.</remarks>
        </member>
        <member name="P:CSCore.Codecs.CodecFactory.SupportedFilesFilterEn">
            <summary>
                Gets the file filter in English. This filter can be used e.g. in combination with an OpenFileDialog.
            </summary>
        </member>
        <member name="T:CSCore.Codecs.FLAC.FlacFile">
            <summary>
                Provides a decoder for decoding flac (Free Lostless Audio Codec) data.
            </summary>
        </member>
        <member name="M:CSCore.Codecs.FLAC.FlacFile.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.Codecs.FLAC.FlacFile"/> class.
            </summary>
            <param name="fileName">Filename which of a flac file which should be decoded.</param>
        </member>
        <member name="M:CSCore.Codecs.FLAC.FlacFile.#ctor(System.IO.Stream)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.Codecs.FLAC.FlacFile"/> class.
            </summary>
            <param name="stream">Stream which contains flac data which should be decoded.</param>
        </member>
        <member name="M:CSCore.Codecs.FLAC.FlacFile.#ctor(System.IO.Stream,CSCore.Codecs.FLAC.FlacPreScanMethodMode)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.Codecs.FLAC.FlacFile"/> class.
            </summary>
            <param name="stream">Stream which contains flac data which should be decoded.</param>
            <param name="scanFlag">Scan mode which defines how to scan the flac data for frames.</param>
        </member>
        <member name="M:CSCore.Codecs.FLAC.FlacFile.#ctor(System.IO.Stream,CSCore.Codecs.FLAC.FlacPreScanMethodMode,System.Action{CSCore.Codecs.FLAC.FlacPreScanFinishedEventArgs})">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.Codecs.FLAC.FlacFile"/> class.
            </summary>
            <param name="stream">Stream which contains flac data which should be decoded.</param>
            <param name="scanFlag">Scan mode which defines how to scan the flac data for frames.</param>
            <param name="onscanFinished">
                Callback which gets called when the pre scan processes finished. Should be used if the
                <paramref name="scanFlag"/> argument is set the <see cref="F:CSCore.Codecs.FLAC.FlacPreScanMethodMode.Async"/>.
            </param>
        </member>
        <member name="M:CSCore.Codecs.FLAC.FlacFile.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads a sequence of bytes from the <see cref="T:CSCore.Codecs.FLAC.FlacFile"/> and advances the position within the stream by the
                number of bytes read.
            </summary>
            <param name="buffer">
                An array of bytes. When this method returns, the <paramref name="buffer"/> contains the specified
                byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> +
                <paramref name="count"/> - 1) replaced by the bytes read from the current source.
            </param>
            <param name="offset">
                The zero-based byte offset in the <paramref name="buffer"/> at which to begin storing the data
                read from the current stream.
            </param>
            <param name="count">The maximum number of bytes to read from the current source.</param>
            <returns>The total number of bytes read into the buffer.</returns>
        </member>
        <member name="M:CSCore.Codecs.FLAC.FlacFile.Dispose">
            <summary>
                Disposes the <see cref="T:CSCore.Codecs.FLAC.FlacFile"/> instance and disposes the underlying stream.
            </summary>
        </member>
        <member name="M:CSCore.Codecs.FLAC.FlacFile.Dispose(System.Boolean)">
            <summary>
                Disposes the <see cref="T:CSCore.Codecs.FLAC.FlacFile"/> instance and disposes the underlying stream.
            </summary>
            <param name="disposing">
                True to release both managed and unmanaged resources; false to release only unmanaged
                resources.
            </param>
        </member>
        <member name="M:CSCore.Codecs.FLAC.FlacFile.Finalize">
            <summary>
                Destructor which calls the <see cref="M:CSCore.Codecs.FLAC.FlacFile.Dispose(System.Boolean)"/> method.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.FLAC.FlacFile.Metadata">
            <summary>
                Gets a list with all found metadata fields.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.FLAC.FlacFile.WaveFormat">
            <summary>
                Gets the output <see cref="T:CSCore.WaveFormat"/> of the decoder.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.FLAC.FlacFile.CanSeek">
            <summary>
                Gets a value which indicates whether the seeking is supported. True means that seeking is supported; False means
                that seeking is not supported.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.FLAC.FlacFile.Position">
            <summary>
                Gets or sets the position of the <see cref="T:CSCore.Codecs.FLAC.FlacFile"/> in bytes.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.FLAC.FlacFile.Length">
            <summary>
                Gets the length of the <see cref="T:CSCore.Codecs.FLAC.FlacFile"/> in bytes.
            </summary>
        </member>
        <member name="T:CSCore.Codecs.FLAC.FlacFrameInformation">
            <summary>
            Provides some basic information about a flac frame. This structure is typically used for implementing a seeking algorithm. 
            </summary>
        </member>
        <member name="P:CSCore.Codecs.FLAC.FlacFrameInformation.Header">
            <summary>
            Gets the header of the flac frame.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.FLAC.FlacFrameInformation.IsFirstFrame">
            <summary>
            Gets a value which indicates whether the described frame is the first frame of the flac stream. True means that the described frame is the first frame of the flac stream. False means that the described frame is not the first frame of the flac stream.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.FLAC.FlacFrameInformation.StreamOffset">
            <summary>
            Gets the offset in bytes at which the frame starts in the flac stream (including the header of the frame).
            </summary>
        </member>
        <member name="P:CSCore.Codecs.FLAC.FlacFrameInformation.SampleOffset">
            <summary>
            Gets the number samples which are contained by other frames before this frame occurs.
            </summary>
        </member>
        <member name="T:CSCore.Codecs.FLAC.FlacPreScanFinishedEventArgs">
            <summary>
            FlacPreScanFinishedEventArgs
            </summary>
        </member>
        <member name="M:CSCore.Codecs.FLAC.FlacPreScanFinishedEventArgs.#ctor(System.Collections.Generic.List{CSCore.Codecs.FLAC.FlacFrameInformation})">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Codecs.FLAC.FlacPreScanFinishedEventArgs"/> class.
            </summary>
            <param name="frames">Found frames.</param>
        </member>
        <member name="P:CSCore.Codecs.FLAC.FlacPreScanFinishedEventArgs.Frames">
            <summary>
            Gets the a list of found frames by the scan.
            </summary>
        </member>
        <member name="T:CSCore.Codecs.FLAC.FlacPreScanMethodMode">
            <summary>
            Defines how to scan a flac stream.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.FLAC.FlacPreScanMethodMode.None">
            <summary>
            Don't scan the flac stream. This typically will cause a stream to be not seekable.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.FLAC.FlacPreScanMethodMode.Default">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.FLAC.FlacPreScanMethodMode.Sync">
            <summary>
            Scan synchronously.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.FLAC.FlacPreScanMethodMode.Async">
            <summary>
            Scan async BUT don't use the stream while scan is running because the stream position
            will change while scanning. If you playback the stream, it will cause an error!
            </summary>
        </member>
        <member name="P:CSCore.Codecs.FLAC.FlacMetadataStreamInfo.TotalSamples">
            <summary>
            0 = Unknown
            </summary>
        </member>
        <member name="T:CSCore.Codecs.FLAC.FlacMetaDataType">
            <summary>
            Defines flac metadata types.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.FLAC.FlacMetaDataType.StreamInfo">
            <summary>
            Streaminfo metadata.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.FLAC.FlacMetaDataType.Padding">
            <summary>
            Padding metadata.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.FLAC.FlacMetaDataType.Application">
            <summary>
            Application metadata.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.FLAC.FlacMetaDataType.Seektable">
            <summary>
            Seektable metadata.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.FLAC.FlacMetaDataType.VorbisComment">
            <summary>
            Vorbis comment metadata.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.FLAC.FlacMetaDataType.CueSheet">
            <summary>
            Cue sheet metadata.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.FLAC.FlacMetaDataType.Picture">
            <summary>
            Picture metadata.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.FLAC.FlacMetaDataType.Undef">
            <summary>
            Undefined metadata. Used for custom metadata fields.
            </summary>
        </member>
        <member name="T:CSCore.Codecs.GetCodecAction">
            <summary>
            Delegate which initializes a new decoder for a specific codec based on a <paramref name="stream"/>.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> which contains the data that should be decoded by the codec decoder.</param>
            <returns>Decoder for a specific coded based on a <paramref name="stream"/>.</returns>
        </member>
        <member name="T:CSCore.Codecs.MP1.Mp1Decoder">
            <summary>
            Mediafoundation MP1 decoder.
            </summary>
        </member>
        <member name="M:CSCore.Codecs.MP1.Mp1Decoder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Codecs.MP1.Mp1Decoder"/> class.
            </summary>
            <param name="uri">Url which points to a data source which provides MP1 data. This is typically a filename.</param>
        </member>
        <member name="M:CSCore.Codecs.MP1.Mp1Decoder.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Codecs.MP1.Mp1Decoder"/> class.
            </summary>
            <param name="stream">Stream which contains MP1 data.</param>
        </member>
        <member name="P:CSCore.Codecs.MP1.Mp1Decoder.IsSupported">
            <summary>
            Gets a value which indicates whether the Mediafoundation MP1 decoder is supported on the current platform.
            </summary>
        </member>
        <member name="T:CSCore.Codecs.MP2.Mp2Decoder">
            <summary>
            Mediafoundation MP2 decoder.
            </summary>
        </member>
        <member name="M:CSCore.Codecs.MP2.Mp2Decoder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Codecs.MP2.Mp2Decoder"/> class.
            </summary>
            <param name="uri">Url which points to a data source which provides MP2 data. This is typically a filename.</param>
        </member>
        <member name="M:CSCore.Codecs.MP2.Mp2Decoder.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Codecs.MP2.Mp2Decoder"/> class.
            </summary>
            <param name="stream">Stream which contains MP2 data.</param>
        </member>
        <member name="P:CSCore.Codecs.MP2.Mp2Decoder.IsSupported">
            <summary>
            Gets a value which indicates whether the Mediafoundation MP2 decoder is supported on the current platform.
            </summary>
        </member>
        <member name="T:CSCore.Codecs.MP3.DmoMp3Decoder">
            <summary>
            DirectX Media Object MP3 Decoder wrapper.
            </summary>
        </member>
        <member name="T:CSCore.DMO.DmoStream">
            <summary>
                Base class for all Dmo based streams.
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoStream.InputIndex">
            <summary>
                The default inputStreamIndex to use.
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoStream.OutputIndex">
            <summary>
                The default outputStreamIndex to use.
            </summary>
        </member>
        <member name="M:CSCore.DMO.DmoStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads a sequence of bytes from the stream.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the read bytes.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the stream.</param>
            <param name="count">The maximum number of bytes to be read from the stream</param>
            <returns>The actual number of read bytes.</returns>
        </member>
        <member name="M:CSCore.DMO.DmoStream.Dispose">
            <summary>
                Disposes the <see cref="T:CSCore.DMO.DmoStream"/>.
            </summary>
        </member>
        <member name="M:CSCore.DMO.DmoStream.GetInputData(System.Byte[]@,System.Int32)">
            <summary>
                Gets inputData to feed the Dmo MediaObject with.
            </summary>
            <param name="inputDataBuffer">
                InputDataBuffer which receives the inputData.
                If this parameter is null or the length is less than the amount of inputData, a new byte array will be applied.
            </param>
            <param name="requested">The requested number of bytes.</param>
            <returns>The number of bytes read. The number of actually read bytes does not have to be the number of requested bytes.</returns>
        </member>
        <member name="M:CSCore.DMO.DmoStream.CreateMediaObject(CSCore.WaveFormat,CSCore.WaveFormat)">
            <summary>
                Creates a MediaObjec to use. This can be a decoder, effect, ...
            </summary>
        </member>
        <member name="M:CSCore.DMO.DmoStream.GetInputFormat">
            <summary>
                Gets the input format to use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSCore.DMO.DmoStream.GetOutputFormat">
            <summary>
                Gets the output format to use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSCore.DMO.DmoStream.Initialize">
            <summary>
                Initializes the DmoStream. Important: This has to be called before using the DmoStream.
            </summary>
        </member>
        <member name="M:CSCore.DMO.DmoStream.InputToOutput(System.Int64)">
            <summary>
                Translates a position of the inputstream to the position in the outputstream.
            </summary>
            <param name="position">Any position/offset of the inputstream.</param>
            <returns>Position in the outputstream.</returns>
        </member>
        <member name="M:CSCore.DMO.DmoStream.OutputToInput(System.Int64)">
            <summary>
                Translates a position of the outputstream to the position in the inputstream.
            </summary>
            <param name="position">Any position/offset of the outputstream.</param>
            <returns>Position in the inputstream.</returns>
        </member>
        <member name="M:CSCore.DMO.DmoStream.ResetOverflowBuffer">
            <summary>
                Resets the overflowbuffer.
            </summary>
        </member>
        <member name="M:CSCore.DMO.DmoStream.Dispose(System.Boolean)">
            <summary>
                Disposes the <see cref="T:CSCore.DMO.DmoStream"/>.
            </summary>
        </member>
        <member name="P:CSCore.DMO.DmoStream.InputFormat">
            <summary>
                Gets the input format of the <see cref="T:CSCore.DMO.DmoStream"/>.
            </summary>
        </member>
        <member name="P:CSCore.DMO.DmoStream.Position">
            <summary>
                Gets or sets the position of the stream.
            </summary>
        </member>
        <member name="P:CSCore.DMO.DmoStream.Length">
            <summary>
                Gets the length of the stream.
            </summary>
        </member>
        <member name="P:CSCore.DMO.DmoStream.WaveFormat">
            <summary>
                Gets the output format of the <see cref="T:CSCore.DMO.DmoStream"/>.
            </summary>
        </member>
        <member name="M:CSCore.Codecs.MP3.DmoMp3Decoder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Codecs.MP3.DmoMp3Decoder"/> class.
            </summary>
            <param name="filename">File which contains raw MP3 data.</param>
        </member>
        <member name="M:CSCore.Codecs.MP3.DmoMp3Decoder.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Codecs.MP3.DmoMp3Decoder"/> class.
            </summary>
            <param name="stream">Stream which contains raw MP3 data.</param>
        </member>
        <member name="M:CSCore.Codecs.MP3.DmoMp3Decoder.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads a sequence of bytes from the stream.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the read bytes.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the stream.</param>
            <param name="count">The maximum number of bytes to be read from the stream</param>
            <returns>The actual number of read bytes.</returns>
        </member>
        <member name="M:CSCore.Codecs.MP3.DmoMp3Decoder.CreateMediaObject(CSCore.WaveFormat,CSCore.WaveFormat)">
            <summary>
            Returns a <see cref="T:CSCore.DMO.MediaObject"/> to decode the mp3 data.
            </summary>
            <param name="inputFormat">Format of the mp3 data to decode.</param>
            <param name="outputFormat">Output format.</param>
            <returns><see cref="T:CSCore.DMO.MediaObject"/> to decode the mp3 data.</returns>
        </member>
        <member name="M:CSCore.Codecs.MP3.DmoMp3Decoder.GetInputFormat">
            <summary>
            Returns the input format.
            </summary>
            <returns>Input format.</returns>
        </member>
        <member name="M:CSCore.Codecs.MP3.DmoMp3Decoder.GetOutputFormat">
            <summary>
            Returns the output format.
            </summary>
            <returns>Output format.</returns>
        </member>
        <member name="M:CSCore.Codecs.MP3.DmoMp3Decoder.GetInputData(System.Byte[]@,System.Int32)">
            <summary>
            Gets raw mp3 data to decode.
            </summary>
            <param name="inputDataBuffer">Byte array which will hold the raw mp3 data to decode.</param>
            <param name="requested">Number of requested bytes.</param>
            <returns>Total amount of read bytes.</returns>
        </member>
        <member name="M:CSCore.Codecs.MP3.DmoMp3Decoder.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:CSCore.Codecs.MP3.DmoMp3Decoder"/>.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:CSCore.Codecs.MP3.DmoMp3Decoder.Position">
            <summary>
            Gets or sets the position of the <see cref="T:CSCore.Codecs.MP3.DmoMp3Decoder"/> in bytes.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.MP3.DmoMp3Decoder.Length">
            <summary>
            Gets the length of the <see cref="T:CSCore.Codecs.MP3.DmoMp3Decoder"/> in bytes.
            </summary>
        </member>
        <member name="T:CSCore.Codecs.MP3.Mp3ChannelMode">
            <summary>
            Channelmode of MP3 data. For more information see the mp3 specification.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.Mp3ChannelMode.Stereo">
            <summary>
            Stereo (left and right).
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.Mp3ChannelMode.JointStereo">
            <summary>
            Joint stereo.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.Mp3ChannelMode.DualChannel">
            <summary>
            Dual channel.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.Mp3ChannelMode.Mono">
            <summary>
            Mono (only one channel).
            </summary>
        </member>
        <member name="T:CSCore.Codecs.MP3.Mp3Exception">
            <summary>
            Exception which can occur while working with MP3 data.
            </summary>
        </member>
        <member name="M:CSCore.Codecs.MP3.Mp3Exception.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Codecs.MP3.Mp3Exception"/> class.
            </summary>
            <param name="message">Message of the <see cref="T:CSCore.Codecs.MP3.Mp3Exception"/>.</param>
        </member>
        <member name="T:CSCore.Codecs.MP3.Mp3Format">
            <summary>
            The <see cref="T:CSCore.Codecs.MP3.Mp3Format"/> class describes an MPEG Audio Layer-3 (MP3) audio format. 
            </summary>
        </member>
        <member name="T:CSCore.WaveFormat">
            <summary>
                Defines the format of waveform-audio data.
            </summary>
        </member>
        <member name="M:CSCore.WaveFormat.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.WaveFormat"/> class with a sample rate of 44100 Hz, bits per sample
                of 16 bit, 2 channels and PCM as the format type.
            </summary>
        </member>
        <member name="M:CSCore.WaveFormat.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.WaveFormat"/> class with PCM as the format type.
            </summary>
            <param name="sampleRate">Samples per second.</param>
            <param name="bits">Number of bits, used to store one sample.</param>
            <param name="channels">Number of channels in the waveform-audio data.</param>
        </member>
        <member name="M:CSCore.WaveFormat.#ctor(System.Int32,System.Int32,System.Int32,CSCore.AudioEncoding)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.WaveFormat"/> class.
            </summary>
            <param name="sampleRate">Samples per second.</param>
            <param name="bits">Number of bits, used to store one sample.</param>
            <param name="channels">Number of channels in the waveform-audio data.</param>
            <param name="encoding">Format type or encoding of the wave format.</param>
        </member>
        <member name="M:CSCore.WaveFormat.#ctor(System.Int32,System.Int32,System.Int32,CSCore.AudioEncoding,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.WaveFormat"/> class.
            </summary>
            <param name="sampleRate">Samples per second.</param>
            <param name="bits">Number of bits, used to store one sample.</param>
            <param name="channels">Number of channels in the waveform-audio data.</param>
            <param name="encoding">Format type or encoding of the wave format.</param>
            <param name="extraSize">Size (in bytes) of extra information. This value is mainly used for marshalling.</param>
        </member>
        <member name="M:CSCore.WaveFormat.MillisecondsToBytes(System.Int64)">
            <summary>
                Converts a duration in milliseconds to a duration in bytes.
            </summary>
            <param name="milliseconds">Duration in millisecond to convert to a duration in bytes.</param>
            <returns>Duration in bytes.</returns>
        </member>
        <member name="M:CSCore.WaveFormat.BytesToMilliseconds(System.Int64)">
            <summary>
                Converts a duration in bytes to a duration in milliseconds.
            </summary>
            <param name="bytes">Duration in bytes to convert to a duration in milliseconds.</param>
            <returns>Duration in milliseconds.</returns>
        </member>
        <member name="M:CSCore.WaveFormat.ToString">
            <summary>
                Returns a string which describes the <see cref="T:CSCore.WaveFormat"/>.
            </summary>
            <returns>A string which describes the <see cref="T:CSCore.WaveFormat"/>.</returns>
        </member>
        <member name="M:CSCore.WaveFormat.Clone">
            <summary>
            Creates a new <see cref="T:CSCore.WaveFormat"/> object that is a copy of the current instance.
            </summary>
            <returns>A copy of the current instance.</returns>
        </member>
        <member name="P:CSCore.WaveFormat.Channels">
            <summary>
                Gets the number of channels in the waveform-audio data. Mono data uses one channel and stereo data uses two
                channels.
            </summary>
        </member>
        <member name="P:CSCore.WaveFormat.SampleRate">
            <summary>
                Gets the sample rate, in samples per second (hertz).
            </summary>
        </member>
        <member name="P:CSCore.WaveFormat.BytesPerSecond">
            <summary>
                Gets the required average data transfer rate, in bytes per second. For example, 16-bit stereo at 44.1 kHz has an
                average data rate of 176,400 bytes per second (2 channels — 2 bytes per sample per channel — 44,100 samples per
                second).
            </summary>
        </member>
        <member name="P:CSCore.WaveFormat.BlockAlign">
            <summary>
                Gets the block alignment, in bytes. The block alignment is the minimum atomic unit of data. For PCM data, the block
                alignment is the number of bytes used by a single sample, including data for both channels if the data is stereo.
                For example, the block alignment for 16-bit stereo PCM is 4 bytes (2 channels — 2 bytes per sample).
            </summary>
        </member>
        <member name="P:CSCore.WaveFormat.BitsPerSample">
            <summary>
                Gets the number of bits, used to store one sample.
            </summary>
        </member>
        <member name="P:CSCore.WaveFormat.ExtraSize">
            <summary>
                Gets the size (in bytes) of extra information. This value is mainly used for marshalling.
            </summary>
        </member>
        <member name="P:CSCore.WaveFormat.BytesPerSample">
            <summary>
                Gets the number of bytes, used to store one sample.
            </summary>
        </member>
        <member name="P:CSCore.WaveFormat.BytesPerBlock">
            <summary>
                Gets the number of bytes, used to store one block. This value equals <see cref="P:CSCore.WaveFormat.BytesPerSample"/> multiplied with
                <see cref="P:CSCore.WaveFormat.Channels"/>.
            </summary>
        </member>
        <member name="P:CSCore.WaveFormat.WaveFormatTag">
            <summary>
                Gets the waveform-audio format type.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.Mp3Format.Mp3WaveFormatExtraBytes">
            <summary>
            MPEGLAYER3_WFX_EXTRA_BYTES
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.Mp3Format.Id">
            <summary>
            Set this member to <see cref="F:CSCore.Codecs.MP3.Mp3FormatId.Mpeg"/>.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.Mp3Format.Flags">
            <summary>
            Indicates whether padding is used to adjust the average bitrate to the sampling rate. 
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.Mp3Format.BlockSize">
            <summary>
            Block size in bytes. This value equals the frame length in bytes x <see cref="F:CSCore.Codecs.MP3.Mp3Format.FramesPerBlock"/>. For MP3 audio, the frame length is calculated as follows: 144 x (bitrate / sample rate) + padding.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.Mp3Format.FramesPerBlock">
            <summary>
            Number of audio frames per block.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.Mp3Format.CodecDelay">
            <summary>
            Encoder delay in samples. If you do not know this value, set this structure member to zero.
            </summary>
        </member>
        <member name="M:CSCore.Codecs.MP3.Mp3Format.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Codecs.MP3.Mp3Format"/> class.
            </summary>
            <param name="sampleRate">Sample rate in Hz.</param>
            <param name="channels">Number of channels.</param>
            <param name="blockSize">Block size in bytes. This value equals the frame length in bytes x <see cref="F:CSCore.Codecs.MP3.Mp3Format.FramesPerBlock"/>. For MP3 audio, the frame length is calculated as follows: 144 x (bitrate / sample rate) + padding.</param>
            <param name="bitRate">Bitrate.</param>
        </member>
        <member name="T:CSCore.Codecs.MP3.Mp3FormatId">
            <summary>
            MP3 Format id.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.Mp3FormatId.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.Mp3FormatId.Mpeg">
            <summary>
            Default value. Equals the MPEGLAYER3_ID_MPEG constant.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.Mp3FormatId.ConstFrameSize">
            <summary>
            Constant frame size.
            </summary>
        </member>
        <member name="T:CSCore.Codecs.MP3.Mp3Frame">
            <summary>
            Represents an MP3 Frame.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.Mp3Frame.MaxFrameLength">
            <summary>
            Maximum length of one single <see cref="T:CSCore.Codecs.MP3.Mp3Frame"/> in bytes.
            </summary>
        </member>
        <member name="M:CSCore.Codecs.MP3.Mp3Frame.FromStream(System.IO.Stream)">
            <summary>
            Creates a new instance of the <see cref="T:CSCore.Codecs.MP3.Mp3Frame"/> class based on a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> which provides MP3 data.</param>
        </member>
        <member name="M:CSCore.Codecs.MP3.Mp3Frame.FromStream(System.IO.Stream,System.Byte[]@)">
            <summary>
            Creates a new instance of the <see cref="T:CSCore.Codecs.MP3.Mp3Frame"/> class based on a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> which provides MP3 data.</param>
            <param name="data">Byte array which recieves the content of the <see cref="T:CSCore.Codecs.MP3.Mp3Frame"/>.</param>
        </member>
        <member name="M:CSCore.Codecs.MP3.Mp3Frame.ReadData(System.Byte[]@,System.Int32)">
            <summary>
            Reads data from the <see cref="T:CSCore.Codecs.MP3.Mp3Frame"/>.
            </summary>
            <param name="buffer">Buffer which will receive the read data.</param>
            <param name="offset">Zero-based index at which to begin storing data within the <paramref name="buffer"/>.</param>
            <returns></returns>
        </member>
        <member name="P:CSCore.Codecs.MP3.Mp3Frame.MPEGVersion">
            <summary>
            Gets the Mpeg Version.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.MP3.Mp3Frame.MPEGLayer">
            <summary>
            Gets the Mpeg Layer.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.MP3.Mp3Frame.BitRate">
            <summary>
            Gets the bit rate.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.MP3.Mp3Frame.SampleRate">
            <summary>
            Gets the sample rate.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.MP3.Mp3Frame.ChannelMode">
            <summary>
            Gets the channel mode.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.MP3.Mp3Frame.ChannelCount">
            <summary>
            Gets the number of channels.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.MP3.Mp3Frame.SampleCount">
            <summary>
            Gets the number of samples
            </summary>
        </member>
        <member name="P:CSCore.Codecs.MP3.Mp3Frame.FrameLength">
            <summary>
            Gets the length of the frame.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.MP3.Mp3Frame.ChannelExtension">
            <summary>
            Gets the channel extension.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.MP3.Mp3Frame.CopyRight">
            <summary>
            Gets a value which indicates whether the copyright flag is set (true means that the copyright flag is set).
            </summary>
        </member>
        <member name="P:CSCore.Codecs.MP3.Mp3Frame.Original">
            <summary>
            Gets a value which indicates whether the original flag is set (true means that the original flag is set).
            </summary>
        </member>
        <member name="P:CSCore.Codecs.MP3.Mp3Frame.Emphasis">
            <summary>
            Gets the emphasis.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.MP3.Mp3Frame.Padding">
            <summary>
            Gets the padding.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.MP3.Mp3Frame.CrcEnabled">
            <summary>
            Gets a value which indicates whether the crc flag is set (true means that the crc flag is set).
            </summary>
        </member>
        <member name="T:CSCore.Codecs.MP3.Mp3MediafoundationDecoder">
            <summary>
            MP3 Mediafoundation Decoder.
            </summary>
        </member>
        <member name="M:CSCore.Codecs.MP3.Mp3MediafoundationDecoder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Codecs.MP3.Mp3MediafoundationDecoder"/> class.
            </summary>
            <param name="uri">Url which points to a data source which provides MP3 data. This is typically a filename.</param>
        </member>
        <member name="M:CSCore.Codecs.MP3.Mp3MediafoundationDecoder.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Codecs.MP3.Mp3MediafoundationDecoder"/> class.
            </summary>
            <param name="stream">Stream which contains MP3 data.</param>
        </member>
        <member name="P:CSCore.Codecs.MP3.Mp3MediafoundationDecoder.IsSupported">
            <summary>
            Gets a value which indicates whether the Mediafoundation MP3 decoder is supported on the current platform.
            </summary>
        </member>
        <member name="T:CSCore.Codecs.MP3.Mp3PaddingFlags">
            <summary>
            Indicates whether padding is used to adjust the average bitrate to the sampling rate. Use one of the following values:
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.Mp3PaddingFlags.PaddingIso">
            <summary>
            Insert padding as needed to achieve the stated average bitrate.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.Mp3PaddingFlags.PaddingOn">
            <summary>
            Always insert padding. The average bit rate may be higher than stated.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.Mp3PaddingFlags.PaddingOff">
            <summary>
            Never insert padding. The average bit rate may be lower than stated.
            </summary>
        </member>
        <member name="M:CSCore.Codecs.MP3.Mp3WebStream.SetAllowUnsafeHeaderParsing20">
            <summary>
                Copied from
                http:
                //social.msdn.microsoft.com/forums/en-US/netfxnetcom/thread/ff098248-551c-4da9-8ba5-358a9f8ccc57/
            </summary>
        </member>
        <member name="T:CSCore.Codecs.MP3.MpegLayer">
            <summary>
            Defines all known Mpeg-layers.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.MpegLayer.Reserved">
            <summary>
            Reserved by ISO.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.MpegLayer.Layer3">
            <summary>
            MPEG Layer 3
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.MpegLayer.Layer2">
            <summary>
            MPEG Layer 2
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.MpegLayer.Layer1">
            <summary>
            MPEG Layer 1
            </summary>
        </member>
        <member name="T:CSCore.Codecs.MP3.MpegVersion">
            <summary>
            Defines all known Mpeg Versions.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.MpegVersion.Version25">
            <summary>
            Version 2.5
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.MpegVersion.Reserved">
            <summary>
            Reserved by ISO
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.MpegVersion.Version2">
            <summary>
            Version 2.0
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.MpegVersion.Version1">
            <summary>
            Version 1.0
            </summary>
        </member>
        <member name="T:CSCore.Codecs.MP3.XingHeader">
            <summary>
            See http://www.codeproject.com/KB/audio-video/mpegaudioinfo.aspx#XINGHeader and www.mp3-tech.org/programmer/sources/vbrheadersdk.zip.
            </summary>
        </member>
        <member name="M:CSCore.Codecs.MP3.XingHeader.FromFrame(CSCore.Codecs.MP3.Mp3Frame)">
            <summary>
            Gets the <see cref="T:CSCore.Codecs.MP3.XingHeader"/> of a <see cref="T:CSCore.Codecs.MP3.Mp3Frame"/>. If the <paramref name="frame"/> does not has an <see cref="T:CSCore.Codecs.MP3.XingHeader"/> the return value will be null.
            </summary>
            <param name="frame"><see cref="T:CSCore.Codecs.MP3.Mp3Frame"/> which should get checked whether it contains a <see cref="T:CSCore.Codecs.MP3.XingHeader"/>.</param>
            <returns><see cref="T:CSCore.Codecs.MP3.XingHeader"/> of the specified <paramref name="frame"/> or null.</returns>
        </member>
        <member name="P:CSCore.Codecs.MP3.XingHeader.HeaderFlags">
            <summary>
            Gets the header flags of the <see cref="T:CSCore.Codecs.MP3.XingHeader"/>.
            </summary>
        </member>
        <member name="T:CSCore.Codecs.MP3.XingHeaderFlags">
            <summary>
            Defines the header flags of a xing header.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.XingHeaderFlags.Frames">
            <summary>
            Frames field is present
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.XingHeaderFlags.Bytes">
            <summary>
            Bytes field is present.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.XingHeaderFlags.Toc">
            <summary>
            TOC field is present.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.MP3.XingHeaderFlags.QualityIndicator">
            <summary>
            Quality indicator field is present.
            </summary>
        </member>
        <member name="T:CSCore.Codecs.WMA.WmaDecoder">
            <summary>
            Mediafoundation WMA decoder.
            </summary>
        </member>
        <member name="M:CSCore.Codecs.WMA.WmaDecoder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Codecs.WMA.WmaDecoder"/> class.
            </summary>
            <param name="uri">Url which points to a data source which provides WMA data. This is typically a filename.</param>
        </member>
        <member name="M:CSCore.Codecs.WMA.WmaDecoder.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Codecs.WMA.WmaDecoder"/> class.
            </summary>
            <param name="stream">Stream which contains WMA data.</param>
        </member>
        <member name="P:CSCore.Codecs.WMA.WmaDecoder.IsSupported">
            <summary>
            Gets a value which indicates whether the Mediafoundation WMA, WMA-Speech and WMA-Professional decoder is supported on the current platform.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.WMA.WmaDecoder.IsSpeechSupported">
            <summary>
            Gets a value which indicates whether the Mediafoundation WMA-Speech decoder is supported on the current platform.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.WMA.WmaDecoder.IsWmaProfessionalSupported">
            <summary>
            Gets a value which indicates whether the Mediafoundation WMA-Professional decoder is supported on the current platform.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.WMA.WmaDecoder.IsWmaSupported">
            <summary>
            Gets a value which indicates whether the Mediafoundation WMA decoder is supported on the current platform.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioCaptureClient">
            <summary>
                Enables a client to read input data from a capture endpoint buffer. See:
                <see href="http://msdn.microsoft.com/en-us/library/dd370858(v=vs.85).aspx" />.
            </summary>
        </member>
        <member name="T:CSCore.Win32.ComObject">
            <summary>
            Represents a native COM object.
            </summary>
        </member>
        <member name="T:CSCore.Win32.IUnknown">
            <summary>
            Enables clients to get pointers to other interfaces on a given object through the <see cref="M:CSCore.Win32.IUnknown.QueryInterface(System.Guid@,System.IntPtr@)"/> method, and manage the existence of the object through the <see cref="M:CSCore.Win32.IUnknown.AddRef"/> and <see cref="M:CSCore.Win32.IUnknown.Release"/> methods.
            </summary>
        </member>
        <member name="M:CSCore.Win32.IUnknown.QueryInterface(System.Guid@,System.IntPtr@)">
            <summary>
            Retrieves pointers to the supported interfaces on an object.
            </summary>
            <param name="riid">The identifier of the interface being requested.</param>
            <param name="ppvObject">The address of a pointer variable that receives the interface pointer requested in the <paramref name="riid"/> parameter.</param>
            <returns>This method returns S_OK if the interface is supported, and E_NOINTERFACE otherwise. If ppvObject is NULL, this method returns E_POINTER.</returns>
        </member>
        <member name="M:CSCore.Win32.IUnknown.AddRef">
            <summary>
            Increments the reference count for an interface on an object. This method should be called for every new copy of a pointer to an interface on an object.
            </summary>
            <returns>The method returns the new reference count. This value is intended to be used only for test purposes.</returns>
        </member>
        <member name="M:CSCore.Win32.IUnknown.Release">
            <summary>
            Decrements the reference count for an interface on an object.
            </summary>
            <returns>The method returns the new reference count. This value is intended to be used only for test purposes.</returns>
        </member>
        <member name="F:CSCore.Win32.ComObject.UnsafeBasePtr">
            <summary>
            Unsafe native pointer to the COM object.
            </summary>
        </member>
        <member name="M:CSCore.Win32.ComObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Win32.ComObject"/> class.
            </summary>
        </member>
        <member name="M:CSCore.Win32.ComObject.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Win32.ComObject"/> class.
            </summary>
            <param name="ptr">The native pointer of the COM object.</param>
        </member>
        <member name="M:CSCore.Win32.ComObject.QueryInterface``1">
            <summary>
            Queries supported interfaces/objects on a <see cref="T:CSCore.Win32.ComObject"/>.
            </summary>
            <typeparam name="T">The <see cref="T:CSCore.Win32.ComObject"/> being requested.</typeparam>
            <returns></returns>
        </member>
        <member name="M:CSCore.Win32.ComObject.QueryInterface(System.Type)">
            <summary>
            Retrieves a pointer to the supported interface on an object.
            </summary>
            <param name="type">Type of the requested <see cref="T:CSCore.Win32.ComObject"/>.</param>
            <returns></returns>
        </member>
        <member name="M:CSCore.Win32.ComObject.CSCore#Win32#IUnknown#QueryInterface(System.Guid@,System.IntPtr@)">
            <summary>
            Retrieves pointers to the supported interfaces on an object.
            </summary>
            <param name="riid">The identifier of the interface being requested.</param>
            <param name="ppvObject">The address of a pointer variable that receives the interface pointer requested in the <paramref name="riid"/> parameter.</param>
            <returns>This method returns S_OK if the interface is supported, and E_NOINTERFACE otherwise. If ppvObject is NULL, this method returns E_POINTER.</returns>
        </member>
        <member name="M:CSCore.Win32.ComObject.QueryInterface(System.Guid@,System.IntPtr@)">
            <summary>
            Retrieves pointers to the supported interfaces on an object.
            </summary>
            <param name="riid">The identifier of the interface being requested.</param>
            <param name="ppvObject">The address of a pointer variable that receives the interface pointer requested in the <paramref name="riid"/> parameter.</param>
            <returns>This method returns S_OK if the interface is supported, and E_NOINTERFACE otherwise. If ppvObject is NULL, this method returns E_POINTER.</returns>
        </member>
        <member name="M:CSCore.Win32.ComObject.CSCore#Win32#IUnknown#AddRef">
            <summary>
            Increments the reference count for an interface on an object. This method should be called for every new copy of a pointer to an interface on an object.
            </summary>
            <returns>The method returns the new reference count. This value is intended to be used only for test purposes.</returns>
        </member>
        <member name="M:CSCore.Win32.ComObject.AddRef">
            <summary>
            Increments the reference count for an interface on an object. This method should be called for every new copy of a pointer to an interface on an object.
            </summary>
            <returns>The method returns the new reference count. This value is intended to be used only for test purposes.</returns>
        </member>
        <member name="M:CSCore.Win32.ComObject.CSCore#Win32#IUnknown#Release">
            <summary>
            Decrements the reference count for an interface on an object.
            </summary>
            <returns>The method returns the new reference count. This value is intended to be used only for test purposes.</returns>
        </member>
        <member name="M:CSCore.Win32.ComObject.Release">
            <summary>
            Decrements the reference count for an interface on an object.
            </summary>
            <returns>The method returns the new reference count. This value is intended to be used only for test purposes.</returns>
        </member>
        <member name="M:CSCore.Win32.ComObject.Dispose">
            <summary>
            Releases the COM object.
            </summary>
        </member>
        <member name="M:CSCore.Win32.ComObject.Dispose(System.Boolean)">
            <summary>
            Releases the COM object.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:CSCore.Win32.ComObject.BasePtr">
            <summary>
            Native pointer to the COM object.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioCaptureClient.#ctor(System.IntPtr)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.CoreAudioAPI.AudioCaptureClient"/> class.
            </summary>
            <param name="ptr">The native pointer of the IAudioCaptureClient COM object.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioCaptureClient.FromAudioClient(CSCore.CoreAudioAPI.AudioClient)">
            <summary>
                Creates a new <see cref="T:CSCore.CoreAudioAPI.AudioCaptureClient"/> by calling the <see cref="M:CSCore.CoreAudioAPI.AudioClient.GetService(System.Guid)"/> method of the
                specified <paramref name="audioClient"/>.
            </summary>
            <param name="audioClient">
                <see cref="T:CSCore.CoreAudioAPI.AudioClient"/> which should be used to create the <see cref="T:CSCore.CoreAudioAPI.AudioCaptureClient"/>-instance
                with.
            </param>
            <returns></returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioCaptureClient.GetBufferNative(System.IntPtr@,System.UInt32@,CSCore.CoreAudioAPI.AudioClientBufferFlags@,System.UInt64@,System.UInt64@)">
            <summary>
                Retrieves a pointer to the next available packet of data in the capture endpoint buffer.
                http: //msdn.microsoft.com/en-us/library/dd370859(v=vs.85).aspx
            </summary>
            <param name="ppData">
                Pointer to a pointer variable into which the method writes the starting address of the next data
                packet that is available for the client to read.
            </param>
            <param name="pNumFramesRead">
                Variable into which the method writes the frame count (the number of audio frames
                available in the data packet). The client should either read the entire data packet or none of it.
            </param>
            <param name="flags">Variable into which the method writes the buffer-status flags.</param>
            <param name="devicePosition">
                Variable into which the method writes the device position of the first audio frame in the
                data packet. The device position is expressed as the number of audio frames from the start of the stream.
            </param>
            <param name="qpcPosition">
                Variable into which the method writes the value of the performance counter at the time that
                the audio endpoint device recorded the device position of the first audio frame in the data packet.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioCaptureClient.GetBuffer(System.UInt32@,CSCore.CoreAudioAPI.AudioClientBufferFlags@,System.UInt64@,System.UInt64@)">
            <summary>
                Retrieves a pointer to the next available packet of data in the capture endpoint buffer.
                For more information see
                <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd370859%28v=vs.85%29.aspx" />.
            </summary>
            <param name="framesRead">
                Variable into which the method writes the frame count (the number of audio frames available in
                the data packet). The client should either read the entire data packet or none of it.
            </param>
            <param name="flags">Variable into which the method writes the buffer-status flags.</param>
            <param name="devicePosition">
                Variable into which the method writes the device position of the first audio frame in the
                data packet. The device position is expressed as the number of audio frames from the start of the stream.
            </param>
            <param name="qpcPosition">
                Variable into which the method writes the value of the performance counter at the time that
                the audio endpoint device recorded the device position of the first audio frame in the data packet.
            </param>
            <returns>
                Pointer to a variable which stores the starting address of the next data packet that is available for the
                client to read.
            </returns>
            <remarks>
                Use Marshal.Copy to convert the pointer to the buffer into an array.
            </remarks>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioCaptureClient.GetBuffer(System.UInt32@,CSCore.CoreAudioAPI.AudioClientBufferFlags@)">
            <summary>
                Retrieves a pointer to the next available packet of data in the capture endpoint buffer.
                http: //msdn.microsoft.com/en-us/library/dd370859(v=vs.85).aspx
            </summary>
            <remarks>
                Use Marshal.Copy to convert the pointer to the buffer into an array.
            </remarks>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioCaptureClient.ReleaseBufferNative(System.UInt32)">
            <summary>
                The ReleaseBuffer method releases the buffer.
                http: //msdn.microsoft.com/en-us/library/dd370861(v=vs.85).aspx
            </summary>
            <param name="framesRead">
                The number of audio frames that the client read from the
                capture buffer. This parameter must be either equal to the number of frames in the
                previously acquired data packet or 0.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioCaptureClient.ReleaseBuffer(System.UInt32)">
            <summary>
                The ReleaseBuffer method releases the buffer.
                http: //msdn.microsoft.com/en-us/library/dd370861(v=vs.85).aspx
            </summary>
            <param name="framesRead">
                The number of audio frames that the client read from the
                capture buffer. This parameter must be either equal to the number of frames in the
                previously acquired data packet or 0.
            </param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioCaptureClient.GetNextPacketSizeNative(System.UInt32@)">
            <summary>
                The GetNextPacketSize method retrieves the number of frames in the next data packet in
                the capture endpoint buffer.
                http: //msdn.microsoft.com/en-us/library/dd370860(v=vs.85).aspx
            </summary>
            <param name="numFramesInNextPacket">
                Variable into which the method writes the frame count (the number of audio
                frames in the next capture packet).
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioCaptureClient.GetNextPacketSize">
            <summary>
                The GetNextPacketSize method retrieves the number of frames in the next data packet in
                the capture endpoint buffer.
                See <see href="http://msdn.microsoft.com/en-us/library/dd370860(v=vs.85).aspx" />.
            </summary>
            <returns>The number of the audio frames in the next capture packet.</returns>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioCaptureClient.NextPacketSize">
            <summary>
                Gets the size of the next packet in frames (the size of one frame equals the blockalign value of the waveformat).
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioClientBufferFlags">
            <summary>
            Defines flags that indicate the status of an audio endpoint buffer.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioClientBufferFlags.DataDiscontinuity">
            <summary>
            The data in the packet is not correlated with the previous packet's device position;
            this is possibly due to a stream state transition or timing glitch.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioClientBufferFlags.Silent">
            <summary>
            Treat all of the data in the packet as silence and ignore the actual data values.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioClientBufferFlags.TimestampError">
            <summary>
            The time at which the device's stream position was recorded is uncertain. Thus, the
            client might be unable to accurately set the time stamp for the current data packet.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioClientStreamFlags">
            <summary>
            For details see:
            http://msdn.microsoft.com/en-us/library/windows/desktop/dd370791(v=vs.85).aspx and
            http://msdn.microsoft.com/en-us/library/windows/desktop/dd370789(v=vs.85).aspx
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioClientStreamFlags.StreamFlagsRateAdjust">
            <summary>
            Supported since Windows 7
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioMeterInformation">
            <summary>
            See http://msdn.microsoft.com/en-us/library/windows/desktop/dd368227(v=vs.85).aspx
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioMeterInformation.FromDevice(CSCore.CoreAudioAPI.MMDevice)">
            <summary>
            Creates a new AudioMeterInformation instance for the given device.
            </summary>
            <returns>AudioMeterInformation</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioMeterInformation.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of <see cref="T:CSCore.CoreAudioAPI.AudioMeterInformation"/> class.
            </summary>
            <param name="ptr">The native pointer.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioMeterInformation.GetPeakValueNative(System.Single@)">
            <summary>
            The GetPeakValue method gets the peak sample value for the channels in the audio stream.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioMeterInformation.GetPeakValue">
            <summary>
            The GetPeakValue method gets the peak sample value for the channels in the audio stream.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioMeterInformation.GetMeteringChannelCountNative(System.Int32@)">
            <summary>
            The GetMeteringChannelCount method gets the number of channels in the audio stream that
            are monitored by peak meters.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioMeterInformation.GetMeteringChannelCount">
            <summary>
            The GetMeteringChannelCount method gets the number of channels in the audio stream that
            are monitored by peak meters.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioMeterInformation.GetChannelsPeakValuesNative(System.Int32,System.Single[]@)">
            <summary>
            The GetChannelsPeakValues method gets the peak sample values for all the channels in the
            audio stream.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioMeterInformation.GetChannelsPeakValues(System.Int32)">
            <summary>
            The GetChannelsPeakValues method gets the peak sample values for all the channels in the
            audio stream.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioMeterInformation.GetChannelsPeakValues">
            <summary>
            The GetChannelsPeakValues method gets the peak sample values for all the channels in the
            audio stream.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioMeterInformation.QueryHardwareSupportNative(CSCore.CoreAudioAPI.EndpointHardwareSupport@)">
            <summary>
            The QueryHardwareSupport method queries the audio endpoint device for its
            hardware-supported functions.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioMeterInformation.QueryHardwareSupport">
            <summary>
            The QueryHardwareSupport method queries the audio endpoint device for its
            hardware-supported functions.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioMeterInformation.MeteringChannelCount">
            <summary>
            Gets the number of channels in the audio stream that are monitored by peak meters.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioMeterInformation.Item(System.Int32)">
            <summary>
            Gets the peak sample value for the given channelindex.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioMeterInformation.HardwareSupport">
            <summary>
            The QueryHardwareSupport method queries the audio endpoint device for its
            hardware-supported functions.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioMeterInformation.PeakValue">
            <summary>
            Gets the peak sample value for the channels in the audio stream.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionChannelVolumeChangedEventArgs">
            <summary>
            AudioSessionChannelVolumeChanged
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionEventContextEventArgs">
            <summary>
            AudioSessionEventContextEventArgs
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionEventContextEventArgs.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.CoreAudioAPI.AudioSessionEventContextEventArgs"/> class.
            </summary>
            <param name="eventContext">The event context value.</param>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionEventContextEventArgs.EventContext">
            <summary>
            Gets the event context value.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionChannelVolumeChangedEventArgs.#ctor(System.Int32,System.Single[],System.Int32,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.CoreAudioAPI.AudioSessionChannelVolumeChangedEventArgs"/> class.
            </summary>
            <param name="channelCount">Number of channels.</param>
            <param name="channelVolumes">Volumes of the channels.</param>
            <param name="changedChannel">Number of channel volumes changed.</param>
            <param name="eventContext">Userdefined event context.</param>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionChannelVolumeChangedEventArgs.ChannelCount">
            <summary>
            The channel count. This parameter specifies the number of audio channels in the session submix.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionChannelVolumeChangedEventArgs.ChannelVolumes">
            <summary>
            Each volume level is a value in the range 0.0 to 1.0, where 0.0 is silence and 1.0 is full volume.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionChannelVolumeChangedEventArgs.ChangedChannel">
            <summary>
            Use this value as an index into the <see cref="P:CSCore.CoreAudioAPI.AudioSessionChannelVolumeChangedEventArgs.ChannelVolumes"/>.
            If the session submix contains n channels, the channels are numbered from 0 to n– 1. If more than one channel might have changed, the value of ChangedChannel is (DWORD)(–1).
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionChannelVolumeChangedEventArgs.Item(System.Int32)">
            <summary>
            Returns the volume of the specified channel. <see cref="P:CSCore.CoreAudioAPI.AudioSessionChannelVolumeChangedEventArgs.ChannelVolumes"/>
            </summary>
            <param name="channelIndex"></param>
            <returns>Volume level of the specified channelIndex in the range 0.0 to 1.0, where 0.0 is silence and 1.0 is full volume.</returns>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionControl2">
            <summary>
            IAudioSessionControl2
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionControl">
            <summary>
            The <see cref="T:CSCore.CoreAudioAPI.AudioSessionControl"/> class enables a client to configure the control parameters for an audio session and to monitor events in the session.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.CoreAudioAPI.AudioSessionControl"/> class.
            </summary>
            <param name="ptr">Native pointer of the <see cref="T:CSCore.CoreAudioAPI.AudioSessionControl"/> object.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl.GetStateNative(CSCore.CoreAudioAPI.AudioSessionState@)">
            <summary>
            The GetState method retrieves the current state of the audio session.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl.GetDisplayNameNative(System.String@)">
            <summary>
            The GetDisplayName method retrieves the display name for the audio session.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl.SetDisplayNameNative(System.String,System.Guid)">
            <summary>
            The SetDisplayName method assigns a display name to the current session.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl.GetIconPathNative(System.String@)">
            <summary>
            The GetIconPath method retrieves the path for the display icon for the audio session.
            </summary>
            <param name="iconPath">See http://msdn.microsoft.com/en-us/library/windows/desktop/dd368261(v=vs.85).aspx </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl.SetIconPathNative(System.String,System.Guid)">
            <summary>
            The SetDisplayName method assigns a display name to the current session.
            </summary>
            <param name="iconPath">See http://msdn.microsoft.com/en-us/library/windows/desktop/dd368274(v=vs.85).aspx </param>
            <param name="eventContext">Context</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl.GetGroupingParamNative(System.Guid@)">
            <summary>
            The GetGroupingParam method retrieves the grouping parameter of the audio session.
            </summary>
            <returns>HRESULT</returns>
            <remarks>For some more information about Grouping Parameters see http://msdn.microsoft.com/en-us/library/windows/desktop/dd370848(v=vs.85).aspx </remarks>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl.SetGroupingParamNative(System.Guid,System.Guid)">
            <summary>
            The SetGroupingParam method assigns a session to a grouping of sessions.
            </summary>
            <returns>HRESULT</returns>
            <remarks>For some more information about Grouping Parameters see http://msdn.microsoft.com/en-us/library/windows/desktop/dd370848(v=vs.85).aspx </remarks>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl.RegisterAudioSessionNotificationNative(CSCore.CoreAudioAPI.IAudioSessionEvents)">
            <summary>
            The RegisterAudioSessionNotification method registers the client to receive notifications of session events, including changes in the stream state.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl.RegisterAudioSessionNotification(CSCore.CoreAudioAPI.IAudioSessionEvents)">
            <summary>
            The RegisterAudioSessionNotification method registers the client to receive notifications of session events, including changes in the stream state.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl.UnregisterAudioSessionNotificationNative(CSCore.CoreAudioAPI.IAudioSessionEvents)">
            <summary>
            The UnregisterAudioSessionNotification method deletes a previous registration by the client to receive notifications.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl.UnregisterAudioSessionNotification(CSCore.CoreAudioAPI.IAudioSessionEvents)">
            <summary>
            The UnregisterAudioSessionNotification method deletes a previous registration by the client to receive notifications.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionControl.SessionState">
            <summary>
            Gets the current state of the audio session.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionControl.DisplayName">
            <summary>
            Gets or sets the display name for the audio session.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionControl.IconPath">
            <summary>
            Gets or sets the path for the display icon for the audio session.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionControl.GroupingParam">
            <summary>
            Gets or sets the grouping parameter of the audio session.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl2.GetSessionIdentifierNative(System.String@)">
            <summary>
            Gets the session identifier. See http://msdn.microsoft.com/en-us/library/windows/desktop/dd368252(v=vs.85).aspx
            </summary>
            <param name="sessionID">Audio session identifier.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl2.GetSessionInstanceIdentifierNative(System.String@)">
            <summary>
            Gets the identifier of the audio session instance. See http://msdn.microsoft.com/en-us/library/windows/desktop/dd368255(v=vs.85).aspx.
            </summary>
            <param name="sessionID">Identifier of a particular instance of the audio session.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl2.GetProcessIdNative(System.Int32@)">
            <summary>
            Gets the process identifier of the audio session.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl2.IsSystemSoundSessionNative">
            <summary>
            The IsSystemSoundsSession method indicates whether the session is a system sounds session.
            </summary>
            <returns>HRESULT; S_OK = true, S_FALSE = false</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl2.SetDuckingPreferenceNative(CSCore.Win32.NativeBool)">
            <summary>
            The SetDuckingPreference method enables or disables the default stream attenuation experience (auto-ducking) provided by the system.
            </summary>
            <param name="enableSystemAutoDucking">A BOOL variable that enables or disables system auto-ducking.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionControl2.SetDuckingPreference(System.Boolean)">
            <summary>
            The SetDuckingPreference method enables or disables the default stream attenuation experience (auto-ducking) provided by the system.
            </summary>
            <param name="enableSystemAutoDucking">A BOOL variable that enables or disables system auto-ducking.</param>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionControl2.SessionIdentifier">
            <summary>
            Gets the session identifier. See http://msdn.microsoft.com/en-us/library/windows/desktop/dd368252(v=vs.85).aspx
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionControl2.SessionIstanceIdentifier">
            <summary>
            Gets the identifier of the audio session instance. See http://msdn.microsoft.com/en-us/library/windows/desktop/dd368255(v=vs.85).aspx.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionControl2.ProcessID">
            <summary>
            Gets the process identifier of the audio session.
            In the case of that the session is no SingleProcessSession (see <see cref="P:CSCore.CoreAudioAPI.AudioSessionControl2.IsSingleProcessSession"/>), the ProcessID is the initial identifier of the process that created the session.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionControl2.IsSingleProcessSession">
            <summary>
            Indicates whether the session spans more than one process. 
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionControl2.Process">
            <summary>
            Gets the process of the audio session.
            In the case of that the session is no SingleProcessSession (see <see cref="P:CSCore.CoreAudioAPI.AudioSessionControl2.IsSingleProcessSession"/>), the Process is the process that created the session.
            If the process that created the session is not available anymore, the returnvalue is null.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionControl2.IsSystemSoundSession">
            <summary>
            Indicates whether the session is a system sounds session.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionDisconnectedEventArgs">
            <summary>
            AudioSessionDisconnectedEventArgs
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionDisconnectedEventArgs.DisconnectReason">
            <summary>
            The reason that the audio session was disconnected.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionDisconnectReason">
            <summary>
            AudioSessionDisconnectReason
            </summary>
            <remarks>For more information about WTS sessions, see the Windows SDK documentation.</remarks>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioSessionDisconnectReason.DisconnectReasonDeviceRemoval">
            <summary>
            The user removed the audio endpoint device.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioSessionDisconnectReason.DisconnectReasonServerShutdown">
            <summary>
            The Windows audio service has stopped.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioSessionDisconnectReason.DisconnectReasonFormatChanged">
            <summary>
            The stream format changed for the device that the audio session is connected to.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioSessionDisconnectReason.DisconnectReasonSessionLogoff">
            <summary>
            The user logged off the Windows Terminal Services (WTS) session that the audio session was running in.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioSessionDisconnectReason.DisconnectReasonSessionDisconnected">
            <summary>
            The WTS session that the audio session was running in was disconnected.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioSessionDisconnectReason.DisconnectReasonExclusiveModeOverride">
            <summary>
            The (shared-mode) audio session was disconnected to make the audio endpoint device available for an exclusive-mode connection.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionDisplayNameChangedEventArgs">
            <summary>
            AudioSessionDisplayNameChangedEventArgs
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionDisplayNameChangedEventArgs.#ctor(System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.CoreAudioAPI.AudioSessionDisplayNameChangedEventArgs"/> class.
            </summary>
            <param name="newDisplayName">Thew new display name of the session.</param>
            <param name="eventContext">The event context value.</param>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionDisplayNameChangedEventArgs.NewDisplayName">
            <summary>
            Gets the new display name the session.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionEnumerator">
            <summary>
            AudioSessionEnumerator.
            See http://msdn.microsoft.com/en-us/library/windows/desktop/dd368281(v=vs.85).aspx. 
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionEnumerator.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.CoreAudioAPI.AudioSessionEnumerator"/> class.
            </summary>
            <param name="ptr">The native pointer of the <see cref="T:CSCore.CoreAudioAPI.AudioSessionEnumerator"/> object.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionEnumerator.GetCountNative(System.Int32@)">
            <summary>
            The GetCount method gets the total number of audio sessions that are open on the audio device.
            </summary>
            <param name="count">Receives the total number of audio sessions.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionEnumerator.GetSessionNative(System.Int32,CSCore.CoreAudioAPI.AudioSessionControl@)">
            <summary>
            The GetSession method gets the audio session specified by an audio session number.
            </summary>
            <param name="index">The session number. If there are n sessions, the sessions are numbered from 0 to n – 1. To get the number of sessions, call the GetCount method.</param>
            <param name="session">The <see cref="T:CSCore.CoreAudioAPI.AudioSessionControl"/> of the specified session number.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionEnumerator.GetSession(System.Int32)">
            <summary>
            Gets the audio session specified by an audio session number.
            </summary>
            <param name="index">The session number. If there are n sessions, the sessions are numbered from 0 to n – 1. To get the number of sessions, call the GetCount method.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionEnumerator.GetEnumerator">
            <summary>
            AudioSessionControl enumerator
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionEnumerator.Count">
            <summary>
            Gets the total number of audio sessions.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionEnumerator.Item(System.Int32)">
            <summary>
            Gets the audio session specified by an index.
            </summary>
            <param name="index">The session number. If there are n sessions, the sessions are numbered from 0 to n – 1. To get the number of sessions, call the GetCount method.</param>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionEvents">
            <summary>
            AudioSessionEvents.
            Fore more information take a look at: http://msdn.microsoft.com/en-us/library/windows/desktop/dd368289(v=vs.85).aspx
            </summary>
        </member>
        <member name="E:CSCore.CoreAudioAPI.AudioSessionEvents.DisplayNameChanged">
            <summary>
            Notifies the client that the display name for the session has changed.
            </summary>
        </member>
        <member name="E:CSCore.CoreAudioAPI.AudioSessionEvents.IconPathChanged">
            <summary>
            Notifies the client that the display icon for the session has changed.
            </summary>
        </member>
        <member name="E:CSCore.CoreAudioAPI.AudioSessionEvents.SimpleVolumeChanged">
            <summary>
            Notifies the client that the volume level or muting state of the session has changed.
            </summary>
        </member>
        <member name="E:CSCore.CoreAudioAPI.AudioSessionEvents.ChannelVolumeChanged">
            <summary>
            Notifies the client that the volume level of an audio channel in the session submix has changed.
            </summary>
        </member>
        <member name="E:CSCore.CoreAudioAPI.AudioSessionEvents.GroupingParamChanged">
            <summary>
            Notifies the client that the grouping parameter for the session has changed.
            </summary>
        </member>
        <member name="E:CSCore.CoreAudioAPI.AudioSessionEvents.StateChanged">
            <summary>
            Notifies the client that the stream-activity state of the session has changed.
            </summary>
        </member>
        <member name="E:CSCore.CoreAudioAPI.AudioSessionEvents.SessionDisconnected">
            <summary>
            Notifies the client that the session has been disconnected.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionGroupingParamChangedEventArgs">
            <summary>
            AudioSessionGroupingParamChangedEventArgs
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionGroupingParamChangedEventArgs.NewGroupingParam">
            <summary>
            The new grouping parameter for the session.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionIconPathChangedEventArgs">
            <summary>
            AudioSessionIconPathChangedEventArgs
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionIconPathChangedEventArgs.NewIconPath">
            <summary>
            The path for the new display icon for the session.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionManager">
            <summary>
            The <see cref="T:CSCore.CoreAudioAPI.AudioSessionManager"/> class enables a client to access the session controls and volume controls for both cross-process and process-specific audio sessions.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.CoreAudioAPI.AudioSessionManager"/> class.
            </summary>
            <param name="ptr">Native pointer to the <see cref="T:CSCore.CoreAudioAPI.AudioSessionManager"/> object.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager.GetAudioSessionControlNative(System.Guid,System.Int32,CSCore.CoreAudioAPI.AudioSessionControl@)">
            <summary>
            The GetAudioSessionControl method retrieves an audio session control.
            </summary>
            <param name="audioSessionGuid">If the GUID does not identify a session that has been previously opened, the call opens a new but empty session. If the value is Guid.Empty, the method assigns the stream to the default session.</param>
            <param name="streamFlags">Specifies the status of the flags for the audio stream.</param>
            <param name="sessionControl">The <see cref="T:CSCore.CoreAudioAPI.AudioSessionControl"/> ot the specified <paramref name="audioSessionGuid"/>.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager.GetAudioSessionControl(System.Guid,System.Int32)">
            <summary>
            The GetAudioSessionControl method retrieves an audio session control.
            </summary>
            <param name="audioSessionGuid">If the GUID does not identify a session that has been previously opened, the call opens a new but empty session. If the value is Guid.Empty, the method assigns the stream to the default session.</param>
            <param name="streamFlags">Specifies the status of the flags for the audio stream.</param>
            <returns><see cref="T:CSCore.CoreAudioAPI.AudioSessionControl"/> instance.</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager.GetSimpleAudioVolumeNative(System.Guid,CSCore.Win32.NativeBool,CSCore.CoreAudioAPI.SimpleAudioVolume@)">
            <summary>
            The GetSimpleAudioVolume method retrieves a simple audio volume control.
            </summary>
            <param name="crossProcessSession">Specifies whether the request is for a cross-process session. Set to TRUE if the session is cross-process. Set to FALSE if the session is not cross-process.</param>
            <param name="audioSessionGuid">If the GUID does not identify a session that has been previously opened, the call opens a new but empty session. If the value is Guid.Empty, the method assigns the stream to the default session.</param>
            <param name="audioVolume"><see cref="T:CSCore.CoreAudioAPI.SimpleAudioVolume"/> of the audio volume control object.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager.GetSimpleAudioVolume(System.Guid,System.Boolean)">
            <summary>
            The GetSimpleAudioVolume method retrieves a simple audio volume control.
            </summary>
            <param name="crossProcessSession">Specifies whether the request is for a cross-process session. Set to TRUE if the session is cross-process. Set to FALSE if the session is not cross-process.</param>
            <param name="audioSessionGuid">If the GUID does not identify a session that has been previously opened, the call opens a new but empty session. If the value is Guid.Empty, the method assigns the stream to the default session.</param>
            <returns><see cref="T:CSCore.CoreAudioAPI.SimpleAudioVolume"/> instance.</returns>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionManager2">
            <summary>
            Enables an application to manage submixes for the audio device.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager2.FromMMDevice(CSCore.CoreAudioAPI.MMDevice)">
            <summary>
            Creates a new instance of <see cref="T:CSCore.CoreAudioAPI.AudioSessionManager2"/> based on a <see cref="T:CSCore.CoreAudioAPI.MMDevice"/>.
            </summary>
            <param name="device">Device to use to activate the <see cref="T:CSCore.CoreAudioAPI.AudioSessionManager2"/>.</param>
            <returns><see cref="T:CSCore.CoreAudioAPI.AudioSessionManager2"/> instance for the specified <paramref name="device"/>.</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager2.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.CoreAudioAPI.AudioSessionManager2"/> class.
            </summary>
            <param name="ptr">The native pointer.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager2.GetSessionEnumeratorNative(CSCore.CoreAudioAPI.AudioSessionEnumerator@)">
            <summary>
            The GetSessionEnumerator method gets a pointer to the audio session enumerator object.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager2.GetSessionEnumerator">
            <summary>
            The <see cref="M:CSCore.CoreAudioAPI.AudioSessionManager2.GetSessionEnumerator"/> method gets a pointer to the audio session enumerator object.
            </summary>
            <returns><see cref="T:CSCore.CoreAudioAPI.AudioSessionEnumerator"/> which enumerates audio sessions.</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager2.RegisterSessionNotificationNative(CSCore.CoreAudioAPI.IAudioSessionNotification)">
            <summary>
            The RegisterSessionNotification method registers the application to receive a notification when a session is created.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager2.RegisterSessionNotification(CSCore.CoreAudioAPI.IAudioSessionNotification)">
            <summary>
            The RegisterSessionNotification method registers the application to receive a notification when a session is created.
            IMPORTANT: Make sure to call this method from an MTA-Thread. Also make sure to enumerate all sessions after calling this method. For example with the following code: 
            <code>audioSessionManager2.GetSessionEnumerator().ToArray();</code>
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager2.UnregisterSessionNotificationNative(CSCore.CoreAudioAPI.IAudioSessionNotification)">
            <summary>
            The UnregisterSessionNotification method deletes the registration to receive a notification when a session is created.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager2.UnregisterSessionNotification(CSCore.CoreAudioAPI.IAudioSessionNotification)">
            <summary>
            The UnregisterSessionNotification method deletes the registration to receive a notification when a session is created.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager2.RegisterDuckNotificationNative(System.String,CSCore.CoreAudioAPI.IAudioVolumeDuckNotification)">
            <summary>
            Registers the application to receive ducking notifications.
            </summary>
            <param name="sessionId"> Applications that are playing a media stream and want to provide custom stream attenuation or ducking behavior, pass their own session instance identifier.
            Other applications that do not want to alter their streams but want to get all the ducking notifications must pass NULL.</param>
            <param name="sessionNotification">Instance of any object which implements the <see cref="T:CSCore.CoreAudioAPI.IAudioVolumeDuckNotification"/> and which should receive duck notifications.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager2.RegisterDuckNotification(System.String,CSCore.CoreAudioAPI.IAudioVolumeDuckNotification)">
            <summary>
            Registers the application to receive ducking notifications.
            </summary>
            <param name="sessionId"> Applications that are playing a media stream and want to provide custom stream attenuation or ducking behavior, pass their own session instance identifier.
            Other applications that do not want to alter their streams but want to get all the ducking notifications must pass NULL.</param>
            <param name="sessionNotification">Instance of any object which implements the <see cref="T:CSCore.CoreAudioAPI.IAudioVolumeDuckNotification"/> and which should receive duck notifications.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager2.UnregisterDuckNotificationNative(CSCore.CoreAudioAPI.IAudioVolumeDuckNotification)">
            <summary>
            Deletes the registration to receive ducking notifications.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioSessionManager2.UnregisterDuckNotification(CSCore.CoreAudioAPI.IAudioVolumeDuckNotification)">
            <summary>
            Deletes the registration to receive ducking notifications.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionNotification">
            <summary>
            AudioSessionNotification.
            See http://msdn.microsoft.com/en-us/library/windows/desktop/dd370969(v=vs.85).aspx.
            </summary>
        </member>
        <member name="E:CSCore.CoreAudioAPI.AudioSessionNotification.SessionCreated">
            <summary>
            Notifies the registered processes that the audio session has been created.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionSimpleVolumeChangedEventArgs">
            <summary>
            AudioSessionSimpleVolumeChanged
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionSimpleVolumeChangedEventArgs.NewVolume">
            <summary>
            The new volume level for the audio session. This parameter is a value in the range 0.0 to 1.0, where 0.0 is silence and 1.0 is full volume (no attenuation).
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionSimpleVolumeChangedEventArgs.IsMuted">
            <summary>
            The new muting state. If true, muting is enabled. If false, muting is disabled.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionState">
            <summary>
            AudioSession State.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioSessionState.AudioSessionStateInactive">
            <summary>
            The session has no active audio streams.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioSessionState.AudioSessionStateActive">
            <summary>
            The session has active audio streams.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioSessionState.AudioSessionStateExpired">
            <summary>
            The session is dormant.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioSessionStateChangedEventArgs">
            <summary>
            AudioSessionStateChanged
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioSessionStateChangedEventArgs.NewState">
            <summary>
            The new session state.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioVolumeDuckNotification">
            <summary>
            AudioVolumeDuckNotification
            </summary>
        </member>
        <member name="E:CSCore.CoreAudioAPI.AudioVolumeDuckNotification.VolumeDuckNotification">
            <summary>
            Notification about a pending system ducking event.
            </summary>
        </member>
        <member name="E:CSCore.CoreAudioAPI.AudioVolumeDuckNotification.VolumeUnDuckNotification">
            <summary>
            Notification about a pending system unducking event.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.IMMNotificationClient">
            <summary>
            mmdeviceapi.h line 221
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.IMMNotificationClient.OnDeviceStateChanged(System.String,CSCore.CoreAudioAPI.DeviceState)">
            <summary>
            The OnDeviceStateChanged method indicates that the state of an audio endpoint device has
            changed.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.IMMNotificationClient.OnDeviceAdded(System.String)">
            <summary>
            The OnDeviceAdded method indicates that a new audio endpoint device has been added.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.IMMNotificationClient.OnDeviceRemoved(System.String)">
            <summary>
            The OnDeviceRemoved method indicates that an audio endpoint device has been removed.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.IMMNotificationClient.OnDefaultDeviceChanged(CSCore.CoreAudioAPI.DataFlow,CSCore.CoreAudioAPI.Role,System.String)">
            <summary>
            The OnDefaultDeviceChanged method notifies the client that the default audio endpoint
            device for a particular device role has changed.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.IMMNotificationClient.OnPropertyValueChanged(System.String,CSCore.Win32.PropertyKey)">
            <summary>
            The OnPropertyValueChanged method indicates that the value of a property belonging to an
            audio endpoint device has changed.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="T:CSCore.CoreAudioAPI.SessionCreatedEventArgs">
            <summary>
            SessionCreatedEventArgs
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.SessionCreatedEventArgs.NewSession">
            <summary>
            AudioSessionControl interface of the audio session that was created.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.VolumeDuckNotificationEventArgs">
            <summary>
            VolumeDuckNotificationEventArgs. Fore more see http://msdn.microsoft.com/en-us/library/windows/desktop/dd371010(v=vs.85).aspx.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.VolumeDuckNotificationEventArgs.SessionID">
            <summary>
            A string containing the session instance identifier of the communications session that raises the the auto-ducking event. To get the session instance identifier, call IAudioSessionControl2::GetSessionInstanceIdentifier.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.VolumeDuckNotificationEventArgs.CountCommunicationSessions">
            <summary>
            The number of active communications sessions. If there are n sessions, the sessions are numbered from 0 to –1.
            </summary>
        </member>
        <member name="T:CSCore.DMO.DmoAggregator">
            <summary>
                IWaveAggreator base class for Dmo based streams.
            </summary>
        </member>
        <member name="T:CSCore.IWaveAggregator">
            <summary>
                Defines the base interface for any <see cref="T:CSCore.IWaveSource"/> aggregators.
            </summary>
        </member>
        <member name="P:CSCore.IWaveAggregator.BaseStream">
            <summary>
                Gets the underlying <see cref="T:CSCore.IWaveSource"/>.
            </summary>
        </member>
        <member name="M:CSCore.DMO.DmoAggregator.#ctor(CSCore.IWaveSource)">
            <summary>
                Creates a new instance of the <see cref="T:CSCore.DMO.DmoAggregator"/> class.
            </summary>
            <param name="source">Base source of the <see cref="T:CSCore.DMO.DmoAggregator"/>.</param>
        </member>
        <member name="P:CSCore.DMO.DmoAggregator.Position">
            <summary>
                Gets or sets the position of the stream.
            </summary>
        </member>
        <member name="P:CSCore.DMO.DmoAggregator.Length">
            <summary>
                Gets the length of the stream.
            </summary>
        </member>
        <member name="P:CSCore.DMO.DmoAggregator.BaseStream">
            <summary>
                Gets the <see cref="P:CSCore.DMO.DmoAggregator.BaseStream"/> of the <see cref="T:CSCore.DMO.DmoAggregator"/>.
            </summary>
        </member>
        <member name="T:CSCore.DMO.DmoEnumeratorCategories">
            <summary>
                Contains DMO-Categories for enumerating DMOs.
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoEnumeratorCategories.All">
            <summary>
                All DMOs.
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoEnumeratorCategories.AudioEffect">
            <summary>
                AudioEffects
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoEnumeratorCategories.AudioCaptureEffects">
            <summary>
                AudioCaptureEffects
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoEnumeratorCategories.AudioDecoder">
            <summary>
                Category which includes audio decoder.
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoEnumeratorCategories.AudioEncoder">
            <summary>
                Category which includes audio encoder.
            </summary>
        </member>
        <member name="T:CSCore.DMO.DmoEnumFlags">
            <summary>
                Defines flags that specify search criteria when enumerating Microsoft DirectX Media Objects.
                See http://msdn.microsoft.com/en-us/library/windows/desktop/dd375497(v=vs.85).aspx.
            </summary>
            <remarks>
                A software key enables the developer of a DMO to control who uses the DMO. If a DMO has a software key,
                applications must unlock the DMO to use it. The method for unlocking the DMO depends on the implementation. Consult
                the documentation for the particular DMO.
            </remarks>
        </member>
        <member name="F:CSCore.DMO.DmoEnumFlags.None">
            <summary>
                None
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoEnumFlags.IncludeKeyed">
            <summary>
                The enumeration should include DMOs whose use is restricted by a software key. If this flag is absent, keyed DMOs
                are omitted from the enumeration.
            </summary>
        </member>
        <member name="T:CSCore.DMO.DmoErrorCodes">
            <summary>
                Error codes that are specific to Microsoft DirectX Media Objects
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoErrorCodes.DMO_E_INVALIDSTREAMINDEX">
            <summary>
                Invalid stream index.
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoErrorCodes.DMO_E_INVALIDTYPE">
            <summary>
                Invalid media type.
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoErrorCodes.DMO_E_TYPE_NOT_SET">
            <summary>
                Media type was not set. One or more streams require a media type before this operation can be performed.
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoErrorCodes.DMO_E_NOTACCEPTING">
            <summary>
                Data cannot be accepted on this stream. You might need to process more output data; see IMediaObject::ProcessInput
                (-> http://msdn.microsoft.com/en-us/library/windows/desktop/dd406959(v=vs.85).aspx).
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoErrorCodes.DMO_E_TYPE_NOT_ACCEPTED">
            <summary>
                Media type was not accepted.
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoErrorCodes.DMO_E_NO_MORE_ITEMS">
            <summary>
                Media-type index is out of range.
            </summary>
        </member>
        <member name="T:CSCore.DMO.DmoInputSizeInfo">
            <summary>
                DmoInputSizeInfo
            </summary>
        </member>
        <member name="T:CSCore.DMO.DmoSizeInfo">
            <summary>
                DmoSizeInfo
            </summary>
        </member>
        <member name="M:CSCore.DMO.DmoSizeInfo.#ctor(System.Int32,System.Int32)">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="P:CSCore.DMO.DmoSizeInfo.MinSize">
            <summary>
                Minimum size of an input buffer for this stream, in bytes.
            </summary>
        </member>
        <member name="P:CSCore.DMO.DmoSizeInfo.Alignment">
            <summary>
                The required buffer alignment, in bytes. If the input stream has no alignment requirement, the value is 1.
            </summary>
        </member>
        <member name="M:CSCore.DMO.DmoInputSizeInfo.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="P:CSCore.DMO.DmoInputSizeInfo.MaxLookahead">
            <summary>
                The maximum amount of data that the DMO will hold for a lookahead, in bytes. If the DMO does not perform a
                lookahead on the stream, the value is zero.
            </summary>
        </member>
        <member name="T:CSCore.DMO.DmoInputStreamInfoFlags">
            <summary>
                The DmoInputStreamInfoFlags enumeration defines flags that describe an input stream.
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoInputStreamInfoFlags.None">
            <summary>
                None.
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoInputStreamInfoFlags.WholeSamples">
            <summary>
                The stream requires whole samples. Samples must not span multiple buffers, and buffers must not contain partial
                samples.
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoInputStreamInfoFlags.SingleSamplePerBuffer">
            <summary>
                Each buffer must contain exactly one sample.
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoInputStreamInfoFlags.FixedSampleSize">
            <summary>
                All the samples in this stream must be the same size
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoInputStreamInfoFlags.HoldBuffers">
            <summary>
                The DMO performs lookahead on the incoming data, and may hold multiple input buffers for this stream.
            </summary>
        </member>
        <member name="T:CSCore.DMO.DmoOutputDataBuffer">
            <summary>
                Represents a DmoOutputDataBuffer. Fore more details see
                http://msdn.microsoft.com/en-us/library/windows/desktop/dd375507(v=vs.85).aspx.
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoOutputDataBuffer.Buffer">
            <summary>
                Pointer to the IMediaBuffer interface of a buffer allocated by the application.
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoOutputDataBuffer.Status">
            <summary>
                Status flags. After processing output, the DMO sets this member to a bitwise combination
                of zero or more DMO_OUTPUT_DATA_BUFFER_FLAGS flags.
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoOutputDataBuffer.Timestamp">
            <summary>
                Time stamp that specifies the start time of the data in the buffer. If the buffer has a
                valid time stamp, the DMO sets this member and also sets the
                DMO_OUTPUT_DATA_BUFFERF_TIME flag in the dwStatus member. Otherwise, ignore this member.
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoOutputDataBuffer.TimeLength">
            <summary>
                Reference time specifying the length of the data in the buffer. If the DMO sets this
                member to a valid value, it also sets the DMO_OUTPUT_DATA_BUFFERF_TIMELENGTH flag in the
                dwStatus member. Otherwise, ignore this member.
            </summary>
        </member>
        <member name="M:CSCore.DMO.DmoOutputDataBuffer.#ctor(System.Int32)">
            <summary>
                Creates a new DmoOutputDataBuffer.
            </summary>
            <param name="bufferSize">The maxlength (in bytes) of the internally used MediaBuffer.</param>
        </member>
        <member name="M:CSCore.DMO.DmoOutputDataBuffer.Read(System.Byte[],System.Int32)">
            <summary>
                Reads a sequence of bytes from the MediaBuffer.
            </summary>
            <param name="buffer">Array of bytes to store the read bytes in.</param>
            <param name="offset">
                Zero-based byte offset in the specified buffer at which to begin storing the data read from the
                buffer.
            </param>
        </member>
        <member name="M:CSCore.DMO.DmoOutputDataBuffer.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads a sequence of bytes from the MediaBuffer.
            </summary>
            <param name="buffer">Array of bytes to store the read bytes in.</param>
            <param name="offset">
                Zero-based byte offset in the specified buffer at which to begin storing the data read from the
                buffer.
            </param>
            <param name="count">The maximum number of bytes to read from the buffer.</param>
        </member>
        <member name="M:CSCore.DMO.DmoOutputDataBuffer.Reset">
            <summary>
                Resets the Buffer. Sets the length of the MediaBuffer (see <see cref="T:CSCore.DMO.MediaBuffer"/>) to zero and sets the
                <see cref="F:CSCore.DMO.DmoOutputDataBuffer.Status"/> to <see cref="F:CSCore.DMO.OutputDataBufferFlags.None"/>.
            </summary>
        </member>
        <member name="M:CSCore.DMO.DmoOutputDataBuffer.Dispose">
            <summary>
                Disposes the internally used MediaBuffer.
            </summary>
        </member>
        <member name="P:CSCore.DMO.DmoOutputDataBuffer.Length">
            <summary>
                Gets the length of the MediaBuffer. See <see cref="P:CSCore.DMO.MediaBuffer.Length"/>.
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoOutputStreamInfoFlags.None">
            <summary>
                None
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoOutputStreamInfoFlags.WholeSamples">
            <summary>
                The stream contains whole samples. Samples do not span multiple buffers, and buffers do not contain partial
                samples.
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoOutputStreamInfoFlags.SingleSamplePerBuffer">
            <summary>
                Each buffer contains exactly one sample.
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoOutputStreamInfoFlags.FixedSampleSize">
            <summary>
                All the samples in this stream are the same size.
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoOutputStreamInfoFlags.Discardable">
            <summary>
                The stream is discardable. Within calls to IMediaObject::ProcessOutput, the DMO can discard data for this stream
                without copying it to an output buffer.
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoOutputStreamInfoFlags.Optional">
            <summary>
                The stream is optional. An optional stream is discardable. Also, the application can ignore this stream entirely;
                it does not have to set the media type for the stream. Optional streams generally contain additional information,
                or data not needed by all applications.
            </summary>
        </member>
        <member name="T:CSCore.DMO.DmoPartialMediaType">
            <summary>
                Describes a media type used by a Microsoft DirectX Media Object.
                See http://msdn.microsoft.com/en-us/library/windows/desktop/dd375510(v=vs.85).aspx.
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoPartialMediaType.Type">
            <summary>
                Major type GUID. Use Guid.Empty to match any major type.
            </summary>
        </member>
        <member name="F:CSCore.DMO.DmoPartialMediaType.SubType">
            <summary>
                Subtype GUID. Use Guid.Empty to match any subtype.
            </summary>
        </member>
        <member name="T:CSCore.DMO.Effects.DirectSoundFxBase`1">
            <summary>
                Base class for any DirectSoundEffect.
            </summary>
        </member>
        <member name="M:CSCore.DMO.Effects.DirectSoundFxBase`1.#ctor(System.IntPtr)">
            <summary>
                Default ctor for a ComObject.
            </summary>
            <param name="ptr">Pointer of a DirectSoundEffect interface.</param>
        </member>
        <member name="M:CSCore.DMO.Effects.DirectSoundFxBase`1.SetAllParametersNative(`0)">
            <summary>
                The SetAllParameters method sets the effects parameters.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.DMO.Effects.DirectSoundFxBase`1.GetAllParametersNative(`0@)">
            <summary>
                The GetAllParameters method retrieves the effects parameters.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="P:CSCore.DMO.Effects.DirectSoundFxBase`1.Parameters">
            <summary>
                Gets or sets the Parameters of the Effect.
            </summary>
        </member>
        <member name="P:CSCore.DMO.Effects.DirectSoundFxBase`1.InterfaceName">
            <summary>
                Gets the name of the COM interface. Used for generating error messages.
            </summary>
        </member>
        <member name="T:CSCore.DMO.Effects.DirectSoundFXChorus">
            <summary>
                The IDirectSoundFXChorus interface is used to set and retrieve effect parameters.
            </summary>
        </member>
        <member name="M:CSCore.DMO.Effects.DirectSoundFXChorus.#ctor(System.IntPtr)">
            <summary>
                Creates a DirectSoundFXChorus wrapper based on a pointer to a IDirectSoundFXChorus cominterface.
            </summary>
            <param name="ptr">Pointer of a DirectSoundFXChorus interface.</param>
        </member>
        <member name="P:CSCore.DMO.Effects.DirectSoundFXChorus.InterfaceName">
            <summary>
                Interface name used for generating DmoExceptions.
            </summary>
        </member>
        <member name="T:CSCore.DMO.Effects.DirectSoundFXCompressor">
            <summary>
                The DirectSoundFXCompressor interface is used to set and retrieve effect parameters.
            </summary>
        </member>
        <member name="M:CSCore.DMO.Effects.DirectSoundFXCompressor.#ctor(System.IntPtr)">
            <summary>
                Creates a DirectSoundFXCompressor wrapper based on a pointer to a IDirectSoundFXCompressor cominterface.
            </summary>
            <param name="ptr">Pointer of a DirectSoundFXCompressor interface.</param>
        </member>
        <member name="P:CSCore.DMO.Effects.DirectSoundFXCompressor.InterfaceName">
            <summary>
                Interface name used for generating DmoExceptions.
            </summary>
        </member>
        <member name="T:CSCore.DMO.Effects.DirectSoundFXDistortion">
            <summary>
                The DirectSoundFXDistortion interface is used to set and retrieve effect parameters.
            </summary>
        </member>
        <member name="M:CSCore.DMO.Effects.DirectSoundFXDistortion.#ctor(System.IntPtr)">
            <summary>
                Creates a DirectSoundFXDistortion wrapper based on a pointer to a IDirectSoundFXDistortion cominterface.
            </summary>
            <param name="ptr">Pointer of a DirectSoundFXDistortion interface.</param>
        </member>
        <member name="P:CSCore.DMO.Effects.DirectSoundFXDistortion.InterfaceName">
            <summary>
                Interface name used for generating DmoExceptions.
            </summary>
        </member>
        <member name="T:CSCore.DMO.Effects.DirectSoundFXEcho">
            <summary>
                The IDirectSoundFXEcho interface is used to set and retrieve effect parameters.
            </summary>
        </member>
        <member name="M:CSCore.DMO.Effects.DirectSoundFXEcho.#ctor(System.IntPtr)">
            <summary>
                Creates a DirectSoundFXEcho wrapper based on a pointer to a IDirectSoundFXEcho cominterface.
            </summary>
            <param name="ptr">Pointer of a DirectSoundFXEcho interface.</param>
        </member>
        <member name="P:CSCore.DMO.Effects.DirectSoundFXEcho.InterfaceName">
            <summary>
                Interface name used for generating DmoExceptions.
            </summary>
        </member>
        <member name="T:CSCore.DMO.Effects.DirectSoundFXFlanger">
            <summary>
                The DirectSoundFXFlanger interface is used to set and retrieve effect parameters.
            </summary>
        </member>
        <member name="M:CSCore.DMO.Effects.DirectSoundFXFlanger.#ctor(System.IntPtr)">
            <summary>
                Creates a DirectSoundFXFlanger wrapper based on a pointer to a IDirectSoundFXFlanger cominterface.
            </summary>
            <param name="ptr">Pointer of a DirectSoundFXFlanger interface.</param>
        </member>
        <member name="P:CSCore.DMO.Effects.DirectSoundFXFlanger.InterfaceName">
            <summary>
                Interface name used for generating DmoExceptions.
            </summary>
        </member>
        <member name="T:CSCore.DMO.Effects.DirectSoundFXGargle">
            <summary>
                The IDirectSoundFXChorus interface is used to set and retrieve effect parameters.
            </summary>
        </member>
        <member name="M:CSCore.DMO.Effects.DirectSoundFXGargle.#ctor(System.IntPtr)">
            <summary>
                Creates a DirectSoundFXGargle wrapper based on a pointer to a IDirectSoundFXGargle cominterface.
            </summary>
            <param name="ptr">Pointer of a DirectSoundFXGargle interface.</param>
        </member>
        <member name="P:CSCore.DMO.Effects.DirectSoundFXGargle.InterfaceName">
            <summary>
                Interface name used for generating DmoExceptions.
            </summary>
        </member>
        <member name="T:CSCore.DMO.Effects.DirectSoundFXWavesReverb">
            <summary>
                The DirectSoundFXReverb interface is used to set and retrieve effect parameters.
            </summary>
        </member>
        <member name="M:CSCore.DMO.Effects.DirectSoundFXWavesReverb.#ctor(System.IntPtr)">
            <summary>
                Creates a DirectSoundFXWavesReverb wrapper based on a pointer to a IDirectSoundFXWavesReverb cominterface.
            </summary>
            <param name="ptr">Pointer of a DirectSoundFXWavesReverb interface.</param>
        </member>
        <member name="P:CSCore.DMO.Effects.DirectSoundFXWavesReverb.InterfaceName">
            <summary>
                Interface name used for generating DmoExceptions.
            </summary>
        </member>
        <member name="T:CSCore.DMO.EnumDmo">
            <summary>
                Provides methods for enumerating Microsoft DirectX Media Objects.
            </summary>
        </member>
        <member name="M:CSCore.DMO.EnumDmo.#ctor(System.IntPtr)">
            <summary>
                Creates a new DMO Enumerator based on its pointer.
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:CSCore.DMO.EnumDmo.EnumerateDMOs(System.Guid,CSCore.DMO.DmoEnumFlags,CSCore.DMO.DmoPartialMediaType[],CSCore.DMO.DmoPartialMediaType[])">
            <summary>
                Enumerates DMOs listed in the registry. The caller can search by category, media type, or both.
            </summary>
            <param name="category">
                GUID that specifies which category of DMO to search. Use Guid.Empty to search every category.
                See <see cref="T:CSCore.DMO.DmoEnumeratorCategories"/> for a list of category guids.
            </param>
            <param name="flags">Flags that specify search criteria.</param>
            <param name="inputTypes">Array of input-Mediatypes.</param>
            <param name="outputTypes">Array of output-Mediatypes.</param>
            <returns>EnumDMO</returns>
        </member>
        <member name="M:CSCore.DMO.EnumDmo.EnumerateDMOs(System.Guid,CSCore.DMO.DmoEnumFlags)">
            <summary>
                Enumerates DMOs listed in the registry.
            </summary>
            <param name="category">
                GUID that specifies which category of DMO to search. Use Guid.Empty to search every category.
                See <see cref="T:CSCore.DMO.DmoEnumeratorCategories"/> for a list of category guids.
            </param>
            <param name="flags">Flags that specify search criteria.</param>
        </member>
        <member name="M:CSCore.DMO.EnumDmo.NextNative(System.Int32,System.Guid[]@,System.String[]@,System.Int32@)">
            <summary>
                Retrieves a specified number of items in the enumeration sequence.
            </summary>
            <param name="itemsToFetch">Number of items to retrieve.</param>
            <param name="clsids">Array that is filled with the CLSIDs of the enumerated DMOs.</param>
            <param name="names">Array that is filled with the friendly names of the enumerated DMOs.</param>
            <param name="itemsFetched">Actual number of items retrieved.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.DMO.EnumDmo.Next(System.Int32)">
            <summary>
                Retrieves a specified number of items in the enumeration sequence.
            </summary>
            <param name="itemsToFetch">Number of items to retrieve.</param>
            <returns>Array of enumerated DMOs.</returns>
        </member>
        <member name="M:CSCore.DMO.EnumDmo.SkipNative(System.Int32)">
            <summary>
                Skips over a specified number of items in the enumeration sequence.
            </summary>
            <param name="itemsToSkip">Number of items to skip.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.DMO.EnumDmo.Skip(System.Int32)">
            <summary>
                Skips over a specified number of items in the enumeration sequence.
            </summary>
            <param name="itemsToSkip">Number of items to skip.</param>
        </member>
        <member name="M:CSCore.DMO.EnumDmo.ResetNative">
            <summary>
                Resets the enumeration sequence to the beginning.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.DMO.EnumDmo.Reset">
            <summary>
                Resets the enumeration sequence to the beginning.
            </summary>
        </member>
        <member name="M:CSCore.DMO.EnumDmo.CloneNative(System.IntPtr@)">
            <summary>
                This method is not implemented.
            </summary>
        </member>
        <member name="M:CSCore.DMO.EnumDmo.Clone">
            <summary>
                This method is not implemented.
            </summary>
        </member>
        <member name="T:CSCore.DMO.InputDataBufferFlags">
            <summary>
                Defines flags that describe an input buffer.
                See http://msdn.microsoft.com/en-us/library/windows/desktop/dd375501(v=vs.85).aspx
            </summary>
        </member>
        <member name="F:CSCore.DMO.InputDataBufferFlags.None">
            <summary>
                None
            </summary>
        </member>
        <member name="F:CSCore.DMO.InputDataBufferFlags.SyncPoint">
            <summary>
                The beginning of the data is a synchronization point.
            </summary>
        </member>
        <member name="F:CSCore.DMO.InputDataBufferFlags.Time">
            <summary>
                The buffer's time stamp is valid. The buffer's indicated time length is valid.
            </summary>
        </member>
        <member name="F:CSCore.DMO.InputDataBufferFlags.TimeLength">
            <summary>
                The buffer's indicated time length is valid.
            </summary>
        </member>
        <member name="T:CSCore.DMO.InputStatusFlags">
            <summary>
                InputStatusFlags.
                See also: http://msdn.microsoft.com/en-us/library/windows/desktop/dd406950(v=vs.85).aspx
            </summary>
        </member>
        <member name="F:CSCore.DMO.InputStatusFlags.None">
            <summary>
                None
            </summary>
        </member>
        <member name="F:CSCore.DMO.InputStatusFlags.AcceptData">
            <summary>
                The stream accepts data.
            </summary>
        </member>
        <member name="T:CSCore.DMO.InputStreamInfoFlags">
            <summary>
                Defines flags that describe an input stream.
                See http://msdn.microsoft.com/en-us/library/windows/desktop/dd375502(v=vs.85).aspx.
            </summary>
        </member>
        <member name="F:CSCore.DMO.InputStreamInfoFlags.None">
            <summary>
                None
            </summary>
        </member>
        <member name="F:CSCore.DMO.InputStreamInfoFlags.WholeSamples">
            <summary>
                The stream contains whole samples. Samples do not span multiple buffers, and buffers do
                not contain partial samples.
            </summary>
        </member>
        <member name="F:CSCore.DMO.InputStreamInfoFlags.SingleSamplePerBuffer">
            <summary>
                Each buffer contains exactly one sample.
            </summary>
        </member>
        <member name="F:CSCore.DMO.InputStreamInfoFlags.FixedSampleSize">
            <summary>
                The stream is discardable. Within calls to IMediaObject::ProcessOutput, the DMO can
                discard data for this stream without copying it to an output buffer.
            </summary>
        </member>
        <member name="F:CSCore.DMO.InputStreamInfoFlags.HoldsBuffers">
            <summary>
                The DMO performs lookahead on the incoming data, and may hold multiple input buffers for
                this stream.
            </summary>
        </member>
        <member name="T:CSCore.DMO.OutputDataBufferFlags">
            <summary>
                Defines flags that describe an output buffer.
                See http://msdn.microsoft.com/en-us/library/windows/desktop/dd375508(v=vs.85).aspx.
            </summary>
        </member>
        <member name="F:CSCore.DMO.OutputDataBufferFlags.None">
            <summary>
                None
            </summary>
        </member>
        <member name="F:CSCore.DMO.OutputDataBufferFlags.SyncPoint">
            <summary>
                The beginning of the data is a synchronization point. A synchronization point is a
                random access point. For encoded video, this a sample that can be used as a decoding
                start point (key frame). For uncompressed audio or video, every sample is a
                synchronization point.
            </summary>
        </member>
        <member name="F:CSCore.DMO.OutputDataBufferFlags.Time">
            <summary>
                The buffer's time stamp is valid. The buffer's indicated time length is valid.
            </summary>
        </member>
        <member name="F:CSCore.DMO.OutputDataBufferFlags.TimeLength">
            <summary>
                The buffer's indicated time length is valid.
            </summary>
        </member>
        <member name="F:CSCore.DMO.OutputDataBufferFlags.Incomplete">
            <summary>
                There is still input data available for processing, but the output buffer is full.
            </summary>
        </member>
        <member name="T:CSCore.DMO.OutputStreamInfoFlags">
            <summary>
                Flags that describe an output stream.
                See http://msdn.microsoft.com/en-us/library/windows/desktop/dd375509(v=vs.85).aspx.
            </summary>
        </member>
        <member name="F:CSCore.DMO.OutputStreamInfoFlags.None">
            <summary>
                None
            </summary>
        </member>
        <member name="F:CSCore.DMO.OutputStreamInfoFlags.WholeSamples">
            <summary>
                The stream contains whole samples. Samples do not span multiple buffers, and buffers do
                not contain partial samples.
            </summary>
        </member>
        <member name="F:CSCore.DMO.OutputStreamInfoFlags.SingleSamplePerBuffer">
            <summary>
                Each buffer contains exactly one sample.
            </summary>
        </member>
        <member name="F:CSCore.DMO.OutputStreamInfoFlags.FixedSampleSize">
            <summary>
                All the samples in this stream are the same size.
            </summary>
        </member>
        <member name="F:CSCore.DMO.OutputStreamInfoFlags.Discardable">
            <summary>
                The stream is discardable. Within calls to IMediaObject::ProcessOutput, the DMO can
                discard data for this stream without copying it to an output buffer.
            </summary>
        </member>
        <member name="F:CSCore.DMO.OutputStreamInfoFlags.Optional">
            <summary>
                The stream is optional. An optional stream is discardable. Also, the application can
                ignore this stream entirely; it does not have to set the media type for the stream.
                Optional streams generally contain additional information, or data not needed by all
                applications.
            </summary>
        </member>
        <member name="T:CSCore.DMO.ProcessOutputFlags">
            <summary>
                Defines flags that specify output processing requests.
                See http://msdn.microsoft.com/en-us/library/windows/desktop/dd375511(v=vs.85).aspx
            </summary>
        </member>
        <member name="F:CSCore.DMO.ProcessOutputFlags.None">
            <summary>
                None
            </summary>
        </member>
        <member name="F:CSCore.DMO.ProcessOutputFlags.DiscardWhenNoBuffer">
            <summary>
                Discard the output when the pointer to the output buffer is NULL.
            </summary>
        </member>
        <member name="T:CSCore.DMO.SetTypeFlags">
            <summary>
                Defines flags for setting the media type on a stream.
                See http://msdn.microsoft.com/en-us/library/windows/desktop/dd375514(v=vs.85).aspx.
            </summary>
        </member>
        <member name="F:CSCore.DMO.SetTypeFlags.None">
            <summary>
                None
            </summary>
        </member>
        <member name="F:CSCore.DMO.SetTypeFlags.TestOnly">
            <summary>
                Test the media type but do not set it.
            </summary>
        </member>
        <member name="F:CSCore.DMO.SetTypeFlags.Clear">
            <summary>
                Clear the media type that was set for the stream.
            </summary>
        </member>
        <member name="T:CSCore.DSP.ChannelMatrixElement">
            <summary>
            Represents an element inside of a <see cref="T:CSCore.DSP.ChannelMatrix"/>.
            </summary>
        </member>
        <member name="M:CSCore.DSP.ChannelMatrixElement.#ctor(CSCore.ChannelMask,CSCore.ChannelMask)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.DSP.ChannelMatrixElement"/> class.
            </summary>
            <param name="inputChannel">The input channel.</param>
            <param name="outputChannel">The output channel.</param>
        </member>
        <member name="P:CSCore.DSP.ChannelMatrixElement.InputChannel">
            <summary>
            Gets the assigned input channel of the <see cref="T:CSCore.DSP.ChannelMatrixElement"/>.
            </summary>
        </member>
        <member name="P:CSCore.DSP.ChannelMatrixElement.OutputChannel">
            <summary>
            Gets the assigned output channel of the <see cref="T:CSCore.DSP.ChannelMatrixElement"/>.        
            </summary>
        </member>
        <member name="P:CSCore.DSP.ChannelMatrixElement.Value">
            <summary>
            Gets or sets the coefficient in the range from 0.0f to 1.0f.
            </summary>
        </member>
        <member name="T:CSCore.DSP.FastFourierTransformation">
            <summary>
            Provides an Fast Fourier Transform implementation including a few utils method which are commonly used in combination with FFT (e.g. the hamming window function).
            </summary>
        </member>
        <member name="M:CSCore.DSP.FastFourierTransformation.GetIntensity(CSCore.Utils.Complex)">
            <summary>
            Obsolete. Use the <see cref="P:CSCore.Utils.Complex.Value"/> property instead.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:CSCore.DSP.FastFourierTransformation.HammingWindow(System.Int32,System.Int32)">
            <summary>
            Implementation of the Hamming Window using double-precision floating-point numbers.
            </summary>
            <param name="n">Current index of the input signal.</param>
            <param name="N">Window width.</param>
            <returns>Hamming window multiplier.</returns>
        </member>
        <member name="M:CSCore.DSP.FastFourierTransformation.HammingWindowF(System.Int32,System.Int32)">
            <summary>
            Hamming window implementation using single-precision floating-point numbers.
            </summary>
            <param name="n">Current index of the input signal.</param>
            <param name="N">Window width.</param>
            <returns>Hamming Window multiplier.</returns>
        </member>
        <member name="M:CSCore.DSP.FastFourierTransformation.Fft(CSCore.Utils.Complex[],System.Int32,CSCore.DSP.FftMode)">
            <summary>
            Computes an Fast Fourier Transform.
            </summary>
            <param name="data">Array of complex numbers. This array provides the input data and is used to store the result of the FFT.</param>
            <param name="exponent">The exponent n.</param>
            <param name="mode">The <see cref="T:CSCore.DSP.FftMode"/> to use. Use <see cref="F:CSCore.DSP.FftMode.Forward"/> as the default value.</param>
        </member>
        <member name="M:CSCore.DSP.FastFourierTransformation.FFT1(CSCore.Utils.Complex[],System.Int32,CSCore.DSP.FftMode)">
            <summary>
            Obsolete. Use the <see cref="M:CSCore.DSP.FastFourierTransformation.Fft(CSCore.Utils.Complex[],System.Int32,CSCore.DSP.FftMode)"/> method instead.
            </summary>
        </member>
        <member name="T:CSCore.DSP.FftProvider">
            <summary>
            Provides FFT calculations.
            </summary>
        </member>
        <member name="M:CSCore.DSP.FftProvider.#ctor(System.Int32,CSCore.DSP.FftSize)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.DSP.FftProvider"/> class.
            </summary>
            <param name="channels">Number of channels of the input data.</param>
            <param name="fftSize">The number of bands to use.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="channels"/> is less than zero.</exception>
        </member>
        <member name="M:CSCore.DSP.FftProvider.Add(System.Single,System.Single)">
            <summary>
            Adds a <paramref name="left"/> and a <paramref name="right"/> sample to the <see cref="T:CSCore.DSP.FftProvider"/>. The <paramref name="left"/> and the <paramref name="right"/> sample will be merged together.
            </summary>
            <param name="left">The sample of the left channel.</param>
            <param name="right">The sample of the right channel.</param>
        </member>
        <member name="M:CSCore.DSP.FftProvider.Add(System.Single[],System.Int32)">
            <summary>
            Adds multiple samples to the <see cref="T:CSCore.DSP.FftProvider"/>. 
            </summary>
            <param name="samples">Float Array which contains samples.</param>
            <param name="count">Number of samples to add to the <see cref="T:CSCore.DSP.FftProvider"/>.</param>
        </member>
        <member name="M:CSCore.DSP.FftProvider.GetFftData(CSCore.Utils.Complex[])">
            <summary>
            Calculates the Fast Fourier Transform and stores the result in the <paramref name="fftResultBuffer"/>.
            </summary>
            <param name="fftResultBuffer">The output buffer.</param>
            <returns>Returns a value which indicates whether the Fast Fourier Transform got calculated. If there have not been added any new samples since the last transform, the FFT won't be calculated. True means that the Fast Fourier Transform got calculated.</returns>
        </member>
        <member name="M:CSCore.DSP.FftProvider.GetFftData(System.Single[])">
            <summary>
            Calculates the Fast Fourier Transform and stores the result in the <paramref name="fftResultBuffer"/>.
            </summary>
            <param name="fftResultBuffer">The output buffer.</param>
            <returns>Returns a value which indicates whether the Fast Fourier Transform got calculated. If there have not been added any new samples since the last transform, the FFT won't be calculated. True means that the Fast Fourier Transform got calculated.</returns>
        </member>
        <member name="P:CSCore.DSP.FftProvider.FftSize">
            <summary>
            Gets the specified fft size.
            </summary>
        </member>
        <member name="T:CSCore.DSP.FftMode">
            <summary>
            Fft mode.
            </summary>
        </member>
        <member name="F:CSCore.DSP.FftMode.Forward">
            <summary>
            Forward
            </summary>
        </member>
        <member name="F:CSCore.DSP.FftMode.Backward">
            <summary>
            Backward
            </summary>
        </member>
        <member name="T:CSCore.DSP.FftSize">
            <summary>
                Defines FFT data size constants that can be used for FFT calculations.
                Note that only the half of the specified size can be used for visualizations.
            </summary>
        </member>
        <member name="F:CSCore.DSP.FftSize.Fft64">
            <summary>
                64 bands.
            </summary>
        </member>
        <member name="F:CSCore.DSP.FftSize.Fft128">
            <summary>
                128 bands.
            </summary>
        </member>
        <member name="F:CSCore.DSP.FftSize.Fft256">
            <summary>
                256 bands.
            </summary>
        </member>
        <member name="F:CSCore.DSP.FftSize.Fft512">
            <summary>
                512 bands.
            </summary>
        </member>
        <member name="F:CSCore.DSP.FftSize.Fft1024">
            <summary>
                1024 bands.
            </summary>
        </member>
        <member name="F:CSCore.DSP.FftSize.Fft2048">
            <summary>
                2014 bands.
            </summary>
        </member>
        <member name="F:CSCore.DSP.FftSize.Fft4096">
            <summary>
                4096 bands.
            </summary>
        </member>
        <member name="F:CSCore.DSP.FftSize.Fft8192">
            <summary>
                8192 bands.
            </summary>
        </member>
        <member name="F:CSCore.DSP.FftSize.Fft16384">
            <summary>
                16384 bands.
            </summary>
        </member>
        <member name="T:CSCore.FluentExtensions">
            <summary>
                Provides a basic fluent API for creating a source chain.
            </summary>
        </member>
        <member name="M:CSCore.FluentExtensions.AppendSource``2(``0,System.Func{``0,``1})">
            <summary>
                Appends a source to an already existing source.
            </summary>
            <typeparam name="TInput">Input</typeparam>
            <typeparam name="TResult">Output</typeparam>
            <param name="input">Already existing source.</param>
            <param name="func">Function which appends the new source to the already existing source.</param>
            <returns>The return value of the <paramref name="func"/> delegate.</returns>
        </member>
        <member name="M:CSCore.FluentExtensions.AppendSource``2(``0,System.Func{``0,``1},``1@)">
            <summary>
                Appends a source to an already existing source.
            </summary>
            <typeparam name="TInput">Input</typeparam>
            <typeparam name="TResult">Output</typeparam>
            <param name="input">Already existing source.</param>
            <param name="func">Function which appends the new source to the already existing source.</param>
            <param name="outputSource">Receives the return value.</param>
            <returns>The return value of the <paramref name="func"/> delegate.</returns>
        </member>
        <member name="M:CSCore.FluentExtensions.ChangeSampleRate(CSCore.IWaveSource,System.Int32)">
            <summary>
                Changes the SampleRate of an already existing wave source.
            </summary>
            <param name="input">Already existing wave source whose sample rate has to be changed.</param>
            <param name="destinationSampleRate">Destination sample rate.</param>
            <returns>Wave source with the specified <paramref name="destinationSampleRate"/>.</returns>
        </member>
        <member name="M:CSCore.FluentExtensions.ChangeSampleRate(CSCore.ISampleSource,System.Int32)">
            <summary>
                Changes the SampleRate of an already existing sample source. Note: This extension has to convert the <paramref name="input"/> to a <see cref="T:CSCore.IWaveSource"/> and back to a <see cref="T:CSCore.ISampleSource"/>.
            </summary>
            <param name="input">Already existing sample source whose sample rate has to be changed.</param>
            <param name="destinationSampleRate">Destination sample rate.</param>
            <returns>Sample source with the specified <paramref name="destinationSampleRate"/>.</returns>
        </member>
        <member name="M:CSCore.FluentExtensions.ToStereo(CSCore.IWaveSource)">
            <summary>
            Converts the specified wave source with n channels to a wave source with two channels.
            Note: If the <paramref name="input"/> has only one channel, the <see cref="M:CSCore.FluentExtensions.ToStereo(CSCore.IWaveSource)"/> extension has to convert the <paramref name="input"/> to a <see cref="T:CSCore.ISampleSource"/> and back to a <see cref="T:CSCore.IWaveSource"/>.        
            </summary>
            <param name="input">Already existing wave source.</param>
            <returns><see cref="T:CSCore.IWaveSource"/> instance with two channels.</returns>
        </member>
        <member name="M:CSCore.FluentExtensions.ToStereo(CSCore.ISampleSource)">
            <summary>
            Converts the specified sample source with n channels to a wave source with two channels.
            Note: If the <paramref name="input"/> has more than two channels, the <see cref="M:CSCore.FluentExtensions.ToStereo(CSCore.ISampleSource)"/> extension has to convert the <paramref name="input"/> to a <see cref="T:CSCore.IWaveSource"/> and back to a <see cref="T:CSCore.ISampleSource"/>.
            </summary>
            <param name="input">Already existing sample source.</param>
            <returns><see cref="T:CSCore.ISampleSource"/> instance with two channels.</returns>
        </member>
        <member name="M:CSCore.FluentExtensions.ToMono(CSCore.IWaveSource)">
            <summary>
            Converts the specified wave source with n channels to a wave source with one channel.
            Note: If the <paramref name="input"/> has two channels, the <see cref="M:CSCore.FluentExtensions.ToMono(CSCore.IWaveSource)"/> extension has to convert the <paramref name="input"/> to a <see cref="T:CSCore.ISampleSource"/> and back to a <see cref="T:CSCore.IWaveSource"/>.        
            </summary>
            <param name="input">Already existing wave source.</param>
            <returns><see cref="T:CSCore.IWaveSource"/> instance with one channel.</returns>
        </member>
        <member name="M:CSCore.FluentExtensions.ToMono(CSCore.ISampleSource)">
            <summary>
            Converts the specified sample source with n channels to a wave source with one channel.
            Note: If the <paramref name="input"/> has only one channel, the <see cref="M:CSCore.FluentExtensions.ToMono(CSCore.ISampleSource)"/> extension has to convert the <paramref name="input"/> to a <see cref="T:CSCore.IWaveSource"/> and back to a <see cref="T:CSCore.ISampleSource"/>.
            </summary>
            <param name="input">Already existing sample source.</param>
            <returns><see cref="T:CSCore.ISampleSource"/> instance with one channels</returns>
        </member>
        <member name="F:CSCore.MediaFoundation.CommonAudioDecoderGuids.DolbyDigitalPlusDecoder">
            <summary>
            CLSID_CMSDDPlusDecMFT
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.CommonAudioDecoderGuids.MpegAudioDecoder">
            <summary>
            CLSID_CMSMPEGAudDecMFT
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.CommonAudioDecoderGuids.AacDecoder">
            <summary>
            CMSAACDecMFT
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.CommonAudioDecoderGuids.WmAudioDecoder">
            <summary>
            CWMADecMediaObject
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.CommonAudioDecoderGuids.ALawDecoder">
            <summary>
            CALawDecMediaObject
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.CommonAudioDecoderGuids.GsmDecoder">
            <summary>
            ACM Wrapper
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.CommonAudioDecoderGuids.WmaProDecoder">
            <summary>
            CWMAudioSpdTxDMO
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.CommonAudioDecoderGuids.WmSpeechDecoder">
            <summary>
            CWMSPDecMediaObject
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.CommonAudioDecoderGuids.G711Decoder">
            <summary>
            Wrapper
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.CommonAudioDecoderGuids.ImaAdPcmDecoder">
            <summary>
            IMA ADPCM ACM Wrapper
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.CommonAudioDecoderGuids.Mp3Decoder">
            <summary>
            CMP3DecMediaObject
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.CommonAudioDecoderGuids.AdPcmDecoder">
            <summary>
            ADPCM ACM Wrapper
            </summary>
        </member>
        <member name="T:CSCore.MediaFoundation.MediaEventType">
            <summary>
            MediaEventType
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEUnknown">
            <summary>
            Unknown event type.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEError">
            <summary>
            Signals a serious error.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEExtendedType">
            <summary>
            Custom event type.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MENonFatalError">
            <summary>
            A non-fatal error occurred during streaming.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESessionUnknown">
            <summary>
            Session Unknown
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESessionTopologySet">
            <summary>
            Raised after the IMFMediaSession::SetTopology method completes asynchronously
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESessionTopologiesCleared">
            <summary>
            Raised by the Media Session when the IMFMediaSession::ClearTopologies method completes
            asynchronously.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESessionStarted">
            <summary>
            Raised when the IMFMediaSession::Start method completes asynchronously.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESessionPaused">
            <summary>
            Raised when the IMFMediaSession::Pause method completes asynchronously.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESessionStopped">
            <summary>
            Raised when the IMFMediaSession::Stop method completes asynchronously.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESessionClosed">
            <summary>
            Raised when the IMFMediaSession::Close method completes asynchronously.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESessionEnded">
            <summary>
            Raised by the Media Session when it has finished playing the last presentation in the
            playback queue.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESessionRateChanged">
            <summary>
            Raised by the Media Session when the playback rate changes.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESessionScrubSampleComplete">
            <summary>
            Raised by the Media Session when it completes a scrubbing request.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESessionCapabilitiesChanged">
            <summary>
            Raised by the Media Session when the session capabilities change.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESessionTopologyStatus">
            <summary>
            Raised by the Media Session when the status of a topology changes.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESessionNotifyPresentationTime">
            <summary>
            Raised by the Media Session when a new presentation starts.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MENewPresentation">
            <summary>
            Raised by a media source a new presentation is ready.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MELicenseAcquisitionStart">
            <summary>
            License acquisition is about to begin.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MELicenseAcquisitionCompleted">
            <summary>
            License acquisition is complete.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEIndividualizationStart">
            <summary>
            Individualization is about to begin.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEIndividualizationCompleted">
            <summary>
            Individualization is complete.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEEnablerProgress">
            <summary>
            Signals the progress of a content enabler object.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEEnablerCompleted">
            <summary>
            A content enabler object's action is complete.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEPolicyError">
            <summary>
            Raised by a trusted output if an error occurs while enforcing the output policy.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEPolicyReport">
            <summary>
            Contains status information about the enforcement of an output policy.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEBufferingStarted">
            <summary>
            A media source started to buffer data.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEBufferingStopped">
            <summary>
            A media source stopped buffering data.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEConnectStart">
            <summary>
            The network source started opening a URL.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEConnectEnd">
            <summary>
            The network source finished opening a URL.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEReconnectStart">
            <summary>
            Raised by a media source at the start of a reconnection attempt.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEReconnectEnd">
            <summary>
            Raised by a media source at the end of a reconnection attempt.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MERendererEvent">
            <summary>
            Raised by the enhanced video renderer (EVR) when it receives a user event from the
            presenter.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESessionStreamSinkFormatChanged">
            <summary>
            Raised by the Media Session when the format changes on a media sink.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESourceUnknown">
            <summary>
            Source Unknown
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESourceStarted">
            <summary>
            Raised when a media source starts without seeking.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamStarted">
            <summary>
            Raised by a media stream when the source starts without seeking.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESourceSeeked">
            <summary>
            Raised when a media source seeks to a new position.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamSeeked">
            <summary>
            Raised by a media stream after a call to IMFMediaSource::Start causes a seek in the
            stream.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MENewStream">
            <summary>
            Raised by a media source when it starts a new stream.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEUpdatedStream">
            <summary>
            Raised by a media source when it restarts or seeks a stream that is already active.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESourceStopped">
            <summary>
            Raised by a media source when the IMFMediaSource::Stop method completes asynchronously.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamStopped">
            <summary>
            Raised by a media stream when the IMFMediaSource::Stop method completes asynchronously.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESourcePaused">
            <summary>
            Raised by a media source when the IMFMediaSource::Pause method completes asynchronously.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamPaused">
            <summary>
            Raised by a media stream when the IMFMediaSource::Pause method completes asynchronously.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEEndOfPresentation">
            <summary>
            Raised by a media source when a presentation ends.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEEndOfStream">
            <summary>
            Raised by a media stream when the stream ends.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEMediaSample">
            <summary>
            Raised when a media stream delivers a new sample.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamTick">
            <summary>
            Signals that a media stream does not have data available at a specified time.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamThinMode">
            <summary>
            Raised by a media stream when it starts or stops thinning the stream.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamFormatChanged">
            <summary>
            Raised by a media stream when the media type of the stream changes.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESourceRateChanged">
            <summary>
            Raised by a media source when the playback rate changes.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEEndOfPresentationSegment">
            <summary>
            Raised by the sequencer source when a segment is completed and is followed by another
            segment.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESourceCharacteristicsChanged">
            <summary>
            Raised by a media source when the source's characteristics change.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESourceRateChangeRequested">
            <summary>
            Raised by a media source to request a new playback rate.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESourceMetadataChanged">
            <summary>
            Raised by a media source when it updates its metadata.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESequencerSourceTopologyUpdated">
            <summary>
            Raised by the sequencer source when the IMFSequencerSource::UpdateTopology method
            completes asynchronously.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESinkUnknown">
            <summary>
            Sink Unknown
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamSinkStarted">
            <summary>
            Raised by a stream sink when it completes the transition to the running state.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamSinkStopped">
            <summary>
            Raised by a stream sink when it completes the transition to the stopped state.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamSinkPaused">
            <summary>
            Raised by a stream sink when it completes the transition to the paused state.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamSinkRateChanged">
            <summary>
            Raised by a stream sink when the rate has changed.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamSinkRequestSample">
            <summary>
            Raised by a stream sink to request a new media sample from the pipeline.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamSinkMarker">
            <summary>
            Raised by a stream sink after the IMFStreamSink::PlaceMarker method is called.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamSinkPrerolled">
            <summary>
            Raised by a stream sink when the stream has received enough preroll data to begin
            rendering.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamSinkScrubSampleComplete">
            <summary>
            Raised by a stream sink when it completes a scrubbing request.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamSinkFormatChanged">
            <summary>
            Raised by a stream sink when the sink's media type is no longer valid.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEStreamSinkDeviceChanged">
            <summary>
            Raised by the stream sinks of the EVR if the video device changes.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEQualityNotify">
            <summary>
            Provides feedback about playback quality to the quality manager.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MESinkInvalidated">
            <summary>
            Raised when a media sink becomes invalid.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEAudioSessionNameChanged">
            <summary>
            The audio session display name changed.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEAudioSessionVolumeChanged">
            <summary>
            The volume or mute state of the audio session changed
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEAudioSessionDeviceRemoved">
            <summary>
            The audio device was removed.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEAudioSessionServerShutdown">
            <summary>
            The Windows audio server system was shut down.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEAudioSessionGroupingParamChanged">
            <summary>
            The grouping parameters changed for the audio session.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEAudioSessionIconChanged">
            <summary>
            The audio session icon changed.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEAudioSessionFormatChanged">
            <summary>
            The default audio format for the audio device changed.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEAudioSessionDisconnected">
            <summary>
            The audio session was disconnected from a Windows Terminal Services session
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEAudioSessionExclusiveModeOverride">
            <summary>
            The audio session was preempted by an exclusive-mode connection.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.METrustUnknown">
            <summary>
            Trust Unknown
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEPolicyChanged">
            <summary>
            The output policy for a stream changed.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEContentProtectionMessage">
            <summary>
            Content protection message
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEPolicySet">
            <summary>
            The IMFOutputTrustAuthority::SetPolicy method completed.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEWMDRMLicenseBackupCompleted">
            <summary>
            DRM License Backup Completed
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEWMDRMLicenseBackupProgress">
            <summary>
            DRM License Backup Progress
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEWMDRMLicenseRestoreCompleted">
            <summary>
            DRM License Restore Completed
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEWMDRMLicenseRestoreProgress">
            <summary>
            DRM License Restore Progress
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEWMDRMLicenseAcquisitionCompleted">
            <summary>
            DRM License Acquisition Completed
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEWMDRMIndividualizationCompleted">
            <summary>
            DRM Individualization Completed
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEWMDRMIndividualizationProgress">
            <summary>
            DRM Individualization Progress
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEWMDRMProximityCompleted">
            <summary>
            DRM Proximity Completed
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEWMDRMLicenseStoreCleaned">
            <summary>
            DRM License Store Cleaned
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.MEWMDRMRevocationDownloadCompleted">
            <summary>
            DRM Revocation Download Completed
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.METransformUnknown">
            <summary>
            Transform Unknown
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.METransformNeedInput">
            <summary>
            Sent by an asynchronous MFT to request a new input sample.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.METransformHaveOutput">
            <summary>
            Sent by an asynchronous MFT when new output data is available from the MFT.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.METransformDrainComplete">
            <summary>
            Sent by an asynchronous Media Foundation transform (MFT) when a drain operation is
            complete.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaEventType.METransformMarker">
            <summary>
            Sent by an asynchronous MFT in response to an MFT_MESSAGE_COMMAND_MARKER message.
            </summary>
        </member>
        <member name="T:CSCore.MediaFoundation.MediaFoundationAttributes">
            <summary>
            see http://msdn.microsoft.com/en-us/library/windows/desktop/ms696989%28v=vs.85%29.aspx
            </summary>
        </member>
        <member name="T:CSCore.MediaFoundation.MFAttributes">
            <summary>
            Provides a generic way to store key/value pairs on an object. The keys are GUIDs, and the values can be any of the following data types: UINT32, UINT64, double, GUID, wide-character string, byte array, or IUnknown pointer. The standard implementation of this interface holds a thread lock while values are added, deleted, or retrieved.
            For a list of predefined attribute GUIDs, see Media Foundation Attributes. Each attribute GUID has an expected data type. The various "set" methods in IMFAttributes do not validate the type against the attribute GUID. It is the application's responsibility to set the correct type for the attribute.
            To create an empty attribute store, call MFCreateAttributes.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.MediaFoundation.MFAttributes"/> class.
            </summary>
            <param name="ptr">The underlying native pointer.</param>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.MediaFoundation.MFAttributes"/> class.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.MediaFoundation.MFAttributes"/> class.
            </summary>
            <param name="initialSize">The initial size in bytes.</param>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetItem(System.Guid,System.IntPtr)">
            <summary>
            Retrieves the value associated with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetItemType(System.Guid,CSCore.MediaFoundation.MFAttributeType@)">
            <summary>
            Retrieves the data type of the value associated with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetItemType(System.Guid)">
            <summary>
            Retrieves the data type of the value associated with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.CompareItem(System.Guid,CSCore.Win32.PropertyVariant,CSCore.Win32.NativeBool@)">
            <summary>
            Queries whether a stored attribute value equals a specified PROPVARIANT.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.Compare(CSCore.MediaFoundation.MFAttributes,CSCore.MediaFoundation.MFAttributeMatchType,CSCore.Win32.NativeBool@)">
            <summary>
            Compares the attributes on this object with the attributes on another object.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetUINT32(System.Guid,System.Int32@)">
            <summary>
            Retrieves a UINT32 value associated with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetUINT32(System.Guid)">
            <summary>
            Retrieves a UINT32 value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetUINT64(System.Guid,System.Int64@)">
            <summary>
            Retrieves a UINT64 value associated with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetUINT64(System.Guid)">
            <summary>
            Retrieves a UINT64 value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetDouble(System.Guid,System.Double@)">
            <summary>
            Retrieves a double value associated with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetDouble(System.Guid)">
            <summary>
            Retrieves a double value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetGuid(System.Guid,System.Guid@)">
            <summary>
            Retrieves a GUID value associated with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetGuid(System.Guid)">
            <summary>
            Retrieves a GUID value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetStringLength(System.Guid,System.Int32@)">
            <summary>
            Retrieves the length of a string value associated with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetStringLength(System.Guid)">
            <summary>
            Retrieves the length of a string value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetString(System.Guid,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Retrieves a wide-character string associated with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetString(System.Guid)">
            <summary>
            Retrieves a wide-character string associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetAllocatedString(System.Guid,System.IntPtr,System.Int32@)">
            <summary>
            Retrieves a wide-character string associated with a key. This method allocates the
            memory for the string.
            </summary>
            <returns>HRESULT</returns>
            <remarks>
            If the key is found and the value is a string type, this parameter receives a copy of
            the string. The caller must free the memory for the string by calling CoTaskMemFree.
            </remarks>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetBlobSize(System.Guid,System.Int32@)">
            <summary>
            Retrieves the length of a byte array associated with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetBlobSize(System.Guid)">
            <summary>
            Retrieves the length of a byte array associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetBlob(System.Guid,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Retrieves a byte array associated with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetAllocatedBlob(System.Guid,System.Byte[]@,System.Int32@)">
            <summary>
            Retrieves a byte array associated with a key. This method allocates the memory for the
            array.
            </summary>
            <returns>HRESULT</returns>
            <remarks>
            If the key is found and the value is a byte array, this parameter receives a copy of the
            array. The caller must free the memory for the array by calling CoTaskMemFree.
            </remarks>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetUnknown(System.Guid,System.Guid,System.IntPtr@)">
            <summary>
            Retrieves an interface pointer associated with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.SetItemNative(System.Guid,CSCore.Win32.PropertyVariant)">
            <summary>
            Associates an attribute value with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.SetItem(System.Guid,CSCore.Win32.PropertyVariant)">
            <summary>
            Associates an attribute value with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.DeleteItem(System.Guid)">
            <summary>
            Removes a key/value pair from the object's attribute list.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.DeleteAllItems">
            <summary>
            Removes all key/value pairs from the object's attribute list.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.SetUINT32(System.Guid,System.Int32)">
            <summary>
            Associates a UINT32 value with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.SetUINT64(System.Guid,System.Int64)">
            <summary>
            Associates a UINT64 value with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.SetDouble(System.Guid,System.Double)">
            <summary>
            Associates a double value with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.SetGuid(System.Guid,System.Guid)">
            <summary>
            Associates a GUID value with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.SetString(System.Guid,System.String)">
            <summary>
            Associates a wide-character string with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.SetBlob(System.Guid,System.IntPtr,System.Int32)">
            <summary>
            Associates a byte array with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.SetUnknown(System.Guid,System.IntPtr)">
            <summary>
            Associates an IUnknown pointer with a key.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.LockStore">
            <summary>
            Locks the attribute store so that no other thread can access it.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.UnlockStore">
            <summary>
            Unlocks the attribute store.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetCountNative(System.Int32@)">
            <summary>
            Retrieves the number of attributes that are set on this object.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetCount">
            <summary>
            Retrieves the number of attributes that are set on this object.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetItemByIndexNative(System.Int32,System.Guid@,System.IntPtr)">
            <summary>
            Retrieves an attribute at the specified index.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.GetItemByIndex(System.Int32,System.Guid@)">
            <summary>
            Retrieves an attribute at the specified index.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.CopyAllItems(CSCore.MediaFoundation.MFAttributes)">
            <summary>
            Copies all of the attributes from this object into another attribute store.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.Get(System.Guid)">
            <summary>
            Gets the item which got associated with the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key of the item.</param>
            <returns>The item which got associated with the specified <paramref name="key"/>.</returns>
            <exception cref="T:System.NotSupportedException">The value type of the associated item is not supported.</exception>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.Get``1(System.Guid)">
            <summary>
            Gets the item which got associated with the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key of the item.</param>
            <typeparam name="TValueType">Type of the returned item.</typeparam>
            <returns>The item which got associated with the specified <paramref name="key"/>.</returns>
            <exception cref="T:System.NotSupportedException">The specified <typeparamref name="TValueType"/> is not supported.</exception>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.Set``1(System.Guid,``0)">
            <summary>
            Sets the value of a property specified by its <paramref name="key"/>.
            </summary>
            <param name="key">The key of the property.</param>
            <param name="value">The value to set.</param>
            <typeparam name="TValueType">The type of the property.</typeparam>
            <exception cref="T:System.NotSupportedException">The specified <typeparamref name="TValueType"/> is not supported.</exception>
        </member>
        <member name="M:CSCore.MediaFoundation.MFAttributes.Set``1(CSCore.MediaFoundation.MFAttribute{``0})">
            <summary>
            Sets the value of a property specified by the key of the <paramref name="keyValuePair"/> object.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="keyValuePair">Specifies the key of the property and the new value to set.</param>
        </member>
        <member name="P:CSCore.MediaFoundation.MFAttributes.Item(System.Int32)">
            <summary>
            Gets or sets an item specified by its index.
            </summary>
            <param name="index">The index of the item.</param>
        </member>
        <member name="P:CSCore.MediaFoundation.MFAttributes.Item(System.Guid)">
            <summary>
            Gets or sets an item specified by its key.
            </summary>
            <param name="key">The key of the item.</param>
        </member>
        <member name="P:CSCore.MediaFoundation.MFAttributes.Count">
            <summary>
            Retrieves the number of attributes that are set on this object.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFActivate.ActivateObjectNative(System.Guid,System.IntPtr@)">
            <summary>
            Creates the object associated with this activation object.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFActivate.ActivateObject``1(System.Guid)">
            <summary>
            Creates the object associated with this activation object.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFActivate.ActivateObject(System.Guid)">
            <summary>
            Creates the object associated with this activation object.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFActivate.ShutdownObjectNative">
            <summary>
            Shuts down the created object.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFActivate.ShutdownObject">
            <summary>
            Shuts down the created object.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFActivate.DetachObjectNative">
            <summary>
            Detaches the created object from the activation object.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFActivate.DetachObject">
            <summary>
            Detaches the created object from the activation object.
            </summary>
        </member>
        <member name="T:CSCore.MediaFoundation.MFInputStreamInfo">
            <summary>
            Contains information about an input stream on a Media Foundation transform (MFT). To get these values, call IMFTransform::GetInputStreamInfo.
            </summary>
            <remarks>
            Before the media types are set, the only values that should be considered valid are the MFT_INPUT_STREAM_REMOVABLE and MFT_INPUT_STREAM_OPTIONAL flags in the dwFlags member.
            -The MFT_INPUT_STREAM_REMOVABLE flag indicates that the stream can be deleted.
            -The MFT_INPUT_STREAM_OPTIONAL flag indicates that the stream is optional and does not require a media type.
            After you set a media type on all of the input and output streams (not including optional streams), all of the values returned by the GetInputStreamInfo method are valid. They might change if you set different media types.
            </remarks>
        </member>
        <member name="F:CSCore.MediaFoundation.MFInputStreamInfo.HnsMaxLatency">
            <summary>
            Maximum amount of time between an input sample and the corresponding output sample, in
            100-nanosecond units. For example, an MFT that buffers two samples, each with a duration
            of 1 second, has a maximum latency of two seconds. If the MFT always turns input samples
            directly into output samples, with no buffering, the latency is zero.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFInputStreamInfo.Flags">
            <summary>
            Bitwise OR of zero or more flags from the InputStreamInfoFlags enumeration.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFInputStreamInfo.Size">
            <summary>
            The minimum size of each input buffer, in bytes. If the size is variable or the MFT does
            not require a specific size, the value is zero. For uncompressed audio, the value should
            be the audio frame size, which you can get from the MF_MT_AUDIO_BLOCK_ALIGNMENT
            attribute in the media type.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFInputStreamInfo.cbMaxLookahead">
            <summary>
            Maximum amount of input data, in bytes, that the MFT holds to perform lookahead.
            Lookahead is the action of looking forward in the data before processing it. This value
            should be the worst-case value. If the MFT does not keep a lookahead buffer, the value
            is zero.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFInputStreamInfo.cbAlignment">
            <summary>
            The memory alignment required for input buffers. If the MFT does not require a specific
            alignment, the value is zero.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_AAC">
            <summary>
            Advanced Audio Coding (AAC).
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_ADTS">
            <summary>
            Not used
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_Dolby_AC3_SPDIF">
            <summary>
            Dolby AC-3 audio over Sony/Philips Digital Interface (S/PDIF).
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_DRM">
            <summary>
            Encrypted audio data used with secure audio path.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_DTS">
            <summary>
            Digital Theater Systems (DTS) audio.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_Float">
            <summary>
            Uncompressed IEEE floating-point audio.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_MP3">
            <summary>
            MPEG Audio Layer-3 (MP3).
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_MPEG">
            <summary>
            MPEG-1 audio payload.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_MSP1">
            <summary>
            Windows Media Audio 9 Voice codec.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_PCM">
            <summary>
            Uncompressed PCM audio.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_WMASPDIF">
            <summary>
            Windows Media Audio 9 Professional codec over S/PDIF.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_WMAudio_Lossless">
            <summary>
            Windows Media Audio 9 Lossless codec or Windows Media Audio 9.1 codec.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_WMAudioV8">
            <summary>
            Windows Media Audio 8 codec, Windows Media Audio 9 codec, or Windows Media Audio 9.1 codec.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_WMAudioV9">
            <summary>
            Windows Media Audio 9 Professional codec or Windows Media Audio 9.1 Professional codec.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MFAudioFormat_Dolby_AC3">
            <summary>
            Dolby Digital (AC-3).
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MEDIASUBTYPE_RAW_AAC1">
            <summary>
            MPEG-4 and AAC Audio Types
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MEDIASUBTYPE_DVM">
            <summary>
            Dolby Audio Types
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MEDIASUBTYPE_DOLBY_DDPLUS">
            <summary>
            Dolby Audio Types
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.KSDATAFORMAT_SUBTYPE_MULAW">
            <summary>
            μ-law coding
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.KSDATAFORMAT_SUBTYPE_ADPCM">
            <summary>
            Adaptive delta pulse code modulation (ADPCM)
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL_PLUS">
            <summary>
            Dolby Digital Plus formatted for HDMI output.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.MEDIASUBTYPE_MSAUDIO1">
            <summary>
            MSAudio1 - unknown meaning
            Reference : wmcodecdsp.h
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.ImaAdpcm">
            <summary>
            IMA ADPCM ACM Wrapper
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFMediaTypes.WMMEDIASUBTYPE_WMSP2">
            <summary>
            WMSP2 - unknown meaning
            Reference: wmsdkidl.h
            </summary>
        </member>
        <member name="T:CSCore.MediaFoundation.MFOutputStreamInfo">
            <summary>
            Contains information about an output stream on a Media Foundation transform (MFT). To get these values, call IMFTransform::GetOutputStreamInfo.
            </summary>
            <remarks>
            Before the media types are set, the only values that should be considered valid is the MFT_OUTPUT_STREAM_OPTIONAL flag in the dwFlags member. This flag indicates that the stream is optional and does not require a media type.
            After you set a media type on all of the input and output streams (not including optional streams), all of the values returned by the GetOutputStreamInfo method are valid. They might change if you set different media types.
            </remarks>
        </member>
        <member name="F:CSCore.MediaFoundation.MFOutputStreamInfo.Flags">
            <summary>
            Bitwise OR of zero or more flags from the _MFT_OUTPUT_STREAM_INFO_FLAGS enumeration.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFOutputStreamInfo.Size">
            <summary>
            Minimum size of each output buffer, in bytes. If the MFT does not require a specific
            size, the value is zero. For uncompressed audio, the value should be the audio frame
            size, which you can get from the MF_MT_AUDIO_BLOCK_ALIGNMENT attribute in the media
            type. If the dwFlags member contains the MFT_OUTPUT_STREAM_PROVIDES_SAMPLES flag, the
            value is zero, because the MFT allocates the output buffers.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFOutputStreamInfo.cbAlignment">
            <summary>
            The memory alignment required for output buffers. If the MFT does not require a specific
            alignment, the value is zero. If the dwFlags member contains the
            MFT_OUTPUT_STREAM_PROVIDES_SAMPLES flag, this value is the alignment that the MFT uses
            internally when it allocates samples. It is recommended, but not required, that MFTs
            allocate buffers with at least a 16-byte memory alignment.
            </summary>
        </member>
        <member name="T:CSCore.MediaFoundation.MFSampleFlags">
            <summary>
            Currently no flags are defined.
            </summary>
        </member>
        <member name="T:CSCore.MediaFoundation.MFSinkWriter">
            <summary>
            Implemented by the Microsoft Media Foundation sink writer object.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.MediaFoundation.MFSinkWriter"/> class.
            </summary>
            <param name="ptr">The native pointer.</param>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.AddStreamNative(CSCore.MediaFoundation.MFMediaType,System.Int32@)">
            <summary>
            Adds a stream to the sink writer.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.AddStream(CSCore.MediaFoundation.MFMediaType)">
            <summary>
            Adds a stream to the sink writer.
            </summary>
            <returns>The zero-based index of the new stream.</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.SetInputMediaTypeNative(System.Int32,CSCore.MediaFoundation.MFMediaType,CSCore.MediaFoundation.MFAttributes)">
            <summary>
            Sets the input format for a stream on the sink writer.
            </summary>
            <param name="streamIndex">Input-stream index.</param>
            <param name="inputMediaType">The input media type.</param>
            <param name="encodingParameters">Optional. Can be set to null.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.SetInputMediaType(System.Int32,CSCore.MediaFoundation.MFMediaType,CSCore.MediaFoundation.MFAttributes)">
            <summary>
            Sets the input format for a stream on the sink writer.
            </summary>
            <param name="streamIndex">Input-stream index.</param>
            <param name="inputMediaType">The input media type to set.</param>
            <param name="encodingParameters">Optional</param>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.BeginWritingNative">
            <summary>
            Initializes the sink writer for writing.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.BeginWriting">
            <summary>
            Initializes the sink writer for writing.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.WriteSampleNative(System.Int32,CSCore.MediaFoundation.MFSample)">
            <summary>
            Delivers a sample to the sink writer.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.WriteSample(System.Int32,CSCore.MediaFoundation.MFSample)">
            <summary>
            Delivers a sample to the sink writer.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.SendStreamTickNative(System.Int32,System.Int64)">
            <summary>
            Indicates a gap in an input stream.
            </summary>
            <param name="streamIndex">The zero-based index of the stream.</param>
            <param name="timeStamp">The position in the stream where the gap in the data occurs. The value is given in 100-nanosecond units, relative to the start of the stream.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.SendStreamTick(System.Int32,System.Int64)">
            <summary>
            Indicates a gap in an input stream.
            </summary>
            <param name="streamIndex">The zero-based index of the stream.</param>		
            <param name="timeStamp">The position in the stream where the gap in the data occurs. The value is given in 100-nanosecond units, relative to the start of the stream.</param>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.PlaceMarkerNative(System.Int32,System.IntPtr)">
            <summary>
            Places a marker in the specified stream.
            </summary>
            <param name="streamIndex">The zero-based index of the stream.</param>        
            <param name="context">Pointer to an application-defined value. The value of this parameter is returned to the caller in the pvContext parameter of the caller's IMFSinkWriterCallback::OnMarker callback method. The application is responsible for any memory allocation associated with this data. This parameter can be NULL.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.PlaceMarker(System.Int32,System.IntPtr)">
            <summary>
            Places a marker in the specified stream.
            </summary>
            <param name="streamIndex">The zero-based index of the stream.</param>
            <param name="context">Pointer to an application-defined value. The value of this parameter is returned to the caller in the pvContext parameter of the caller's IMFSinkWriterCallback::OnMarker callback method. The application is responsible for any memory allocation associated with this data. This parameter can be NULL.</param>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.NotifyEndOfSegmentNative(System.Int32)">
            <summary>
            Notifies the media sink that a stream has reached the end of a segment.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.NotifyEndOfSegment(System.Int32)">
            <summary>
            Notifies the media sink that a stream has reached the end of a segment.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.FlushNative(System.Int32)">
            <summary>
            Flushes one or more streams.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.Flush(System.Int32)">
            <summary>
            Flushes one or more streams.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.FinalizeWritingNative">
            <summary>
            Completes all writing operations on the sink writer.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.FinalizeWriting">
            <summary>
            Completes all writing operations on the sink writer.
            </summary>
            <remarks>Renamed from 'Finalize' to 'FinalizeWriting' to suppress "CS0465 warning".</remarks>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.GetServiceForStreamNative(System.Int32,System.Guid,System.Guid,System.IntPtr@)">
            <summary>
            Queries the underlying media sink or encoder for an interface.
            </summary>
            <param name="streamIndex">The zero-based index of a stream to query</param>		
            <param name="guidService">A service identifier GUID, or GUID_NULL. If the value is GUID_NULL, the method calls QueryInterface to get the requested interface. Otherwise, the method calls IMFGetService::GetService. For a list of service identifiers, see Service Interfaces( http://msdn.microsoft.com/en-us/library/windows/desktop/ms695350(v=vs.85).aspx ).</param>
            <param name="riid">The interface identifier (IID) of the interface being requested.</param>
            <param name="pObject">Receives a pointer to the requested interface. The caller must release the interface.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.GetServiceForStream(System.Int32,System.Guid,System.Guid)">
            <summary>
            Queries the underlying media sink or encoder for an interface.
            </summary>
            <param name="streamIndex">The zero-based index of a stream to query</param>
            <param name="guidService">A service identifier GUID, or GUID_NULL. If the value is GUID_NULL, the method calls QueryInterface to get the requested interface. Otherwise, the method calls IMFGetService::GetService. For a list of service identifiers, see Service Interfaces( http://msdn.microsoft.com/en-us/library/windows/desktop/ms695350(v=vs.85).aspx ).</param>
            <param name="riid">The interface identifier (IID) of the interface being requested.</param>
            <returns>A pointer to the requested interface. The caller must release the interface.</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.GetStatisticsNative(System.Int32,CSCore.MediaFoundation.MFSinkWriterStatistics@)">
            <summary>
            Gets statistics about the performance of the sink writer.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSinkWriter.GetStatistics(System.Int32)">
            <summary>
            Gets statistics about the performance of the sink writer.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.Cb">
            <summary>	
            The size of the structure, in bytes.
            </summary>	
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.LlLastTimestampReceived">
            <summary>	
            The time stamp of the most recent sample given to the sink writer. The sink writer updates this value each time the application calls <strong><see cref="M:SharpDX.MediaFoundation.SinkWriter.WriteSample(System.Int32,SharpDX.MediaFoundation.Sample)" /></strong>.
            </summary>	
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.LlLastTimestampEncoded">
            <summary>	
            The time stamp of the most recent sample to be encoded. The sink writer updates this value whenever it calls <strong><see cref="M:SharpDX.MediaFoundation.Transform.ProcessOutput(SharpDX.MediaFoundation.TransformProcessOutputFlags,System.Int32,SharpDX.MediaFoundation.TOutputDataBuffer,SharpDX.MediaFoundation.TransformProcessOutputStatus@)" /></strong> on the encoder.
            </summary>	
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.LlLastTimestampProcessed">
            <summary>	
            The time stamp of the most recent sample given to the media sink. The sink writer updates this value whenever it calls <strong><see cref="M:SharpDX.MediaFoundation.StreamSink.ProcessSample(SharpDX.MediaFoundation.Sample)" /></strong> on the media sink.
            </summary>	
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.LlLastStreamTickReceived">
            <summary>	
            The time stamp of the most recent stream tick. The sink writer updates this value whenever the application calls <strong><see cref="M:SharpDX.MediaFoundation.SinkWriter.SendStreamTick(System.Int32,System.Int64)" /></strong>.
            </summary>		
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.LlLastSinkSampleRequest">
            <summary>	
            The system time of the most recent sample request from the media sink. The sink writer updates this value whenever it receives an <see cref="F:SharpDX.MediaFoundation.MediaEventTypes.StreamSinkRequestSample" /> event from the media sink. The value is the current system time.
            </summary>	
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.QwNumSamplesReceived">
            <summary>	
            The number of samples received.
            </summary>	
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.QwNumSamplesEncoded">
            <summary>	
            The number of samples encoded.
            </summary>	
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.QwNumSamplesProcessed">
            <summary>	
            The number of samples given to the media sink.
            </summary>	
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.QwNumStreamTicksReceived">
            <summary>	
            The number of stream ticks received.
            </summary>	
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.DwByteCountQueued">
            <summary>	
            The amount of data, in bytes, currently waiting to be processed. 
            </summary>	
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.QwByteCountProcessed">
            <summary>	
            The total amount of data, in bytes, that has been sent to the media sink.
            </summary>	
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.DwNumOutstandingSinkSampleRequests">
            <summary>	
            The number of pending sample requests.
            </summary>	
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.DwAverageSampleRateReceived">
            <summary>	
            The average rate, in media samples per 100-nanoseconds, at which the application sent samples to the sink writer.
            </summary>	
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.DwAverageSampleRateEncoded">
            <summary>	
            The average rate, in media samples per 100-nanoseconds, at which the sink writer sent samples to the encoder.
            </summary>		
        </member>
        <member name="F:CSCore.MediaFoundation.MFSinkWriterStatistics.DwAverageSampleRateProcessed">
            <summary>	
            The average rate, in media samples per 100-nanoseconds, at which the sink writer sent samples to the media sink.
            </summary>	
        </member>
        <member name="T:CSCore.MediaFoundation.MFTCategories">
            <summary>
            see http://msdn.microsoft.com/en-us/library/windows/desktop/dd388660(v=vs.85).aspx
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFTEnumFlags.FieldOfUse">
            <summary>
            Must be unlocked by the app before use.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFTransformSetTypeFlags.TestOnly">
            <summary>
            Test the proposed media type, but do not set it.
            </summary>
        </member>
        <member name="T:CSCore.SoundIn.ISoundRecorder">
            <summary>
            Defines a <see cref="T:CSCore.SoundIn.ISoundIn"/> provider which offers a <see cref="P:CSCore.SoundIn.ISoundRecorder.RecordingState"/> property.
            </summary>
        </member>
        <member name="T:CSCore.SoundIn.ISoundIn">
            <summary>
            Defines a provider for recording audio.
            </summary>
        </member>
        <member name="M:CSCore.SoundIn.ISoundIn.Initialize">
            <summary>
            Initializes the <see cref="T:CSCore.SoundIn.ISoundIn"/> instance and prepares all resources recording.
            </summary>
        </member>
        <member name="M:CSCore.SoundIn.ISoundIn.Start">
            <summary>
            Starts recording.
            </summary>
        </member>
        <member name="M:CSCore.SoundIn.ISoundIn.Stop">
            <summary>
            Stops recording. 
            </summary>
        </member>
        <member name="E:CSCore.SoundIn.ISoundIn.DataAvailable">
            <summary>
            Occurs when new data got captured and is available. 
            </summary>
        </member>
        <member name="E:CSCore.SoundIn.ISoundIn.Stopped">
            <summary>
            Occurs when the recording stopped.
            </summary>
        </member>
        <member name="P:CSCore.SoundIn.ISoundIn.WaveFormat">
            <summary>
            Gets the OutputFormat.
            </summary>
        </member>
        <member name="P:CSCore.SoundIn.ISoundRecorder.RecordingState">
            <summary>
            Gets the current <see cref="T:CSCore.SoundIn.RecordingState"/> of the <see cref="T:CSCore.SoundIn.ISoundRecorder"/>.
            </summary>
        </member>
        <member name="T:CSCore.SoundIn.RecordingStoppedEventArgs">
            <summary>
                Provides data for the <see cref="E:CSCore.SoundIn.ISoundIn.Stopped"/> event.
            </summary>
        </member>
        <member name="T:CSCore.StoppedEventArgs">
            <summary>
                Provides data for any stopped operations.
            </summary>
        </member>
        <member name="M:CSCore.StoppedEventArgs.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.StoppedEventArgs"/> class.
            </summary>
        </member>
        <member name="M:CSCore.StoppedEventArgs.#ctor(System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.StoppedEventArgs"/> class.
            </summary>
            <param name="exception">The associated exception. Can be null.</param>
        </member>
        <member name="P:CSCore.StoppedEventArgs.HasError">
            <summary>
                Gets a value which indicates whether the operation stopped due to an error. True means that that the operation
                stopped due to an error. False means that the operation did not stop due to an error.
            </summary>
        </member>
        <member name="P:CSCore.StoppedEventArgs.Exception">
            <summary>
                Gets the associated <see cref="P:CSCore.StoppedEventArgs.Exception"/> which caused the operation to stop.
            </summary>
            <value>Can be null.</value>
        </member>
        <member name="M:CSCore.SoundIn.RecordingStoppedEventArgs.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.SoundIn.RecordingStoppedEventArgs"/> class.
            </summary>
        </member>
        <member name="M:CSCore.SoundIn.RecordingStoppedEventArgs.#ctor(System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.SoundIn.RecordingStoppedEventArgs"/> class.
            </summary>
            <param name="exception">The associated exception. Can be null.</param>
        </member>
        <member name="P:CSCore.SoundIn.RecordingStoppedEventArgs.HasError">
            <summary>
                Gets a value which indicates whether the recording stopped due to an error. True means that that the recording
                stopped due to an error. False means that the recording did not stop due to an error.
            </summary>
        </member>
        <member name="P:CSCore.SoundIn.RecordingStoppedEventArgs.Exception">
            <summary>
                Gets the associated <see cref="P:CSCore.SoundIn.RecordingStoppedEventArgs.Exception"/> which caused the recording to stop.
            </summary>
            <value>Can be null.</value>
        </member>
        <member name="T:CSCore.SoundIn.WasapiCapture">
            <summary>
            Provides audiocapture through Wasapi.
            Minimum supported OS: Windows Vista (see <see cref="P:CSCore.SoundIn.WasapiCapture.IsSupportedOnCurrentPlatform"/> property).
            </summary>
        </member>
        <member name="F:CSCore.SoundIn.WasapiCapture.ReftimesPerMillisecond">
            <summary>
            Reference time units per millisecond.
            </summary>
        </member>
        <member name="F:CSCore.SoundIn.WasapiCapture.ReftimesPerSecond">
            <summary>
            Reference time units per second.
            </summary>
        </member>
        <member name="M:CSCore.SoundIn.WasapiCapture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.SoundIn.WasapiCapture"/> class..
            CaptureThreadPriority = AboveNormal. 
            DefaultFormat = null. 
            Latency = 100ms. 
            EventSync = true.
            SharedMode = Shared.
            </summary>
        </member>
        <member name="M:CSCore.SoundIn.WasapiCapture.#ctor(System.Boolean,CSCore.CoreAudioAPI.AudioClientShareMode)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.SoundIn.WasapiCapture"/> class..
            CaptureThreadPriority = AboveNormal. 
            DefaultFormat = null.
            Latency = 100ms.
            </summary>
            <param name="eventSync">True, to use eventsynchronization instead of a simple loop and sleep behavior. Don't use this in combination with exclusive mode.</param>
            <param name="shareMode">Specifies how to open the audio device. Note that if exclusive mode is used, the device can only be used once on the whole system. Don't use exclusive mode in combination with eventSync.</param>
        </member>
        <member name="M:CSCore.SoundIn.WasapiCapture.#ctor(System.Boolean,CSCore.CoreAudioAPI.AudioClientShareMode,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.SoundIn.WasapiCapture"/> class..
            CaptureThreadPriority = AboveNormal. 
            DefaultFormat = null.
            </summary>
            <param name="eventSync">True, to use eventsynchronization instead of a simple loop and sleep behavior. Don't use this in combination with exclusive mode.</param>
            <param name="shareMode">Specifies how to open the audio device. Note that if exclusive mode is used, the device can only be used once on the whole system. Don't use exclusive mode in combination with eventSync.</param>
            <param name="latency">Latency of the capture specified in milliseconds.</param>
        </member>
        <member name="M:CSCore.SoundIn.WasapiCapture.#ctor(System.Boolean,CSCore.CoreAudioAPI.AudioClientShareMode,System.Int32,CSCore.WaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.SoundIn.WasapiCapture"/> class..
            CaptureThreadPriority = AboveNormal.
            </summary>
            <param name="eventSync">True, to use eventsynchronization instead of a simple loop and sleep behavior. Don't use this in combination with exclusive mode.</param>
            <param name="shareMode">Specifies how to open the audio device. Note that if exclusive mode is used, the device can only be used once on the whole system. Don't use exclusive mode in combination with eventSync.</param>
            <param name="latency">Latency of the capture specified in milliseconds.</param>
            <param name="defaultFormat">The default WaveFormat to use for the capture. If this parameter is set to null, the best available format will be chosen automatically.</param>
        </member>
        <member name="M:CSCore.SoundIn.WasapiCapture.#ctor(System.Boolean,CSCore.CoreAudioAPI.AudioClientShareMode,System.Int32,CSCore.WaveFormat,System.Threading.ThreadPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.SoundIn.WasapiCapture"/> class..
            </summary>
            <param name="eventSync">True, to use eventsynchronization instead of a simple loop and sleep behavior. Don't use this in combination with exclusive mode.</param>
            <param name="shareMode">Specifies how to open the audio device. Note that if exclusive mode is used, the device can only be used once on the whole system. Don't use exclusive mode in combination with eventSync.</param>
            <param name="latency">Latency of the capture specified in milliseconds.</param>
            <param name="captureThreadPriority">ThreadPriority of the capturethread which runs in background and provides the audiocapture itself.</param>
            <param name="defaultFormat">The default WaveFormat to use for the capture. If this parameter is set to null, the best available format will be chosen automatically.</param>
        </member>
        <member name="M:CSCore.SoundIn.WasapiCapture.Initialize">
            <summary>
            Initializes WasapiCapture and prepares all resources for recording.
            Note that properties like Device, etc. won't affect WasapiCapture after calling Initialize.
            </summary>
        </member>
        <member name="M:CSCore.SoundIn.WasapiCapture.Start">
            <summary>
            Start Recording.
            </summary>
        </member>
        <member name="M:CSCore.SoundIn.WasapiCapture.Stop">
            <summary>
            Stop Recording.
            </summary>
        </member>
        <member name="M:CSCore.SoundIn.WasapiCapture.Dispose">
            <summary>
            Stops the capture and frees all resources.
            </summary>
        </member>
        <member name="P:CSCore.SoundIn.WasapiCapture.IsSupportedOnCurrentPlatform">
            <summary>
            Returns true if Wasapi is supported on the current platform.
            </summary>
        </member>
        <member name="E:CSCore.SoundIn.WasapiCapture.DataAvailable">
            <summary>
            Occurs when new data got captured and is available. 
            </summary>
        </member>
        <member name="E:CSCore.SoundIn.WasapiCapture.Stopped">
            <summary>
            Occurs when capturing stopped.
            </summary>
        </member>
        <member name="P:CSCore.SoundIn.WasapiCapture.RecordingState">
            <summary>
            Gets the RecordingState.
            </summary>
        </member>
        <member name="P:CSCore.SoundIn.WasapiCapture.Device">
            <summary>
            Gets or sets the capture device to use.
            Set this property before calling Initialize.
            </summary>
        </member>
        <member name="P:CSCore.SoundIn.WasapiCapture.WaveFormat">
            <summary>
            Gets the OutputFormat.
            </summary>
        </member>
        <member name="P:CSCore.SoundIn.WasapiCapture.DebuggingId">
            <summary>
            Random ID based on internal audioclients memory address for debugging purposes. 
            </summary>
        </member>
        <member name="T:CSCore.SoundIn.WasapiLoopbackCapture">
            <summary>
            Provides audio loopback capture through Wasapi. That enables a client to capture the audio stream that is being played by a rendering endpoint device (e.g. speakers, headset, etc.).
            Minimum supported OS: Windows Vista (see <see cref="P:CSCore.SoundIn.WasapiCapture.IsSupportedOnCurrentPlatform"/> property).
            Read more about loopback recording here: http://msdn.microsoft.com/en-us/library/windows/desktop/dd316551(v=vs.85).aspx.
            </summary>
        </member>
        <member name="M:CSCore.SoundIn.WasapiLoopbackCapture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.SoundIn.WasapiLoopbackCapture"/> class.
            </summary>
        </member>
        <member name="M:CSCore.SoundIn.WasapiLoopbackCapture.GetDefaultDevice">
            <summary>
            Returns the default rendering device.
            </summary>
            <returns>Default rendering device.</returns>
        </member>
        <member name="M:CSCore.SoundIn.WasapiLoopbackCapture.GetStreamFlags">
            <summary>
            Returns the <see cref="T:CSCore.CoreAudioAPI.AudioClientStreamFlags"/> used to initialize (see <see cref="M:CSCore.CoreAudioAPI.AudioClient.Initialize(CSCore.CoreAudioAPI.AudioClientShareMode,CSCore.CoreAudioAPI.AudioClientStreamFlags,System.Int64,System.Int64,CSCore.WaveFormat,System.Guid)"/>). 
            </summary>
            <returns></returns>
        </member>
        <member name="T:CSCore.SoundOut.DirectSoundOut">
            <summary>
                Provides audioplayback through DirectSound.
            </summary>
        </member>
        <member name="T:CSCore.SoundOut.ISoundOut">
            <summary>
            Defines a provider for playing audio.
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.ISoundOut.Play">
            <summary>
            Starts the audio playback.
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.ISoundOut.Pause">
            <summary>
            Pauses the audio playback.
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.ISoundOut.Resume">
            <summary>
            Resumes the audio playback.
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.ISoundOut.Stop">
            <summary>
            Stops the audio playback.
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.ISoundOut.Initialize(CSCore.IWaveSource)">
            <summary>
            Initializes the <see cref="T:CSCore.SoundOut.ISoundOut"/> for playing a <paramref name="source"/>.
            </summary>
            <param name="source"><see cref="T:CSCore.IWaveSource"/> which provides waveform-audio data to play.</param>
        </member>
        <member name="P:CSCore.SoundOut.ISoundOut.Volume">
            <summary>
            Gets or sets the volume of the playback. The value of this property must be within the range from 0.0 to 1.0 where 0.0 equals 0% (muted) and 1.0 equals 100%.
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.ISoundOut.WaveSource">
            <summary>
            Gets the <see cref="T:CSCore.IWaveSource"/> which provides the waveform-audio data and was used to <see cref="M:CSCore.SoundOut.ISoundOut.Initialize(CSCore.IWaveSource)"/> the <see cref="T:CSCore.SoundOut.ISoundOut"/>.
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.ISoundOut.PlaybackState">
            <summary>
            Gets the <see cref="T:CSCore.SoundOut.PlaybackState"/> of the <see cref="T:CSCore.SoundOut.ISoundOut"/>. The playback state indicates whether the playback is currently playing, paused or stopped.
            </summary>
        </member>
        <member name="E:CSCore.SoundOut.ISoundOut.Stopped">
            <summary>
            Occurs when the playback stops. 
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.DirectSoundOut.#ctor">
            <summary>
                Initializes an new instance of <see cref="T:CSCore.SoundOut.DirectSoundOut"/> class.
                Latency = 100.
                EventSyncContext = SynchronizationContext.Current.
                PlaybackThreadPriority = AboveNormal.
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.DirectSoundOut.#ctor(System.Int32)">
            <summary>
                Initializes an new instance of <see cref="T:CSCore.SoundOut.DirectSoundOut"/> class.
                EventSyncContext = SynchronizationContext.Current.
                PlaybackThreadPriority = AboveNormal.
            </summary>
            <param name="latency">Latency of the playback specified in milliseconds.</param>
        </member>
        <member name="M:CSCore.SoundOut.DirectSoundOut.#ctor(System.Int32,System.Threading.ThreadPriority)">
            <summary>
                Initializes an new instance of <see cref="T:CSCore.SoundOut.DirectSoundOut"/> class.
                EventSyncContext = SynchronizationContext.Current.
            </summary>
            <param name="latency">Latency of the playback specified in milliseconds.</param>
            <param name="playbackThreadPriority">
                ThreadPriority of the playbackthread which runs in background and feeds the device
                with data.
            </param>
        </member>
        <member name="M:CSCore.SoundOut.DirectSoundOut.#ctor(System.Int32,System.Threading.ThreadPriority,System.Threading.SynchronizationContext)">
            <summary>
                Initializes an new instance of <see cref="T:CSCore.SoundOut.DirectSoundOut"/> class.
            </summary>
            <param name="latency">Latency of the playback specified in milliseconds.</param>
            <param name="playbackThreadPriority">
                ThreadPriority of the playbackthread which runs in background and feeds the device
                with data.
            </param>
            <param name="eventSyncContext">
                The synchronizationcontext which is used to raise any events like the "Stopped"-event.
                If the passed value is not null, the events will be called async through the SynchronizationContext.Post() method.
            </param>
        </member>
        <member name="M:CSCore.SoundOut.DirectSoundOut.Initialize(CSCore.IWaveSource)">
            <summary>
                Initializes <see cref="T:CSCore.SoundOut.DirectSoundOut"/> and prepares all resources for playback.
                Note that all properties like <see cref="P:CSCore.SoundOut.DirectSoundOut.Device"/>, <see cref="P:CSCore.SoundOut.DirectSoundOut.Latency"/>,... won't affect
                <see cref="T:CSCore.SoundOut.DirectSoundOut"/> after calling <see cref="M:CSCore.SoundOut.DirectSoundOut.Initialize(CSCore.IWaveSource)"/>.
            </summary>
            <param name="source">The source to prepare for playback.</param>
        </member>
        <member name="M:CSCore.SoundOut.DirectSoundOut.Play">
            <summary>
                Starts the playback.
                Note: <see cref="M:CSCore.SoundOut.DirectSoundOut.Initialize(CSCore.IWaveSource)"/> has to get called before calling Play.
                If PlaybackState is Paused, Resume() will be called automatically.
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.DirectSoundOut.Stop">
            <summary>
                Stops the playback and frees all allocated resources.
                After calling <see cref="M:CSCore.SoundOut.DirectSoundOut.Stop"/> the caller has to call <see cref="M:CSCore.SoundOut.DirectSoundOut.Initialize(CSCore.IWaveSource)"/> again before another playback
                can be started.
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.DirectSoundOut.Resume">
            <summary>
                Resumes the paused playback.
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.DirectSoundOut.Pause">
            <summary>
                Pauses the playback.
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.DirectSoundOut.Dispose">
            <summary>
                Disposes the <see cref="T:CSCore.SoundOut.DirectSoundOut"/> instance and stops the playbacks.
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.DirectSoundOut.Dispose(System.Boolean)">
            <summary>
                Disposes and stops the <see cref="T:CSCore.SoundOut.DirectSoundOut"/> instance.
            </summary>
            <param name="disposing">
                True to release both managed and unmanaged resources; false to release only unmanaged
                resources.
            </param>
        </member>
        <member name="M:CSCore.SoundOut.DirectSoundOut.Finalize">
            <summary>
                Destructor which calls the <see cref="M:CSCore.SoundOut.DirectSoundOut.Dispose(System.Boolean)"/> method.
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.DirectSoundOut.DebuggingId">
            <summary>
                Random ID based on the internal directsounds memory address for debugging purposes.
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.DirectSoundOut.Latency">
            <summary>
                Latency of the playback specified in milliseconds.
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.DirectSoundOut.Device">
            <summary>
                Gets or sets the device to use for the playing the waveform-audio data. Note that the <see cref="M:CSCore.SoundOut.DirectSoundOut.Initialize(CSCore.IWaveSource)"/>
                method has to get called
            </summary>
        </member>
        <member name="E:CSCore.SoundOut.DirectSoundOut.Stopped">
            <summary>
                Occurs when the playback gets stopped.
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.DirectSoundOut.PlaybackState">
            <summary>
                Gets the current <see cref="T:CSCore.SoundOut.PlaybackState"/> of the playback.
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.DirectSoundOut.Volume">
            <summary>
                The volume of the playback. Valid values are from 0.0 (0%) to 1.0 (100%).
            </summary>
            <remarks>
                Note that the if you for example set a volume of 33% => 0.33, the actual volume will be something like 0.33039999.
            </remarks>
        </member>
        <member name="P:CSCore.SoundOut.DirectSoundOut.WaveSource">
            <summary>
                The currently initialized source.
                To change the WaveSource property, call <see cref="M:CSCore.SoundOut.DirectSoundOut.Initialize(CSCore.IWaveSource)"/>.
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_1M08">
            <summary>
            11. 025 kHz, Mono, 8-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_1S08">
            <summary>
            11. 025 kHz, Stereo, 8-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_1M16">
            <summary>
            11. 025 kHz, Mono, 16-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_1S16">
            <summary>
            11. 025 kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_2M08">
            <summary>
            22. 05 kHz, Mono, 8-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_2S08">
            <summary>
            22. 05 kHz, Stereo, 8-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_2M16">
            <summary>
            22. 05 kHz, Mono, 16-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_2S16">
            <summary>
            22. 05 kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_4M08">
            <summary>
            44. 1 kHz, Mono, 8-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_4S08">
            <summary>
            44. 1 kHz, Stereo, 8-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_4M16">
            <summary>
            44. 1 kHz, Mono, 16-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_4S16">
            <summary>
            44. 1 kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_44M08">
            <summary>
            44. 1 kHz, Mono, 8-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_44S08">
            <summary>
            44. 1 kHz, Stereo, 8-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_44M16">
            <summary>
            44. 1 kHz, Mono, 16-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_44S16">
            <summary>
            44. 1 kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_48M08">
            <summary>
            48 kHz, Mono, 8-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_48S08">
            <summary>
            48 kHz, Stereo, 8-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_48M16">
            <summary>
            48 kHz, Mono, 16-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_48S16">
            <summary>
            48 kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_96M08">
            <summary>
            96 kHz, Mono, 8-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_96S08">
            <summary>
            96 kHz, Stereo, 8-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_96M16">
            <summary>
            96 kHz, Mono, 16-bit
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveCapsFormats.WAVE_FORMAT_96S16">
            <summary>
            96 kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="T:CSCore.SoundOut.MMInterop.WaveHeaderFlags">
            <summary>
            WaveHeaderFlags: http://msdn.microsoft.com/en-us/library/aa909814.aspx#1
            </summary>
        </member>
        <member name="T:CSCore.SoundOut.PlaybackStoppedEventArgs">
            <summary>
                Provides data for the <see cref="E:CSCore.SoundOut.ISoundOut.Stopped"/> event.
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.PlaybackStoppedEventArgs.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.SoundOut.PlaybackStoppedEventArgs"/> class.
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.PlaybackStoppedEventArgs.#ctor(System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.SoundOut.PlaybackStoppedEventArgs"/> class.
            </summary>
            <param name="exception">The associated exception. Can be null.</param>
        </member>
        <member name="P:CSCore.SoundOut.PlaybackStoppedEventArgs.HasError">
            <summary>
                Gets a value which indicates whether the playback stopped due to an error. True means that that the playback
                stopped due to an error. False means that the playback did not stop due to an error.
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.PlaybackStoppedEventArgs.Exception">
            <summary>
                Gets the associated <see cref="P:CSCore.SoundOut.PlaybackStoppedEventArgs.Exception"/> which caused the playback to stop.
            </summary>
            <value>Can be null.</value>
        </member>
        <member name="T:CSCore.SoundOut.WasapiOut">
            <summary>
                Provides audioplayback through Wasapi.
                Minimum supported OS: Windows Vista (see <see cref="P:CSCore.SoundOut.WasapiOut.IsSupportedOnCurrentPlatform"/> property).
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.WasapiOut.#ctor">
            <summary>
                Initializes an new instance of <see cref="T:CSCore.SoundOut.WasapiOut"/> class.
                EventSyncContext = SynchronizationContext.Current.
                PlaybackThreadPriority = AboveNormal.
                Latency = 100ms.
                EventSync = False.
                ShareMode = Shared.
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.WasapiOut.#ctor(System.Boolean,CSCore.CoreAudioAPI.AudioClientShareMode,System.Int32)">
            <summary>
                Initializes an new instance of <see cref="T:CSCore.SoundOut.WasapiOut"/> class.
                EventSyncContext = SynchronizationContext.Current.
                PlaybackThreadPriority = AboveNormal.
            </summary>
            <param name="eventSync">True, to use eventsynchronization instead of a simple loop and sleep behavior.</param>
            <param name="shareMode">
                Specifies how to open the audio device. Note that if exclusive mode is used, only one single
                playback for the specified device is possible at once.
            </param>
            <param name="latency">Latency of the playback specified in milliseconds.</param>
        </member>
        <member name="M:CSCore.SoundOut.WasapiOut.#ctor(System.Boolean,CSCore.CoreAudioAPI.AudioClientShareMode,System.Int32,System.Threading.ThreadPriority)">
            <summary>
                Initializes an new instance of <see cref="T:CSCore.SoundOut.WasapiOut"/> class.
                EventSyncContext = SynchronizationContext.Current.
            </summary>
            <param name="eventSync">True, to use eventsynchronization instead of a simple loop and sleep behavior.</param>
            <param name="shareMode">
                Specifies how to open the audio device. Note that if exclusive mode is used, only one single
                playback for the specified device is possible at once.
            </param>
            <param name="latency">Latency of the playback specified in milliseconds.</param>
            <param name="playbackThreadPriority">
                ThreadPriority of the playbackthread which runs in background and feeds the device
                with data.
            </param>
        </member>
        <member name="M:CSCore.SoundOut.WasapiOut.#ctor(System.Boolean,CSCore.CoreAudioAPI.AudioClientShareMode,System.Int32,System.Threading.ThreadPriority,System.Threading.SynchronizationContext)">
            <summary>
                Initializes an new instance of <see cref="T:CSCore.SoundOut.WasapiOut"/> class.
            </summary>
            <param name="eventSync">True, to use eventsynchronization instead of a simple loop and sleep behavior.</param>
            <param name="shareMode">
                Specifies how to open the audio device. Note that if exclusive mode is used, only one single
                playback for the specified device is possible at once.
            </param>
            <param name="latency">Latency of the playback specified in milliseconds.</param>
            <param name="playbackThreadPriority">
                <see cref="T:System.Threading.ThreadPriority"/> of the playbackthread which runs in background and feeds the device
                with data.
            </param>
            <param name="eventSyncContext">
                The synchronizationcontext which is used to raise any events like the "Stopped"-event.
                If the passed value is not null, the events will be called async through the <see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)"/> method.
            </param>
        </member>
        <member name="M:CSCore.SoundOut.WasapiOut.Initialize(CSCore.IWaveSource)">
            <summary>
                Initializes WasapiOut and prepares all resources for playback.
                Note that properties like <see cref="P:CSCore.SoundOut.WasapiOut.Device"/>, <see cref="P:CSCore.SoundOut.WasapiOut.Latency"/>,... won't affect WasapiOut after calling
                <see cref="M:CSCore.SoundOut.WasapiOut.Initialize(CSCore.IWaveSource)"/>.
            </summary>
            <param name="source">The source to prepare for playback.</param>
        </member>
        <member name="M:CSCore.SoundOut.WasapiOut.Play">
            <summary>
                Starts the playback.
                Note: <see cref="M:CSCore.SoundOut.WasapiOut.Initialize(CSCore.IWaveSource)"/> has to get called before calling Play.
                If <see cref="P:CSCore.SoundOut.WasapiOut.PlaybackState"/> is <see cref="F:CSCore.SoundOut.PlaybackState.Paused"/>, <see cref="M:CSCore.SoundOut.WasapiOut.Resume"/> will be
                called automatically.
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.WasapiOut.Stop">
            <summary>
                Stops the playback and frees all allocated resources.
                After calling the caller has to call <see cref="M:CSCore.SoundOut.WasapiOut.Initialize(CSCore.IWaveSource)"/> again before another playback can be started.
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.WasapiOut.Resume">
            <summary>
                Resumes the paused playback.
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.WasapiOut.Pause">
            <summary>
                Pauses the playback.
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.WasapiOut.Dispose">
            <summary>
                Stops the playback (if playing) and cleans up all used resources.
            </summary>
        </member>
        <member name="M:CSCore.SoundOut.WasapiOut.Dispose(System.Boolean)">
            <summary>
            Disposes and stops the <see cref="T:CSCore.SoundOut.WasapiOut"/> instance.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:CSCore.SoundOut.WasapiOut.Finalize">
            <summary>
            Destructor which calls the <see cref="M:CSCore.SoundOut.WasapiOut.Dispose(System.Boolean)"/> method.
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.WasapiOut.IsSupportedOnCurrentPlatform">
            <summary>
                Gets a value which indicates whether Wasapi is supported on the current Platform. True means that the current
                platform supports <see cref="T:CSCore.SoundOut.WasapiOut"/>; False means that the current platform does not support
                <see cref="T:CSCore.SoundOut.WasapiOut"/>.
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.WasapiOut.Device">
            <summary>
                Gets or sets the <see cref="P:CSCore.SoundOut.WasapiOut.Device"/> which should be used for playback.
                The <see cref="P:CSCore.SoundOut.WasapiOut.Device"/> property has to be set before initializing. The systems default playback device is used
                as default value
                of the <see cref="P:CSCore.SoundOut.WasapiOut.Device"/> property.
            </summary>
            <remarks>
                Make sure to set only activated render devices.
            </remarks>
        </member>
        <member name="P:CSCore.SoundOut.WasapiOut.DebuggingId">
            <summary>
                Gets a random ID based on internal audioclients memory address for debugging purposes.
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.WasapiOut.Latency">
            <summary>
                Gets or sets the latency of the playback specified in milliseconds.
            </summary>
        </member>
        <member name="E:CSCore.SoundOut.WasapiOut.Stopped">
            <summary>
                Occurs when the playback stops.
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.WasapiOut.PlaybackState">
            <summary>
                Gets the current <see cref="T:CSCore.SoundOut.PlaybackState"/> of the playback.
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.WasapiOut.Volume">
            <summary>
                Gets or sets the volume of the playback.
                Valid values are in the range from 0.0 (0%) to 1.0 (100%).
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.WasapiOut.WaveSource">
            <summary>
                The currently initialized source.
                To change the WaveSource property, call <see cref="M:CSCore.SoundOut.WasapiOut.Initialize(CSCore.IWaveSource)"/>.
            </summary>
            <remarks>
                The value of the WaveSource might not be the value which was passed to the <see cref="M:CSCore.SoundOut.WasapiOut.Initialize(CSCore.IWaveSource)"/> method, because
                WasapiOut (depending on the waveformat of the source) has to use a DmoResampler.
            </remarks>
        </member>
        <member name="T:CSCore.Streams.CachedSoundSource">
            <summary>
            Cached wave source.
            </summary>
        </member>
        <member name="M:CSCore.Streams.CachedSoundSource.#ctor(CSCore.IWaveSource)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Streams.CachedSoundSource"/> class.
            </summary>
            <param name="source">Source which will be copied to a cache.</param>
        </member>
        <member name="M:CSCore.Streams.CachedSoundSource.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads a sequence of bytes from the cache and advances the position within the cache by the
                number of bytes read.
            </summary>
            <param name="buffer">
                An array of bytes. When this method returns, the <paramref name="buffer" /> contains the specified
                byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> +
                <paramref name="count" /> - 1) replaced by the bytes read from the cache.
            </param>
            <param name="offset">
                The zero-based byte offset in the <paramref name="buffer" /> at which to begin storing the data
                read from the cache.
            </param>
            <param name="count">The maximum number of bytes to read from the cache.</param>
            <returns>The total number of bytes read into the <paramref name="buffer"/>.</returns>
        </member>
        <member name="M:CSCore.Streams.CachedSoundSource.Dispose">
            <summary>
            Disposes the cache.
            </summary>
        </member>
        <member name="M:CSCore.Streams.CachedSoundSource.Dispose(System.Boolean)">
            <summary>
            Disposes the internal used cache. 
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:CSCore.Streams.CachedSoundSource.WaveFormat">
            <summary>
            Gets the Waveformat of the data stored in the cache.
            </summary>
        </member>
        <member name="P:CSCore.Streams.CachedSoundSource.Position">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
        <member name="P:CSCore.Streams.CachedSoundSource.Length">
            <summary>
            Gets the amount of bytes stored in the cache.
            </summary>
        </member>
        <member name="T:CSCore.Streams.Effects.ChorusPhase">
            <summary>
            Default value is Phase90 (used for <see cref="P:CSCore.Streams.Effects.DmoChorusEffect.Phase"/>).
            </summary>
        </member>
        <member name="F:CSCore.Streams.Effects.ChorusPhase.Phase180">
            <summary>
            180° Phase.
            </summary>
        </member>
        <member name="F:CSCore.Streams.Effects.ChorusPhase.Phase90">
            <summary>
            90° Phase. 
            Default value for <see cref="P:CSCore.Streams.Effects.DmoChorusEffect.Phase"/>. 
            </summary>
        </member>
        <member name="F:CSCore.Streams.Effects.ChorusPhase.PhaseZero">
            <summary>
            0° Phase.
            </summary>
        </member>
        <member name="F:CSCore.Streams.Effects.ChorusPhase.PhaseNegative90">
            <summary>
            -90° Phase.
            </summary>
        </member>
        <member name="F:CSCore.Streams.Effects.ChorusPhase.PhaseNegative180">
            <summary>
            -180° Phase.
            </summary>
        </member>
        <member name="T:CSCore.Streams.Effects.ChorusWaveform">
            <summary>
            Default value is WaveformSin (used for <see cref="P:CSCore.Streams.Effects.DmoChorusEffect.Waveform"/>).
            </summary>
        </member>
        <member name="F:CSCore.Streams.Effects.ChorusWaveform.WaveformSin">
            <summary>
            Sine 
            Default value for <see cref="P:CSCore.Streams.Effects.DmoChorusEffect.Waveform"/>.
            </summary>
        </member>
        <member name="T:CSCore.Streams.Effects.DmoChorusEffect">
            <summary>
            Chorus Effect.
            </summary>
        </member>
        <member name="T:CSCore.Streams.Effects.DmoEffectBase`2">
            <summary>
            Base class for all DMO effects.
            </summary>
            <typeparam name="TDXEffect">DMO effect itself.</typeparam>
            <typeparam name="TDXEffectStruct">Parameter struct of the DMO effect.</typeparam>
        </member>
        <member name="M:CSCore.Streams.Effects.DmoEffectBase`2.#ctor(CSCore.IWaveSource)">
            <summary>
            Creates a new instance of <see cref="T:CSCore.Streams.Effects.DmoEffectBase`2"/> class.
            </summary>
            <param name="source">The base source, which feeds the effect with data.</param>
        </member>
        <member name="M:CSCore.Streams.Effects.DmoEffectBase`2.CreateComObject">
            <summary>
            Returns a new instance of the DMO effect.
            </summary>
            <returns>DMO effect.</returns>
        </member>
        <member name="M:CSCore.Streams.Effects.DmoEffectBase`2.CreateMediaObject(CSCore.WaveFormat,CSCore.WaveFormat)">
            <summary>
            Creates an MediaObject from the effect DMO.
            </summary>
        </member>
        <member name="M:CSCore.Streams.Effects.DmoEffectBase`2.GetOutputFormat">
            <summary>
            Gets the output format of the effect.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSCore.Streams.Effects.DmoEffectBase`2.SetValue``1(System.String,``0)">
            <summary>
            Sets the value for one of the effects parameter and updates the effect.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldname"></param>
            <param name="value"></param>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoEffectBase`2.Effect">
            <summary>
            Gets the underlying effect.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoEffectBase`2.IsEnabled">
            <summary>
            Gets or sets whether the effect is enabled.
            </summary>
        </member>
        <member name="M:CSCore.Streams.Effects.DmoChorusEffect.#ctor(CSCore.IWaveSource)">
            <summary>
            Creates a new instance of the <see cref="T:CSCore.Streams.Effects.DmoChorusEffect"/> class.
            </summary>
            <param name="source">The base source, which feeds the effect with data.</param>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoChorusEffect.Delay">
            <summary>
            Number of milliseconds the input is delayed before it is played back, in the range from 0 to 20. The default value is 16 ms.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoChorusEffect.Depth">
            <summary>
            Percentage by which the delay time is modulated by the low-frequency oscillator, in hundredths of a percentage point. Must be in the range from 0 through 100. The default value is 10.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoChorusEffect.Feedback">
            <summary>
            Percentage of output signal to feed back into the effect's input, in the range from -99 to 99. The default value is 25.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoChorusEffect.Frequency">
            <summary>
            Frequency of the LFO, in the range from 0 to 10. The default value is 1.1.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoChorusEffect.Waveform">
            <summary>
            Waveform shape of the LFO. By default, the waveform is a sine.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoChorusEffect.Phase">
            <summary>
            Phase differential between left and right LFOs. The default value is Phase90.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoChorusEffect.WetDryMix">
            <summary>
            Ratio of wet (processed) signal to dry (unprocessed) signal. Must be in the range from 0 through 100 (all wet). The default value is 50.
            </summary>
        </member>
        <member name="T:CSCore.Streams.Effects.DmoCompressorEffect">
            <summary>
            Compressor Effect.
            </summary>
        </member>
        <member name="M:CSCore.Streams.Effects.DmoCompressorEffect.#ctor(CSCore.IWaveSource)">
            <summary>
            Creates a new instance of the <see cref="T:CSCore.Streams.Effects.DmoCompressorEffect"/> class.
            </summary>
            <param name="source">The base source, which feeds the effect with data.</param>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoCompressorEffect.Attack">
            <summary>
            Time before compression reaches its full value, in the range from 0.01 ms to 500 ms. The default value is 10 ms.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoCompressorEffect.Gain">
            <summary>
            Output gain of signal after compression, in the range from -60 dB to 60 dB. The default value is 0 dB.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoCompressorEffect.Predelay">
            <summary>
            Time after <see cref="P:CSCore.Streams.Effects.DmoCompressorEffect.Threshold"/> is reached before attack phase is started, in milliseconds, in the range from 0 ms to 4 ms. The default value is 4 ms.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoCompressorEffect.Ratio">
            <summary>
            Compression ratio, in the range from 1 to 100. The default value is 3, which means 3:1 compression.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoCompressorEffect.Release">
            <summary>
            Speed at which compression is stopped after input drops below fThreshold, in the range from 50 ms to 3000 ms. The default value is 200 ms.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoCompressorEffect.Threshold">
            <summary>
            Point at which compression begins, in decibels, in the range from -60 dB to 0 dB. The default value is -20 dB.
            </summary>
        </member>
        <member name="T:CSCore.Streams.Effects.DmoDistortionEffect">
            <summary>
            DistortionEffect.
            </summary>
        </member>
        <member name="M:CSCore.Streams.Effects.DmoDistortionEffect.#ctor(CSCore.IWaveSource)">
            <summary>
            Creates a new instance of the <see cref="T:CSCore.Streams.Effects.DmoDistortionEffect"/> class.
            </summary>
            <param name="source">The base source, which feeds the effect with data.</param>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoDistortionEffect.Gain">
            <summary>
            Amount of signal change after distortion, in the range from -60 dB through 0 dB. The default value is -18 dB.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoDistortionEffect.Edge">
            <summary>
            Percentage of distortion intensity, in the range in the range from 0 % through 100 %. The default value is 15 percent.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoDistortionEffect.PostEQCenterFrequency">
            <summary>
            Center frequency of harmonic content addition, in the range from 100 Hz through 8000 Hz. The default value is 2400 Hz.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoDistortionEffect.PostEQBandwidth">
            <summary>
            Width of frequency band that determines range of harmonic content addition, in the range from 100 Hz through 8000 Hz. The default value is 2400 Hz.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoDistortionEffect.PreLowpassCutoff">
            <summary>
            Filter cutoff for high-frequency harmonics attenuation, in the range from 100 Hz through 8000 Hz. The default value is 8000 Hz.
            </summary>
        </member>
        <member name="T:CSCore.Streams.Effects.DmoEchoEffect">
            <summary>
            Echo Effect.
            </summary>
        </member>
        <member name="M:CSCore.Streams.Effects.DmoEchoEffect.#ctor(CSCore.IWaveSource)">
            <summary>
            Creates a new instance of the <see cref="T:CSCore.Streams.Effects.DmoEchoEffect"/> class.
            </summary>
            <param name="source">The base source, which feeds the effect with data.</param>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoEchoEffect.WetDryMix">
            <summary>
            Ratio of wet (processed) signal to dry (unprocessed) signal. Must be in the range from
            0 through 100 (all wet). The default value is 50.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoEchoEffect.Feedback">
            <summary>
            Percentage of output fed back into input, in the range from 0
            through 100. The default value is 50.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoEchoEffect.LeftDelay">
            <summary>
            Delay for left channel, in milliseconds, in the range from 1
            through 2000. The default value is 500 ms.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoEchoEffect.RightDelay">
            <summary>
            Delay for right channel, in milliseconds, in the range from 1
            through 2000. The default value is 500 ms.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoEchoEffect.PanDelay">
            <summary>
            Value that specifies whether to swap left and right delays with each successive echo.
            The default value is false, meaning no swap.
            </summary>
        </member>
        <member name="T:CSCore.Streams.Effects.DmoFlangerEffect">
            <summary>
            Flanger Effect.
            </summary>
        </member>
        <member name="M:CSCore.Streams.Effects.DmoFlangerEffect.#ctor(CSCore.IWaveSource)">
            <summary>
            Creates a new instance of the <see cref="T:CSCore.Streams.Effects.DmoFlangerEffect"/> class.
            </summary>
            <param name="source">The base source, which feeds the effect with data.</param>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoFlangerEffect.WetDryMix">
            <summary>
            Gets or sets the ratio of wet (processed) signal to dry (unprocessed) signal. Must be in the range from 0 through 100 (all wet). The default value is 50.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoFlangerEffect.Depth">
            <summary>
            Gets or sets the percentage by which the delay time is modulated by the low-frequency oscillator (LFO), in hundredths of a percentage point. Must be in the range from 0 through 100. The default value is 100.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoFlangerEffect.Feedback">
            <summary>
            Gets or sets the percentage of output signal to feed back into the effect's input, in the range from -99 to 99. The default value is -50.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoFlangerEffect.Frequency">
            <summary>
            Gets or sets the frequency of the LFO, in the range from 0 to 10. The default value is 0.25.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoFlangerEffect.Waveform">
            <summary>
            Gets or sets the waveform shape of the LFO. By default, the waveform is a sine.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoFlangerEffect.Delay">
            <summary>
            Gets or sets the number of milliseconds the input is delayed before it is played back, in the range from 0ms to 4ms. The default value is 2 ms.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoFlangerEffect.Phase">
            <summary>
            Phase differential between left and right LFOs. The default value is <see cref="F:CSCore.Streams.Effects.FlangerPhase.PhaseZero"/>.
            </summary>
        </member>
        <member name="T:CSCore.Streams.Effects.DmoGargleEffect">
            <summary>
            Gargle Effect.
            </summary>
        </member>
        <member name="M:CSCore.Streams.Effects.DmoGargleEffect.#ctor(CSCore.IWaveSource)">
            <summary>
            Creates a new instance of the <see cref="T:CSCore.Streams.Effects.DmoGargleEffect"/> class.
            </summary>
            <param name="source">The base source, which feeds the effect with data.</param>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoGargleEffect.RateHz">
            <summary>
            Gets or sets the rate of modulation, in Hertz. Must be in the range from 20Hz through 1000Hz. The default value is 20Hz.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoGargleEffect.WaveShape">
            <summary>
            Gets or sets the shape of the modulation waveform.
            </summary>
        </member>
        <member name="T:CSCore.Streams.Effects.DmoWavesReverbEffect">
            <summary>
            WavesReverb Effect.
            </summary>
        </member>
        <member name="M:CSCore.Streams.Effects.DmoWavesReverbEffect.#ctor(CSCore.IWaveSource)">
            <summary>
            Creates a new instance of the <see cref="T:CSCore.Streams.Effects.DmoWavesReverbEffect"/> class.
            </summary>
            <param name="source">The base source, which feeds the effect with data.</param>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoWavesReverbEffect.InGain">
            <summary>
            Input gain of signal, in decibels (dB), in the range from -96 dB through 0 dB. The default value is 0 dB.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoWavesReverbEffect.ReverbMix">
            <summary>
            Reverb mix, in dB, in the range from -96 dB through 0 dB. The default value is 0 dB.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoWavesReverbEffect.ReverbTime">
            <summary>
            Reverb time, in milliseconds, in the range from 0.001 through 3000. The default value is 1000.
            </summary>
        </member>
        <member name="P:CSCore.Streams.Effects.DmoWavesReverbEffect.HighFrequencyRTRatio">
            <summary>
            High-frequency reverb time ratio, in the range from 0.001 through 0.999. The default value is 0.001.
            </summary>
        </member>
        <member name="T:CSCore.Streams.Effects.FlangerPhase">
            <summary>
            FlangerPhase. See <see cref="P:CSCore.Streams.Effects.DmoFlangerEffect.Phase"/>.
            </summary>
        </member>
        <member name="F:CSCore.Streams.Effects.FlangerPhase.Phase180">
            <summary>
            180° Phase.
            </summary>
        </member>
        <member name="F:CSCore.Streams.Effects.FlangerPhase.Phase90">
            <summary>
            90° Phase. 
            Default value for <see cref="P:CSCore.Streams.Effects.DmoFlangerEffect.Phase"/>. 
            </summary>
        </member>
        <member name="F:CSCore.Streams.Effects.FlangerPhase.PhaseZero">
            <summary>
            0° Phase.
            </summary>
        </member>
        <member name="F:CSCore.Streams.Effects.FlangerPhase.PhaseNegative90">
            <summary>
            -90° Phase.
            </summary>
        </member>
        <member name="F:CSCore.Streams.Effects.FlangerPhase.PhaseNegative180">
            <summary>
            -180° Phase.
            </summary>
        </member>
        <member name="T:CSCore.Streams.Effects.FlangerWaveform">
            <summary>
            FlangerWaveform. See <see cref="P:CSCore.Streams.Effects.DmoFlangerEffect.Waveform"/>.
            </summary>
        </member>
        <member name="F:CSCore.Streams.Effects.FlangerWaveform.Triangle">
            <summary>
            Triangle.
            </summary>
        </member>
        <member name="F:CSCore.Streams.Effects.FlangerWaveform.Sin">
            <summary>
            Sine. Default value.
            </summary>
        </member>
        <member name="T:CSCore.Streams.Effects.GargleWaveShape">
            <summary>
            Default value is Triangle (used for <see cref="P:CSCore.Streams.Effects.DmoGargleEffect.WaveShape"/>).
            </summary>
        </member>
        <member name="F:CSCore.Streams.Effects.GargleWaveShape.Triangle">
            <summary>
            Default value. 
            </summary>
        </member>
        <member name="T:CSCore.Streams.FadeInOut">
            <summary>
                Provides the ability use an implementation of the <see cref="T:CSCore.Streams.IFadeStrategy"/> interface fade waveform-audio data.
            </summary>
        </member>
        <member name="T:CSCore.SampleSourceBase">
            <summary>
                Base class for most of the sample sources.
            </summary>
        </member>
        <member name="T:CSCore.ISampleSource">
            <summary>
                Defines the base for all audio streams which provide samples instead of raw byte data.
            </summary>
        </member>
        <member name="M:CSCore.ISampleSource.Read(System.Single[],System.Int32,System.Int32)">
            <summary>
                Reads a sequence of samples from the <see cref="T:CSCore.ISampleSource"/> and advances the position within the stream by
                the
                number of samples read.
            </summary>
            <param name="buffer">
                An array of floats. When this method returns, the <paramref name="buffer"/> contains the specified
                float array with the values between <paramref name="offset"/> and (<paramref name="offset"/> +
                <paramref name="count"/> - 1) replaced by the floats read from the current source.
            </param>
            <param name="offset">
                The zero-based offset in the <paramref name="buffer"/> at which to begin storing the data
                read from the current stream.
            </param>
            <param name="count">The maximum number of samples to read from the current source.</param>
            <returns>The total number of samples read into the buffer.</returns>
        </member>
        <member name="F:CSCore.SampleSourceBase.Source">
            <summary>
                Underlying sample source.
            </summary>
        </member>
        <member name="M:CSCore.SampleSourceBase.#ctor(CSCore.IWaveStream)">
            <summary>
                Creates a new instance of the <see cref="T:CSCore.SampleSourceBase"/> class.
            </summary>
            <param name="source">Underlying base source which provides audio data.</param>
        </member>
        <member name="M:CSCore.SampleSourceBase.Read(System.Single[],System.Int32,System.Int32)">
            <summary>
                Reads a sequence of samples from the <see cref="T:CSCore.SampleSourceBase"/> and advances the position within the stream by
                the number of samples read.
            </summary>
            <param name="buffer">
                An array of floats. When this method returns, the <paramref name="buffer"/> contains the specified
                float array with the values between <paramref name="offset"/> and (<paramref name="offset"/> +
                <paramref name="count"/> - 1) replaced by the floats read from the current source.
            </param>
            <param name="offset">
                The zero-based offset in the <paramref name="buffer"/> at which to begin storing the data
                read from the current stream.
            </param>
            <param name="count">The maximum number of samples to read from the current source.</param>
            <returns>The total number of samples read into the buffer.</returns>
        </member>
        <member name="M:CSCore.SampleSourceBase.Dispose">
            <summary>
                Disposes the <see cref="T:CSCore.SampleSourceBase"/> and the underlying <see cref="F:CSCore.SampleSourceBase.Source"/>.
            </summary>
        </member>
        <member name="M:CSCore.SampleSourceBase.Dispose(System.Boolean)">
            <summary>
                Disposes the <see cref="T:CSCore.SampleSourceBase"/> and the underlying <see cref="F:CSCore.SampleSourceBase.Source"/>.
            </summary>
            <param name="disposing">
                True to release both managed and unmanaged resources; false to release only unmanaged
                resources.
            </param>
        </member>
        <member name="M:CSCore.SampleSourceBase.Finalize">
            <summary>
                Destructor which calls <see cref="M:CSCore.SampleSourceBase.Dispose(System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:CSCore.SampleSourceBase.WaveFormat">
            <summary>
                Gets the <see cref="P:CSCore.IWaveStream.WaveFormat"/> of the waveform-audio data.
            </summary>
        </member>
        <member name="P:CSCore.SampleSourceBase.Position">
            <summary>
                Gets or sets the position in samples.
            </summary>
        </member>
        <member name="P:CSCore.SampleSourceBase.Length">
            <summary>
                Gets the length in samples.
            </summary>
        </member>
        <member name="M:CSCore.Streams.FadeInOut.#ctor(CSCore.IWaveStream)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.Streams.FadeInOut"/> class.
            </summary>
            <param name="source">The underlying source to use.</param>
        </member>
        <member name="M:CSCore.Streams.FadeInOut.Read(System.Single[],System.Int32,System.Int32)">
            <summary>
                Reads a sequence of samples from the <see cref="T:CSCore.Streams.FadeInOut"/> class and advances the position within the stream by
                the number of samples read.
            </summary>
            <param name="buffer">
                An array of floats. When this method returns, the <paramref name="buffer"/> contains the specified
                float array with the values between <paramref name="offset"/> and (<paramref name="offset"/> +
                <paramref name="count"/> - 1) replaced by the floats read from the current source.
            </param>
            <param name="offset">
                The zero-based offset in the <paramref name="buffer"/> at which to begin storing the data
                read from the current stream.
            </param>
            <param name="count">The maximum number of samples to read from the current source.</param>
            <returns>The total number of samples read into the buffer.</returns>
        </member>
        <member name="P:CSCore.Streams.FadeInOut.FadeStrategy">
            <summary>
                Gets or sets the fade strategy to use.
            </summary>
        </member>
        <member name="T:CSCore.Streams.IFadeStrategy">
            <summary>
                Provides a mechanism for fading in/out audio.
            </summary>
            <remarks>
                The <see cref="P:CSCore.Streams.IFadeStrategy.SampleRate"/>- and the <see cref="P:CSCore.Streams.IFadeStrategy.Channels"/>-property must be set before the
                <see cref="T:CSCore.Streams.IFadeStrategy"/> can be used.
            </remarks>
        </member>
        <member name="M:CSCore.Streams.IFadeStrategy.ApplyFading(System.Single[],System.Int32,System.Int32)">
            <summary>
                Applies the fading algorithm to the waveform-audio data.
            </summary>
            <param name="buffer">Float-array which contains IEEE-Float samples.</param>
            <param name="offset">Zero-based offset of the <paramref name="buffer" />.</param>
            <param name="count">The number of samples, the fading algorithm has to be applied on.</param>
        </member>
        <member name="M:CSCore.Streams.IFadeStrategy.StartFading(System.Nullable{System.Single},System.Single,System.TimeSpan)">
            <summary>
                Starts fading <paramref name="from" /> a specified volume <paramref name="to" /> another volume.
            </summary>
            <param name="from">
                The start volume in the range from 0.0 to 1.0. If no value gets specified, the default volume will be used.
                The default volume is typically 100% or the current volume.
            </param>
            <param name="to">The target volume in the range from 0.0 to 1.0.</param>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:CSCore.Streams.IFadeStrategy.StartFading(System.Nullable{System.Single},System.Single,System.Double)">
            <summary>
                Starts fading <paramref name="from" /> a specified volume <paramref name="to" /> another volume.
            </summary>
            <param name="from">
                The start volume in the range from 0.0 to 1.0. If no value gets specified, the default volume will be used.
                The default volume is typically 100% or the current volume.
            </param>
            <param name="to">The target volume in the range from 0.0 to 1.0.</param>
            <param name="duration">The duration in milliseconds.</param>
        </member>
        <member name="M:CSCore.Streams.IFadeStrategy.StopFading">
            <summary>
                Stops the fading.
            </summary>
        </member>
        <member name="P:CSCore.Streams.IFadeStrategy.IsFading">
            <summary>
                Gets a value which indicates whether the current volume equals the target volume. If not, the
                <see cref="P:CSCore.Streams.IFadeStrategy.IsFading"/> property returns false.
            </summary>
        </member>
        <member name="P:CSCore.Streams.IFadeStrategy.SampleRate">
            <summary>
                Gets or sets the sample rate to use.
            </summary>
        </member>
        <member name="P:CSCore.Streams.IFadeStrategy.Channels">
            <summary>
                Gets or sets the number of channels.
            </summary>
        </member>
        <member name="E:CSCore.Streams.IFadeStrategy.FadingFinished">
            <summary>
                Occurs when the fading process has reached its target volume.
            </summary>
        </member>
        <member name="T:CSCore.Streams.LinearFadeStrategy">
            <summary>
                Provides a linear fading algorithm.
            </summary>
        </member>
        <member name="M:CSCore.Streams.LinearFadeStrategy.StartFading(System.Nullable{System.Single},System.Single,System.TimeSpan)">
            <summary>
                Starts fading <paramref name="from" /> a specified volume <paramref name="to" /> another volume.
            </summary>
            <param name="from">
                The start volume in the range from 0.0 to 1.0. If no value gets specified, the default volume will be used.
                The default volume is typically 100% or the current volume.
            </param>
            <param name="to">The target volume in the range from 0.0 to 1.0.</param>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:CSCore.Streams.LinearFadeStrategy.StartFading(System.Nullable{System.Single},System.Single,System.Double)">
            <summary>
                Starts fading <paramref name="from" /> a specified volume <paramref name="to" /> another volume.
            </summary>
            <param name="from">
                The start volume in the range from 0.0 to 1.0. If no value gets specified, the default volume will be used.
                The default volume is typically 100% or the current volume.
            </param>
            <param name="to">The target volume in the range from 0.0 to 1.0.</param>
            <param name="duration">The duration in milliseconds.</param>
        </member>
        <member name="M:CSCore.Streams.LinearFadeStrategy.StopFading">
            <summary>
                Stops the fading.
            </summary>
        </member>
        <member name="M:CSCore.Streams.LinearFadeStrategy.ApplyFading(System.Single[],System.Int32,System.Int32)">
            <summary>
                Applies the fading algorithm to the <paramref name="buffer" />.
            </summary>
            <param name="buffer">Float-array which contains IEEE-Float samples.</param>
            <param name="offset">Zero-based offset of the <paramref name="buffer"/>.</param>
            <param name="count">The number of samples, the fading algorithm has to be applied on.</param>
        </member>
        <member name="P:CSCore.Streams.LinearFadeStrategy.CurrentVolume">
            <summary>
                Gets the current volume.
            </summary>
        </member>
        <member name="P:CSCore.Streams.LinearFadeStrategy.TargetVolume">
            <summary>
                Gets the target volume.
            </summary>
        </member>
        <member name="E:CSCore.Streams.LinearFadeStrategy.FadingFinished">
            <summary>
                Occurs when the fading process has reached its target volume.
            </summary>
        </member>
        <member name="P:CSCore.Streams.LinearFadeStrategy.IsFading">
            <summary>
                Gets a value which indicates whether the <see cref="T:CSCore.Streams.LinearFadeStrategy"/> class is fading.
                True means that the <see cref="T:CSCore.Streams.LinearFadeStrategy"/> class is fading audio data.
                False means that the <see cref="P:CSCore.Streams.LinearFadeStrategy.CurrentVolume"/> equals the <see cref="P:CSCore.Streams.LinearFadeStrategy.TargetVolume"/>.
            </summary>
        </member>
        <member name="P:CSCore.Streams.LinearFadeStrategy.SampleRate">
            <summary>
                Gets or sets the sample rate to use.
            </summary>
        </member>
        <member name="P:CSCore.Streams.LinearFadeStrategy.Channels">
            <summary>
                Gets or sets the number of channels.
            </summary>
        </member>
        <member name="T:CSCore.Streams.PeakMeter">
            <summary>
            Represents a peak meter.
            </summary>
        </member>
        <member name="M:CSCore.Streams.PeakMeter.#ctor(CSCore.IWaveStream)">
            <summary>
            Creates a new instance of the <see cref="T:CSCore.Streams.PeakMeter"/> class.
            </summary>
        </member>
        <member name="M:CSCore.Streams.PeakMeter.Read(System.Single[],System.Int32,System.Int32)">
            <summary>
                Reads a sequence of samples from the <see cref="T:CSCore.SampleSourceBase"/> and advances the position within the stream by the
                number of samples read.
            </summary>
            <param name="buffer">
                An array of floats. When this method returns, the <paramref name="buffer"/> contains the specified
                float array with the values between <paramref name="offset"/> and (<paramref name="offset"/> +
                <paramref name="count"/> - 1) replaced by the floats read from the current source.
            </param>
            <param name="offset">
                The zero-based offset in the <paramref name="buffer"/> at which to begin storing the data
                read from the current stream.
            </param>
            <param name="count">The maximum number of samples to read from the current source.</param>
            <returns>The total number of samples read into the buffer.</returns>
        </member>
        <member name="M:CSCore.Streams.PeakMeter.Reset">
            <summary>
            Sets all ChannelPeakValues to zero and resets the amount of processed blocks.
            </summary>
        </member>
        <member name="P:CSCore.Streams.PeakMeter.PeakValue">
            <summary>
            Gets the average value of all <see cref="P:CSCore.Streams.PeakMeter.ChannelPeakValues"/>.
            </summary>
        </member>
        <member name="P:CSCore.Streams.PeakMeter.ChannelPeakValues">
            <summary>
            Gets the peak values for all channels. 
            </summary>
        </member>
        <member name="P:CSCore.Streams.PeakMeter.Interval">
            <summary>
            Gets or sets the interval at which to raise the <see cref="E:CSCore.Streams.PeakMeter.PeakCalculated"/> event. 
            The interval is specified in milliseconds. 
            </summary>
        </member>
        <member name="E:CSCore.Streams.PeakMeter.PeakCalculated">
            <summary>
            Event which gets raised when a new peak value is available. 
            </summary>
        </member>
        <member name="T:CSCore.Streams.SynchronizedWaveSource`1">
            <summary>
                A thread-safe (synchronized) wrapper around the specified <see cref="T:CSCore.IWaveSource"/> object.
            </summary>
        </member>
        <member name="T:CSCore.WaveAggregatorBase">
            <summary>
                Base class for all wave aggregators.
            </summary>
        </member>
        <member name="M:CSCore.WaveAggregatorBase.#ctor">
            <summary>
                Creates a new instance of WaveAggregatorBase.
            </summary>
        </member>
        <member name="M:CSCore.WaveAggregatorBase.#ctor(CSCore.IWaveSource)">
            <summary>
                Creates a new instance of WaveAggregatorBase.
            </summary>
            <param name="baseStream">Underlying base stream.</param>
        </member>
        <member name="M:CSCore.WaveAggregatorBase.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads a sequence of bytes from the <see cref="P:CSCore.WaveAggregatorBase.BaseStream"/> and advances the position within the stream by the
                number of bytes read.
            </summary>
            <param name="buffer">
                An array of bytes. When this method returns, the <paramref name="buffer"/> contains the specified
                byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> +
                <paramref name="count"/> - 1) replaced by the bytes read from the current source.
            </param>
            <param name="offset">
                The zero-based byte offset in the <paramref name="buffer"/> at which to begin storing the data
                read from the current stream.
            </param>
            <param name="count">The maximum number of bytes to read from the current source.</param>
            <returns>The total number of bytes read into the buffer.</returns>
        </member>
        <member name="M:CSCore.WaveAggregatorBase.Dispose">
            <summary>
                Disposes the source and releases all allocated resources.
            </summary>
        </member>
        <member name="M:CSCore.WaveAggregatorBase.Dispose(System.Boolean)">
            <summary>
                Disposes the <see cref="P:CSCore.WaveAggregatorBase.BaseStream"/> and releases all allocated resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:CSCore.WaveAggregatorBase.Finalize">
            <summary>
                Destructor which calls <see cref="M:CSCore.WaveAggregatorBase.Dispose(System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:CSCore.WaveAggregatorBase.DisposeBaseSource">
            <summary>
                Gets or sets a value whether to dispose the <see cref="P:CSCore.WaveAggregatorBase.BaseStream"/>
                on calling <see cref="M:CSCore.WaveAggregatorBase.Dispose(System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:CSCore.WaveAggregatorBase.BaseStream">
            <summary>
                Gets or sets the underlying base stream of the WaveAggregator.
            </summary>
        </member>
        <member name="P:CSCore.WaveAggregatorBase.WaveFormat">
            <summary>
                Gets the output WaveFormat.
            </summary>
        </member>
        <member name="P:CSCore.WaveAggregatorBase.Position">
            <summary>
                Gets or sets the position of the source.
            </summary>
        </member>
        <member name="P:CSCore.WaveAggregatorBase.Length">
            <summary>
                Gets the length of the source.
            </summary>
        </member>
        <member name="M:CSCore.Streams.SynchronizedWaveSource`1.#ctor(`0)">
            <summary>
                Initializes a new synchronizedWaveSource of the <see cref="T:CSCore.Streams.SynchronizedWaveSource`1"/> class.
            </summary>
            <param name="baseWaveSource">The <see cref="T:CSCore.IWaveSource"/> object to synchronize.</param>
        </member>
        <member name="M:CSCore.Streams.SynchronizedWaveSource`1.op_Explicit(CSCore.Streams.SynchronizedWaveSource{`0})~`0">
            <summary>
                Defines an explicit conversation of a <see cref="T:CSCore.Streams.SynchronizedWaveSource`1"/> to its
                <see cref="P:CSCore.Streams.SynchronizedWaveSource`1.BaseStream"/>.
            </summary>
            <param name="synchronizedWaveSource">Instance of the <see cref="T:CSCore.Streams.SynchronizedWaveSource`1"/>.</param>
            <returns>The <see cref="P:CSCore.Streams.SynchronizedWaveSource`1.BaseStream"/> of the <paramref name="synchronizedWaveSource"/>.</returns>
        </member>
        <member name="M:CSCore.Streams.SynchronizedWaveSource`1.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads from the underlying <see cref="P:CSCore.WaveAggregatorBase.BaseStream"/>.
            </summary>
            <param name="buffer">Buffer which receives the read data.</param>
            <param name="offset">Zero-based offset offset in the <paramref name="buffer"/> at which to begin storing data.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>Actual number of read bytes.</returns>
        </member>
        <member name="M:CSCore.Streams.SynchronizedWaveSource`1.Dispose(System.Boolean)">
            <summary>
                Disposes the <see cref="P:CSCore.WaveAggregatorBase.BaseStream"/> and releases all allocated resources.
            </summary>
            <param name="disposing">
                True to release both managed and unmanaged resources; false to release only unmanaged
                resources.
            </param>
        </member>
        <member name="P:CSCore.Streams.SynchronizedWaveSource`1.WaveFormat">
            <summary>
                Gets the output WaveFormat of the <see cref="P:CSCore.WaveAggregatorBase.BaseStream"/>.
            </summary>
        </member>
        <member name="P:CSCore.Streams.SynchronizedWaveSource`1.Position">
            <summary>
                Gets or sets the position of the <see cref="P:CSCore.WaveAggregatorBase.BaseStream"/>.
            </summary>
        </member>
        <member name="P:CSCore.Streams.SynchronizedWaveSource`1.Length">
            <summary>
                Gets the length of the underlying <see cref="P:CSCore.WaveAggregatorBase.BaseStream"/>.
            </summary>
        </member>
        <member name="P:CSCore.Streams.SynchronizedWaveSource`1.BaseStream">
            <summary>
                Gets or sets the underlying base stream.
            </summary>
        </member>
        <member name="T:CSCore.Streams.WriteableBufferingSource">
            <summary>
            Buffered WaveSource which overrides the allocated memory after the buffer got full. 
            </summary>
        </member>
        <member name="M:CSCore.Streams.WriteableBufferingSource.#ctor(CSCore.WaveFormat)">
            <summary>
            Creates an new instance of the WriteableBufferingSource class with a default Buffersize of 5 seconds.
            </summary>
            <param name="waveFormat">The WaveFormat of the source.</param>
        </member>
        <member name="M:CSCore.Streams.WriteableBufferingSource.#ctor(CSCore.WaveFormat,System.Int32)">
            <summary>
            Creates an new instance of the WriteableBufferingSource class.
            </summary>
            <param name="waveFormat">The WaveFormat of the source.</param>
            <param name="bufferSize">Buffersize in bytes</param>
        </member>
        <member name="M:CSCore.Streams.BufferSource.#ctor(CSCore.IWaveSource,System.Int32)">
            <param name="source"></param>
            <param name="bufferSize">Buffersize in bytes.</param>
        </member>
        <member name="P:CSCore.Streams.EqFilterEntry.Filters">
            <summary>
            Key: Channel; Value: Filter
            </summary>
        </member>
        <member name="P:CSCore.Streams.SingleBlockReadEventArgs.Samples">
            <summary>
            Do not use this in combination with mono or stereo
            </summary>
        </member>
        <member name="T:CSCore.AudioEncoding">
            <summary>
                Defines all known encoding types. Primary used in the <see cref="T:CSCore.WaveFormat"/> class. See
                <see cref="P:CSCore.WaveFormat.WaveFormatTag"/>.
            </summary>
        </member>
        <member name="F:CSCore.AudioEncoding.Unknown">
            <summary>WAVE_FORMAT_UNKNOWN,	Microsoft Corporation</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.Pcm">
            <summary>WAVE_FORMAT_PCM		Microsoft Corporation</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.Adpcm">
            <summary>WAVE_FORMAT_ADPCM		Microsoft Corporation</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.IeeeFloat">
            <summary>WAVE_FORMAT_IEEE_FLOAT Microsoft Corporation</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.Vselp">
            <summary>WAVE_FORMAT_VSELP		Compaq Computer Corp.</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.IbmCvsd">
            <summary>WAVE_FORMAT_IBM_CVSD	IBM Corporation</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.ALaw">
            <summary>WAVE_FORMAT_ALAW		Microsoft Corporation</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.MuLaw">
            <summary>WAVE_FORMAT_MULAW		Microsoft Corporation</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.Dts">
            <summary>WAVE_FORMAT_DTS		Microsoft Corporation</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.Drm">
            <summary>WAVE_FORMAT_DRM		Microsoft Corporation</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WmaVoice9">
            <summary>WAVE_FORMAT_WMAVOICE9 </summary>
        </member>
        <member name="F:CSCore.AudioEncoding.OkiAdpcm">
            <summary>WAVE_FORMAT_OKI_ADPCM	OKI</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.DviAdpcm">
            <summary>WAVE_FORMAT_DVI_ADPCM	Intel Corporation</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.ImaAdpcm">
            <summary>WAVE_FORMAT_IMA_ADPCM  Intel Corporation</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.MediaspaceAdpcm">
            <summary>WAVE_FORMAT_MEDIASPACE_ADPCM Videologic</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.SierraAdpcm">
            <summary>WAVE_FORMAT_SIERRA_ADPCM Sierra Semiconductor Corp </summary>
        </member>
        <member name="F:CSCore.AudioEncoding.G723Adpcm">
            <summary>WAVE_FORMAT_G723_ADPCM Antex Electronics Corporation </summary>
        </member>
        <member name="F:CSCore.AudioEncoding.DigiStd">
            <summary>WAVE_FORMAT_DIGISTD DSP Solutions, Inc.</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.DigiFix">
            <summary>WAVE_FORMAT_DIGIFIX DSP Solutions, Inc.</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.DialogicOkiAdpcm">
            <summary>WAVE_FORMAT_DIALOGIC_OKI_ADPCM Dialogic Corporation</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.MediaVisionAdpcm">
            <summary>WAVE_FORMAT_MEDIAVISION_ADPCM Media Vision, Inc.</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.CUCodec">
            <summary>WAVE_FORMAT_CU_CODEC Hewlett-Packard Company </summary>
        </member>
        <member name="F:CSCore.AudioEncoding.YamahaAdpcm">
            <summary>WAVE_FORMAT_YAMAHA_ADPCM Yamaha Corporation of America</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.SonarC">
            <summary>WAVE_FORMAT_SONARC Speech Compression</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.DspGroupTrueSpeech">
            <summary>WAVE_FORMAT_DSPGROUP_TRUESPEECH DSP Group, Inc </summary>
        </member>
        <member name="F:CSCore.AudioEncoding.EchoSpeechCorporation1">
            <summary>WAVE_FORMAT_ECHOSC1 Echo Speech Corporation</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.AudioFileAf36">
            <summary>WAVE_FORMAT_AUDIOFILE_AF36, Virtual Music, Inc.</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.Aptx">
            <summary>WAVE_FORMAT_APTX Audio Processing Technology</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.AudioFileAf10">
            <summary>WAVE_FORMAT_AUDIOFILE_AF10, Virtual Music, Inc.</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.Prosody1612">
            <summary>WAVE_FORMAT_PROSODY_1612, Aculab plc</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.Lrc">
            <summary>WAVE_FORMAT_LRC, Merging Technologies S.A. </summary>
        </member>
        <member name="F:CSCore.AudioEncoding.DolbyAc2">
            <summary>WAVE_FORMAT_DOLBY_AC2, Dolby Laboratories</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.Gsm610">
            <summary>WAVE_FORMAT_GSM610, Microsoft Corporation</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.MsnAudio">
            <summary>WAVE_FORMAT_MSNAUDIO, Microsoft Corporation</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.AntexAdpcme">
            <summary>WAVE_FORMAT_ANTEX_ADPCME, Antex Electronics Corporation</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.ControlResVqlpc">
            <summary>WAVE_FORMAT_CONTROL_RES_VQLPC, Control Resources Limited </summary>
        </member>
        <member name="F:CSCore.AudioEncoding.DigiReal">
            <summary>WAVE_FORMAT_DIGIREAL, DSP Solutions, Inc. </summary>
        </member>
        <member name="F:CSCore.AudioEncoding.DigiAdpcm">
            <summary>WAVE_FORMAT_DIGIADPCM, DSP Solutions, Inc.</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.ControlResCr10">
            <summary>WAVE_FORMAT_CONTROL_RES_CR10, Control Resources Limited</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_NMS_VBXADPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_CS_IMAADPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_ECHOSC3">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_ROCKWELL_ADPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_ROCKWELL_DIGITALK">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_XEBEC">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_G721_ADPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_G728_CELP">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_MSG723">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.Mpeg">
            <summary>WAVE_FORMAT_MPEG, Microsoft Corporation </summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_RT24">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_PAC">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.MpegLayer3">
            <summary>WAVE_FORMAT_MPEGLAYER3, ISO/MPEG Layer3 Format Tag </summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_LUCENT_G723">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_CIRRUS">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_ESPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_VOXWARE">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_CANOPUS_ATRAC">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_G726_ADPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_G722_ADPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_DSAT_DISPLAY">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_VOXWARE_BYTE_ALIGNED">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_VOXWARE_AC8">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_VOXWARE_AC10">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_VOXWARE_AC16">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_VOXWARE_AC20">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_VOXWARE_RT24">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_VOXWARE_RT29">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_VOXWARE_RT29HW">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_VOXWARE_VR12">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_VOXWARE_VR18">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_VOXWARE_TQ40">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_SOFTSOUND">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_VOXWARE_TQ60">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_MSRT24">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_G729A">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_MVI_MVI2">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_DF_G726">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_DF_GSM610">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_ISIAUDIO">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_ONLIVE">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_SBC24">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_DOLBY_AC3_SPDIF">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_MEDIASONIC_G723">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_PROSODY_8KBPS">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_ZYXEL_ADPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_PHILIPS_LPCBB">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_PACKED">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_MALDEN_PHONYTALK">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.Gsm">
            <summary>WAVE_FORMAT_GSM</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.G729">
            <summary>WAVE_FORMAT_G729</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.G723">
            <summary>WAVE_FORMAT_G723</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.Acelp">
            <summary>WAVE_FORMAT_ACELP</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.RawAac">
            <summary>
                WAVE_FORMAT_RAW_AAC1
            </summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_RHETOREX_ADPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_IRAT">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_VIVO_G723">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_VIVO_SIREN">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_DIGITAL_G723">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_SANYO_LD_ADPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_SIPROLAB_ACEPLNET">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_SIPROLAB_ACELP4800">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_SIPROLAB_ACELP8V3">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_SIPROLAB_G729">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_SIPROLAB_G729A">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_SIPROLAB_KELVIN">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_G726ADPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_QUALCOMM_PUREVOICE">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_QUALCOMM_HALFRATE">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_TUBGSM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_MSAUDIO1">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WindowsMediaAudio">
            <summary>
                Windows Media Audio, WAVE_FORMAT_WMAUDIO2, Microsoft Corporation
            </summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WindowsMediaAudioProfessional">
            <summary>
                Windows Media Audio Professional WAVE_FORMAT_WMAUDIO3, Microsoft Corporation
            </summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WindowsMediaAudioLosseless">
            <summary>
                Windows Media Audio Lossless, WAVE_FORMAT_WMAUDIO_LOSSLESS
            </summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WindowsMediaAudioSpdif">
            <summary>
                Windows Media Audio Professional over SPDIF WAVE_FORMAT_WMASPDIF (0x0164)
            </summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_UNISYS_NAP_ADPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_UNISYS_NAP_ULAW">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_UNISYS_NAP_ALAW">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_UNISYS_NAP_16K">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_CREATIVE_ADPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_CREATIVE_FASTSPEECH8">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_CREATIVE_FASTSPEECH10">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_UHER_ADPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_QUARTERDECK">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_ILINK_VC">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_RAW_SPORT">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_ESST_AC3">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_IPI_HSX">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_IPI_RPELP">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_CS2">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_SONY_SCX">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_FM_TOWNS_SND">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_BTV_DIGITAL">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_QDESIGN_MUSIC">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_VME_VMPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_TPC">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_OLIGSM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_OLIADPCM">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_OLICELP">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_OLISBC">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_OLIOPR">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_LH_CODEC">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_NORRIS">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_SOUNDSPACE_MUSICOMPRESS">
            <summary></summary>
        </member>
        <member name="F:CSCore.AudioEncoding.MPEG_ADTS_AAC">
            <summary>
                Advanced Audio Coding (AAC) audio in Audio Data Transport Stream (ADTS) format.
                The format block is a WAVEFORMATEX structure with wFormatTag equal to WAVE_FORMAT_MPEG_ADTS_AAC.
            </summary>
            <remarks>
                The WAVEFORMATEX structure specifies the core AAC-LC sample rate and number of channels,
                prior to applying spectral band replication (SBR) or parametric stereo (PS) tools, if present.
                No additional data is required after the WAVEFORMATEX structure.
            </remarks>
            <see>http://msdn.microsoft.com/en-us/library/dd317599%28VS.85%29.aspx</see>
        </member>
        <member name="F:CSCore.AudioEncoding.MPEG_RAW_AAC">
            <summary></summary>
            <remarks>Source wmCodec.h</remarks>
        </member>
        <member name="F:CSCore.AudioEncoding.MPEG_LOAS">
            <summary>
                MPEG-4 audio transport stream with a synchronization layer (LOAS) and a multiplex layer (LATM).
                The format block is a WAVEFORMATEX structure with wFormatTag equal to WAVE_FORMAT_MPEG_LOAS.
            </summary>
            <remarks>
                The WAVEFORMATEX structure specifies the core AAC-LC sample rate and number of channels,
                prior to applying spectral SBR or PS tools, if present.
                No additional data is required after the WAVEFORMATEX structure.
            </remarks>
            <see>http://msdn.microsoft.com/en-us/library/dd317599%28VS.85%29.aspx</see>
        </member>
        <member name="F:CSCore.AudioEncoding.NOKIA_MPEG_ADTS_AAC">
            <summary>NOKIA_MPEG_ADTS_AAC</summary>
            <remarks>Source wmCodec.h</remarks>
        </member>
        <member name="F:CSCore.AudioEncoding.NOKIA_MPEG_RAW_AAC">
            <summary>NOKIA_MPEG_RAW_AAC</summary>
            <remarks>Source wmCodec.h</remarks>
        </member>
        <member name="F:CSCore.AudioEncoding.VODAFONE_MPEG_ADTS_AAC">
            <summary>VODAFONE_MPEG_ADTS_AAC</summary>
            <remarks>Source wmCodec.h</remarks>
        </member>
        <member name="F:CSCore.AudioEncoding.VODAFONE_MPEG_RAW_AAC">
            <summary>VODAFONE_MPEG_RAW_AAC</summary>
            <remarks>Source wmCodec.h</remarks>
        </member>
        <member name="F:CSCore.AudioEncoding.MPEG_HEAAC">
            <summary>
                High-Efficiency Advanced Audio Coding (HE-AAC) stream.
                The format block is an HEAACWAVEFORMAT structure.
            </summary>
            <see>http://msdn.microsoft.com/en-us/library/dd317599%28VS.85%29.aspx</see>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_DVM">
            <summary>WAVE_FORMAT_DVM</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.Vorbis1">
            <summary>WAVE_FORMAT_VORBIS1 "Og" Original stream compatible</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.Vorbis2">
            <summary>WAVE_FORMAT_VORBIS2 "Pg" Have independent header</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.Vorbis3">
            <summary>WAVE_FORMAT_VORBIS3 "Qg" Have no codebook header</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.Vorbis1P">
            <summary>WAVE_FORMAT_VORBIS1P "og" Original stream compatible</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.Vorbis2P">
            <summary>WAVE_FORMAT_VORBIS2P "pg" Have independent headere</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.Vorbis3P">
            <summary>WAVE_FORMAT_VORBIS3P "qg" Have no codebook header</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_RAW_AAC1">
            <summary>
                Raw AAC1
            </summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_MPEG_HEAAC">
            <summary>
                Advanced Audio Coding (AAC)
            </summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_WMAVOICE9">
            <summary>
                Windows Media Audio Voice (WMA Voice)
            </summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_WMASPDIF">
            <summary>
                WMASPDIF
            </summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_WMAUDIO_LOSSLESS">
            <summary>
                Windows Media Audio lossless
            </summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_WMAUDIO2">
            <summary>
                Windows Media Audio 2
            </summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_WMAUDIO3">
            <summary>
                Windows Media Audio 3
            </summary>
        </member>
        <member name="F:CSCore.AudioEncoding.Extensible">
            <summary>WAVE_FORMAT_EXTENSIBLE</summary>
        </member>
        <member name="F:CSCore.AudioEncoding.WAVE_FORMAT_DEVELOPMENT">
            <summary></summary>
        </member>
        <member name="T:CSCore.Utils.Vector3">
            <summary>
            Defines a 3D vector.
            </summary>
        </member>
        <member name="F:CSCore.Utils.Vector3.X">
            <summary>
            Retrieves or sets the x component of the 3D vector.
            </summary>
        </member>
        <member name="F:CSCore.Utils.Vector3.Y">
            <summary>
            Retrieves or sets the y component of the 3D vector.
            </summary>
        </member>
        <member name="F:CSCore.Utils.Vector3.Z">
            <summary>
            Retrieves or sets the z component of the 3D vector.
            </summary>
        </member>
        <member name="M:CSCore.Utils.Vector3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Utils.Vector3"/> structure.
            </summary>
            <param name="value">The value to use for the x, y and z component of the 3D vector.</param>
        </member>
        <member name="M:CSCore.Utils.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Utils.Vector3"/> structure.
            </summary>
            <param name="x">The x component of the 3D vector.</param>
            <param name="y">The y component of the 3D vector..</param>
            <param name="z">The z component of the 3D vector.</param>
        </member>
        <member name="M:CSCore.Utils.Vector3.ToString">
            <summary>
            Returns a string that represents the 3D vector.
            </summary>
            <returns>A string that represents the 3D vector.</returns>
        </member>
        <member name="T:CSCore.Win32.CLSCTX">
            <summary>
            Values that are used in activation calls to indicate the execution contexts in which an object is to be run.
            </summary>
        </member>
        <member name="F:CSCore.Win32.CLSCTX.CLSCTX_INPROC_SERVER">
            <summary>
            The code that creates and manages objects of this class is a DLL that runs in the same process as the caller of the function specifying the class context.
            </summary>
        </member>
        <member name="F:CSCore.Win32.CLSCTX.CLSCTX_INPROC_HANDLER">
            <summary>
            Indicates a handler dll, which runs on the same process as the caller.
            </summary>
        </member>
        <member name="F:CSCore.Win32.CLSCTX.CLSCTX_LOCAL_SERVER">
            <summary>
            Indicates a server executable, which runs on the same machine but on a different process than the caller. 
            </summary>
        </member>
        <member name="F:CSCore.Win32.CLSCTX.CLSCTX_INPROC_SERVER16">
            <summary>
            Obsolete.
            </summary>
        </member>
        <member name="F:CSCore.Win32.CLSCTX.CLSCTX_REMOTE_SERVER">
            <summary>
            Indicates a server executable, which runs on a different machine than the caller.
            </summary>
        </member>
        <member name="F:CSCore.Win32.CLSCTX.CLSCTX_INPROC_HANDLER16">
            <summary>
            Obsolete.
            </summary>
        </member>
        <member name="F:CSCore.Win32.CLSCTX.CLSCTX_RESERVED1">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:CSCore.Win32.CLSCTX.CLSCTX_RESERVED2">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:CSCore.Win32.CLSCTX.CLSCTX_RESERVED3">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:CSCore.Win32.CLSCTX.CLSCTX_RESERVED4">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:CSCore.Win32.CLSCTX.CLSCTX_NO_CODE_DOWNLOAD">
            <summary>
            Indicates that code should not be allowed to be downloaded from the Directory Service (if any) or the Internet.
            </summary>
        </member>
        <member name="F:CSCore.Win32.CLSCTX.CLSCTX_RESERVED5">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:CSCore.Win32.CLSCTX.CLSCTX_NO_CUSTOM_MARSHAL">
            <summary>
            Specify if you want the activation to fail if it uses custom marshalling.
            </summary>
        </member>
        <member name="F:CSCore.Win32.CLSCTX.CLSCTX_ENABLE_CODE_DOWNLOAD">
            <summary>
            Enables the downloading of code from the directory service or the Internet.
            </summary>
        </member>
        <member name="F:CSCore.Win32.CLSCTX.CLSCTX_NO_FAILURE_LOG">
            <summary>
            Indicates that no log messages about activation failure should be written to the Event Log.
            </summary>
        </member>
        <member name="F:CSCore.Win32.CLSCTX.CLSCTX_DISABLE_AAA">
            <summary>
            Indicates that activate-as-activator capability is disabled for this activation only.
            </summary>
        </member>
        <member name="F:CSCore.Win32.CLSCTX.CLSCTX_ENABLE_AAA">
            <summary>
            Indicates that activate-as-activator capability is enabled for this activation only.
            </summary>
        </member>
        <member name="F:CSCore.Win32.CLSCTX.CLSCTX_FROM_DEFAULT_CONTEXT">
            <summary>
            Indicates that activation should begin from the default context of the current apartment.
            </summary>
        </member>
        <member name="F:CSCore.Win32.CLSCTX.CLSCTX_ACTIVATE_32_BIT_SERVER">
            <summary>
            Activate or connect to a 32-bit version of the server; fail if one is not registered.
            </summary>
        </member>
        <member name="F:CSCore.Win32.CLSCTX.CLSCTX_ACTIVATE_64_BIT_SERVER">
            <summary>
            Activate or connect to a 64 bit version of the server; fail if one is not registered. 
            </summary>
        </member>
        <member name="F:CSCore.Win32.CLSCTX.CLSCTX_ENABLE_CLOAKING">
            <summary>
            When this flag is specified, COM uses the impersonation token of the thread, if one is present, for the activation request made by the thread. When this flag is not specified or if the thread does not have an impersonation token, COM uses the process token of the thread's process for the activation request made by the thread. 
            </summary>
        </member>
        <member name="F:CSCore.Win32.CLSCTX.CLSCTX_APPCONTAINER">
            <summary>
            Indicates activation is for an app container. Reserved for internal use.
            </summary>
        </member>
        <member name="F:CSCore.Win32.CLSCTX.CLSCTX_ACTIVATE_AAA_AS_IU">
            <summary>
            Specify this flag for Interactive User activation behavior for As-Activator servers.
            </summary>
        </member>
        <member name="F:CSCore.Win32.CLSCTX.CLSCTX_PS_DLL">
            <summary>
            Used for loading Proxy/Stub DLLs.
            </summary>
        </member>
        <member name="F:CSCore.Win32.CLSCTX.CLSCTX_INPROC">
            <summary>
            Bitwise combination of the <see cref="F:CSCore.Win32.CLSCTX.CLSCTX_INPROC_SERVER"/> and the <see cref="F:CSCore.Win32.CLSCTX.CLSCTX_INPROC_HANDLER"/> constants.
            </summary>
        </member>
        <member name="F:CSCore.Win32.CLSCTX.CLSCTX_SERVER">
            <summary>
            Bitwise combination of the <see cref="F:CSCore.Win32.CLSCTX.CLSCTX_INPROC_SERVER"/>, the <see cref="F:CSCore.Win32.CLSCTX.CLSCTX_LOCAL_SERVER"/> and the <see cref="F:CSCore.Win32.CLSCTX.CLSCTX_REMOTE_SERVER"/> constants.
            </summary>
        </member>
        <member name="F:CSCore.Win32.CLSCTX.CLSCTX_ALL">
            <summary>
            Bitwise combination of the <see cref="F:CSCore.Win32.CLSCTX.CLSCTX_INPROC"/> and the <see cref="F:CSCore.Win32.CLSCTX.CLSCTX_SERVER"/> constants.
            </summary>
        </member>
        <member name="T:CSCore.Win32.ComStream">
            <summary>
            Managed implementation of the <see cref="T:CSCore.Win32.IStream"/> interface. See <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms752876(v=vs.85).aspx"/>.
            </summary>
        </member>
        <member name="T:CSCore.Win32.IStream">
            <summary>
            Provides the managed definition of the IStream interface.
            </summary>
        </member>
        <member name="M:CSCore.Win32.IStream.Read(System.Byte[],System.Int32,System.IntPtr)">
            <summary>
            Reads a specified number of bytes from the stream object into memory starting at the current seek pointer.
            </summary>
            <param name="pv">When this method returns, contains the data read from the stream. This parameter is passed uninitialized.</param>
            <param name="cb">The number of bytes to read from the stream object. </param>
            <param name="pcbRead">A pointer to a ULONG variable that receives the actual number of bytes read from the stream object. </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.Win32.IStream.Write(System.Byte[],System.Int32,System.IntPtr)">
            <summary>
            Writes a specified number of bytes into the stream object starting at the current seek pointer.
            </summary>
            <param name="pv">The buffer to write this stream to. </param>
            <param name="cb">he number of bytes to write to the stream. </param>
            <param name="pcbWritten">On successful return, contains the actual number of bytes written to the stream object. If the caller sets this pointer to Zero, this method does not provide the actual number of bytes written. </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.Win32.IStream.Seek(System.Int64,System.Int32,System.IntPtr)">
            <summary>
            Changes the seek pointer to a new location relative to the beginning of the stream, to the end of the stream, or to the current seek pointer.
            </summary>
            <param name="dlibMove">The displacement to add to dwOrigin. </param>
            <param name="dwOrigin">The origin of the seek. The origin can be the beginning of the file, the current seek pointer, or the end of the file. </param>
            <param name="plibNewPosition">On successful return, contains the offset of the seek pointer from the beginning of the stream. </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.Win32.IStream.SetSize(System.Int64)">
            <summary>
            Changes the size of the stream object.
            </summary>
            <param name="libNewSize">The new size of the stream as a number of bytes. </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.Win32.IStream.CopyTo(CSCore.Win32.IStream,System.Int64,System.IntPtr,System.IntPtr)">
            <summary>
            Copies a specified number of bytes from the current seek pointer in the stream to the current seek pointer in another stream.
            </summary>
            <param name="pstm">A reference to the destination stream. </param>
            <param name="cb">The number of bytes to copy from the source stream. </param>
            <param name="pcbRead">On successful return, contains the actual number of bytes read from the source. </param>
            <param name="pcbWritten">On successful return, contains the actual number of bytes written to the destination. </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.Win32.IStream.Commit(System.Int32)">
            <summary>
            Ensures that any changes made to a stream object that is open in transacted mode are reflected in the parent storage.
            </summary>
            <param name="grfCommitFlags">A value that controls how the changes for the stream object are committed. </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.Win32.IStream.Revert">
            <summary>
            Discards all changes that have been made to a transacted stream since the last Commit call.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.Win32.IStream.LockRegion(System.Int64,System.Int64,System.Int32)">
            <summary>
            Restricts access to a specified range of bytes in the stream.
            </summary>
            <param name="libOffset">The byte offset for the beginning of the range. </param>
            <param name="cb">The length of the range, in bytes, to restrict. </param>
            <param name="dwLockType">The requested restrictions on accessing the range. </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.Win32.IStream.UnlockRegion(System.Int64,System.Int64,System.Int32)">
            <summary>
            Removes the access restriction on a range of bytes previously restricted with the LockRegion method.
            </summary>
            <param name="libOffset">The byte offset for the beginning of the range. </param>
            <param name="cb">The length, in bytes, of the range to restrict. </param>
            <param name="dwLockType">The access restrictions previously placed on the range. </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.Win32.IStream.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
            <summary>
            Retrieves the STATSTG structure for this stream.
            </summary>
            <param name="pstatstg">When this method returns, contains a STATSTG structure that describes this stream object. This parameter is passed uninitialized.</param>
            <param name="grfStatFlag">Members in the STATSTG structure that this method does not return, thus saving some memory allocation operations. </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.Win32.IStream.Clone(CSCore.Win32.IStream@)">
            <summary>
            Creates a new stream object with its own seek pointer that references the same bytes as the original stream.
            </summary>
            <param name="ppstm">When this method returns, contains the new stream object. This parameter is passed uninitialized.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.Win32.ComStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Win32.ComStream"/> class.
            </summary>
            <param name="stream">Underlying <see cref="T:System.IO.Stream"/>.</param>
        </member>
        <member name="M:CSCore.Win32.ComStream.CSCore#Win32#IStream#Clone(CSCore.Win32.IStream@)">
            <summary>
            Creates a new stream object with its own seek pointer that references the same bytes as the original stream.
            </summary>
            <param name="ppstm">When this method returns, contains the new stream object. This parameter is passed uninitialized.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.Win32.ComStream.CSCore#Win32#IStream#Commit(System.Int32)">
            <summary>
            Ensures that any changes made to a stream object that is open in transacted mode are reflected in the parent storage.
            </summary>
            <param name="grfCommitFlags">A value that controls how the changes for the stream object are committed. </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.Win32.ComStream.CSCore#Win32#IStream#CopyTo(CSCore.Win32.IStream,System.Int64,System.IntPtr,System.IntPtr)">
            <summary>
            Copies a specified number of bytes from the current seek pointer in the stream to the current seek pointer in another stream.
            </summary>
            <param name="pstm">A reference to the destination stream. </param>
            <param name="cb">The number of bytes to copy from the source stream. </param>
            <param name="pcbRead">On successful return, contains the actual number of bytes read from the source. </param>
            <param name="pcbWritten">On successful return, contains the actual number of bytes written to the destination. </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.Win32.ComStream.CSCore#Win32#IStream#LockRegion(System.Int64,System.Int64,System.Int32)">
            <summary>
            Restricts access to a specified range of bytes in the stream.
            </summary>
            <param name="libOffset">The byte offset for the beginning of the range. </param>
            <param name="cb">The length of the range, in bytes, to restrict. </param>
            <param name="dwLockType">The requested restrictions on accessing the range. </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.Win32.ComStream.CSCore#Win32#IStream#Read(System.Byte[],System.Int32,System.IntPtr)">
            <summary>
            Reads a specified number of bytes from the stream object into memory starting at the current seek pointer.
            </summary>
            <param name="pv">When this method returns, contains the data read from the stream. This parameter is passed uninitialized.</param>
            <param name="cb">The number of bytes to read from the stream object. </param>
            <param name="pcbRead">A pointer to a ULONG variable that receives the actual number of bytes read from the stream object. </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.Win32.ComStream.CSCore#Win32#IStream#Revert">
            <summary>
            Discards all changes that have been made to a transacted stream since the last Commit call.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.Win32.ComStream.CSCore#Win32#IStream#Seek(System.Int64,System.Int32,System.IntPtr)">
            <summary>
            Changes the seek pointer to a new location relative to the beginning of the stream, to the end of the stream, or to the current seek pointer.
            </summary>
            <param name="dlibMove">The displacement to add to dwOrigin. </param>
            <param name="dwOrigin">The origin of the seek. The origin can be the beginning of the file, the current seek pointer, or the end of the file. </param>
            <param name="plibNewPosition">On successful return, contains the offset of the seek pointer from the beginning of the stream. </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.Win32.ComStream.CSCore#Win32#IStream#SetSize(System.Int64)">
            <summary>
            Changes the size of the stream object.
            </summary>
            <param name="libNewSize">The new size of the stream as a number of bytes. </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.Win32.ComStream.CSCore#Win32#IStream#Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
            <summary>
            Retrieves the STATSTG structure for this stream.
            </summary>
            <param name="pstatstg">When this method returns, contains a STATSTG structure that describes this stream object. This parameter is passed uninitialized.</param>
            <param name="grfStatFlag">Members in the STATSTG structure that this method does not return, thus saving some memory allocation operations. </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.Win32.ComStream.CSCore#Win32#IStream#UnlockRegion(System.Int64,System.Int64,System.Int32)">
            <summary>
            Removes the access restriction on a range of bytes previously restricted with the LockRegion method.
            </summary>
            <param name="libOffset">The byte offset for the beginning of the range. </param>
            <param name="cb">The length, in bytes, of the range to restrict. </param>
            <param name="dwLockType">The access restrictions previously placed on the range. </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.Win32.ComStream.CSCore#Win32#IStream#Write(System.Byte[],System.Int32,System.IntPtr)">
            <summary>
            Writes a specified number of bytes into the stream object starting at the current seek pointer.
            </summary>
            <param name="pv">The buffer to write this stream to. </param>
            <param name="cb">he number of bytes to write to the stream. </param>
            <param name="pcbWritten">On successful return, contains the actual number of bytes written to the stream object. If the caller sets this pointer to Zero, this method does not provide the actual number of bytes written. </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.Win32.ComStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:CSCore.Win32.ComStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. </param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream. </param>
            <param name="count">The maximum number of bytes to be read from the current stream. </param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
        </member>
        <member name="M:CSCore.Win32.ComStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter. </param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position. </param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:CSCore.Win32.ComStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes. </param>
        </member>
        <member name="M:CSCore.Win32.ComStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream. </param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream. </param>
            <param name="count">The number of bytes to be written to the current stream. </param>
        </member>
        <member name="M:CSCore.Win32.ComStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Stream and optionally releases the managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:CSCore.Win32.ComStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:CSCore.Win32.ComStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:CSCore.Win32.ComStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:CSCore.Win32.ComStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:CSCore.Win32.ComStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="T:CSCore.Win32.Win32ComException">
            <summary>
            Exception for Com Exceptions.
            </summary>
        </member>
        <member name="M:CSCore.Win32.Win32ComException.Try(System.Int32,System.String,System.String)">
            <summary>
            Throws an <see cref="T:CSCore.Win32.Win32ComException"/> if the <paramref name="result"/> is not <see cref="F:CSCore.Win32.HResult.S_OK"/>.
            </summary>
            <param name="result">Errorcode.</param>
            <param name="interfaceName">Name of the interface which contains the COM-function which returned the specified <paramref name="result"/>.</param>
            <param name="member">Name of the COM-function which returned the specified <paramref name="result"/>.</param>
        </member>
        <member name="M:CSCore.Win32.Win32ComException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Win32.Win32ComException"/> class.
            </summary>
            <param name="result">Errorcode.</param>
            <param name="interfaceName">Name of the interface which contains the COM-function which returned the specified <paramref name="result"/>.</param>
            <param name="member">Name of the COM-function which returned the specified <paramref name="result"/>.</param>
        </member>
        <member name="P:CSCore.Win32.Win32ComException.InterfaceName">
            <summary>
            Name of the Cominterface which caused the error.
            </summary>
        </member>
        <member name="P:CSCore.Win32.Win32ComException.Member">
            <summary>
            Name of the member of the Cominterface which caused the error.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.AudioStreamCategory">
            <summary>
                Specifies the category of an audio stream.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.AudioStreamCategory.Other">
            <summary>
                Other audio stream.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.AudioStreamCategory.ForegroundOnlyMedia">
            <summary>
                Media that will only stream when the app is in the foreground.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.AudioStreamCategory.BackgroundCapableMedia">
            <summary>
                Media that can be streamed when the app is in the background.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.AudioStreamCategory.Communications">
            <summary>
                Real-time communications, such as VOIP or chat.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.AudioStreamCategory.Alerts">
            <summary>
                Alert sounds.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.AudioStreamCategory.SoundEffects">
            <summary>
                Sound effects.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.AudioStreamCategory.GameEffects">
            <summary>
                Game sound effects.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.AudioStreamCategory.GameMedia">
            <summary>
                Background audio for games.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.DebugConfiguration">
            <summary>
                Contains the new global debug configuration for XAudio2. Used with the <see cref="M:CSCore.XAudio2.XAudio2.SetDebugConfiguration(CSCore.XAudio2.DebugConfiguration)"/>
                function.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.DebugConfiguration.TraceMask">
            <summary>
                Bitmask of enabled debug message types. For a list of possible values take look at:
                http://msdn.microsoft.com/en-us/library/windows/desktop/microsoft.directx_sdk.xaudio2.xaudio2_debug_configuration(v=vs.85).aspx.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.DebugConfiguration.BreakMask">
            <summary>
                Message types that will cause an immediate break. For a list of possible values take look at:
                http://msdn.microsoft.com/en-us/library/windows/desktop/microsoft.directx_sdk.xaudio2.xaudio2_debug_configuration(v=vs.85).aspx.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.DebugConfiguration.LogThreadId">
            <summary>
                Indicates whether to log the thread ID with each message.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.DebugConfiguration.LogFileline">
            <summary>
                Indicates whether to log source files and line numbers.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.DebugConfiguration.LogFunctionName">
            <summary>
                Indicates whether to log function names.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.DebugConfiguration.LogTiming">
            <summary>
                Indicates whether to log message timestamps.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.DeviceDetails">
            <summary>
                Provides information about an audio device.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.DeviceDetails.DeviceId">
            <summary>
                Gets the <see cref="P:CSCore.XAudio2.DeviceDetails.DeviceId"/> of the Device.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.DeviceDetails.DisplayName">
            <summary>
                Gets the <see cref="P:CSCore.XAudio2.DeviceDetails.DisplayName"/> of the Device.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.DeviceDetails.Role">
            <summary>
                Gets the <see cref="T:CSCore.XAudio2.XAudio2DeviceRole"/> of the Device.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.DeviceDetails.OutputFormat">
            <summary>
                Gets the <see cref="P:CSCore.XAudio2.DeviceDetails.OutputFormat"/> of the Device.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.EffectChain">
            <summary>
                Defines an effect chain.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.EffectChain.EffectCount">
            <summary>
                Number of effects in the effect chain for the voice.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.EffectChain.EffectDescriptorsPtr">
            <summary>
                Pointer to an array of <see cref="T:CSCore.XAudio2.EffectDescriptor"/> structures containing pointers to XAPO instances.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.EffectDescriptor">
            <summary>
                Contains information about an XAPO for use in an effect chain.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.EffectDescriptor.IUnknownEffect">
            <summary>
                Pointer to the IUnknown interface of the XAPO object.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.EffectDescriptor.InitialState">
            <summary>
                TRUE if the effect should begin in the enabled state. Otherwise, FALSE.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.EffectDescriptor.OutputChannels">
            <summary>
                Number of output channels the effect should produce.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.FilterParameters">
            <summary>
                Defines filter parameters for a source voice.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.FilterParameters.Type">
            <summary>
                The <see cref="T:CSCore.XAudio2.FilterType"/>.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.FilterParameters.Frequency">
            <summary>
                Filter radian frequency calculated as (2 * sin(pi * (desired filter cutoff frequency) / sampleRate)).
                The frequency must be greater than or equal to 0 and less than or equal to 1.0f.
                The maximum frequency allowable is equal to the source sound's sample rate divided by
                six which corresponds to the maximum filter radian frequency of 1.
                For example, if a sound's sample rate is 48000 and the desired cutoff frequency is the maximum
                allowable value for that sample rate, 8000, the value for Frequency will be 1.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.FilterParameters.OneOverQ">
            <summary>
                Reciprocal of Q factor. Controls how quickly frequencies beyond Frequency are dampened. Larger values
                result in quicker dampening while smaller values cause dampening to occur more gradually.
                Must be greater than 0 and less than or equal to 1.5f.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.FilterType">
            <summary>
                Indicates the filter type.
            </summary>
            <remarks>
                Note  Note that the DirectX SDK versions of XAUDIO2 do not support the LowPassOnePoleFilter or the
                HighPassOnePoleFilter.
            </remarks>
        </member>
        <member name="F:CSCore.XAudio2.FilterType.LowPassFilter">
            <summary>
                Attenuates (reduces) frequencies above the cutoff frequency.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.FilterType.BandPassFilter">
            <summary>
                Attenuates frequencies outside a given range.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.FilterType.HighPassFilter">
            <summary>
                Attenuates frequencies below the cutoff frequency.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.FilterType.NotchFilter">
            <summary>
                Attenuates frequencies inside a given range.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.FilterType.LowPassOnePoleFilter">
            <summary>
                <b>XAudio2.8 only:</b> Attenuates frequencies above the cutoff frequency. This is a one-pole filter, and
                <see cref="F:CSCore.XAudio2.FilterParameters.OneOverQ"/> has no effect.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.FilterType.HighPassOnePoleFilter">
            <summary>
                <b>XAudio2.8 only:</b> Attenuates frequencies below the cutoff frequency. This is a one-pole filter, and
                <see cref="F:CSCore.XAudio2.FilterParameters.OneOverQ"/> has no effect.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.GetVoiceStateFlags">
            <summary>
                Flags controlling which voice state data should be returned.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.GetVoiceStateFlags.Default">
            <summary>
                Calculate all values.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.GetVoiceStateFlags.NoSamplesPlayed">
            <summary>
                Calculate all values except <see cref="F:CSCore.XAudio2.VoiceState.SamplesPlayed"/>.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.IXAudio2EngineCallback">
            <summary>
                Internal used IXAudio2EngineCallback-wrapper. The default implementation of this interface is
                <see cref="T:CSCore.XAudio2.XAudio2EngineCallback"/>.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.IXAudio2EngineCallback.OnProcessingPassStart">
            <summary>
                OnProcessingPassStart
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.IXAudio2EngineCallback.OnProcessingPassEnd">
            <summary>
                OnProcessingPassEnd
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.IXAudio2EngineCallback.OnCriticalError(System.Int32)">
            <summary>
                OnCriticalError
            </summary>
            <param name="error">Errorcode</param>
        </member>
        <member name="T:CSCore.XAudio2.IXAudio2VoiceCallback">
            <summary>
                The IXAudio2VoiceCallback interface contains methods that notify the client when certain events happen in a given
                <see cref="T:CSCore.XAudio2.XAudio2SourceVoice"/>.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.IXAudio2VoiceCallback.OnVoiceProcessingPassStart(System.Int32)">
            <summary>
                Called during each processing pass for each voice, just before XAudio2 reads data from the voice's buffer queue.
            </summary>
            <param name="bytesRequired">
                The number of bytes that must be submitted immediately to avoid starvation. This allows the implementation of
                just-in-time streaming scenarios; the client can keep the absolute minimum data queued on the voice at all times,
                and pass it fresh data just before the data is required. This model provides the lowest possible latency attainable
                with XAudio2. For xWMA and XMA data BytesRequired will always be zero, since the concept of a frame of xWMA or XMA
                data is meaningless.
                Note: In a situation where there is always plenty of data available on the source voice, BytesRequired should
                always report zero, because it doesn't need any samples immediately to avoid glitching.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.IXAudio2VoiceCallback.OnVoiceProcessingPassEnd">
            <summary>
                Called just after the processing pass for the voice ends.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.IXAudio2VoiceCallback.OnStreamEnd">
            <summary>
                Called when the voice has just finished playing a contiguous audio stream.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.IXAudio2VoiceCallback.OnBufferStart(System.IntPtr)">
            <summary>
                Called when the voice is about to start processing a new audio buffer.
            </summary>
            <param name="bufferContextPtr">
                Context pointer that was assigned to the pContext member of the
                <see cref="T:CSCore.XAudio2.XAudio2Buffer"/> structure when the buffer was submitted.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.IXAudio2VoiceCallback.OnBufferEnd(System.IntPtr)">
            <summary>
                Called when the voice finishes processing a buffer.
            </summary>
            <param name="bufferContextPtr">
                Context pointer that was assigned to the pContext member of the
                <see cref="T:CSCore.XAudio2.XAudio2Buffer"/> structure when the buffer was submitted.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.IXAudio2VoiceCallback.OnLoopEnd(System.IntPtr)">
            <summary>
                Called when the voice reaches the end position of a loop.
            </summary>
            <param name="bufferContextPtr">
                Context pointer that was assigned to the pContext member of the
                <see cref="T:CSCore.XAudio2.XAudio2Buffer"/> structure when the buffer was submitted.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.IXAudio2VoiceCallback.OnVoiceError(System.IntPtr,System.Int32)">
            <summary>
                Called when a critical error occurs during voice processing.
            </summary>
            <param name="bufferContextPtr">
                Context pointer that was assigned to the pContext member of the
                <see cref="T:CSCore.XAudio2.XAudio2Buffer"/> structure when the buffer was submitted.
            </param>
            <param name="error">The HRESULT code of the error encountered.</param>
        </member>
        <member name="T:CSCore.XAudio2.LogMask">
            <summary>
                Specifies values for the <see cref="F:CSCore.XAudio2.DebugConfiguration.TraceMask"/> and
                <see cref="F:CSCore.XAudio2.DebugConfiguration.BreakMask"/>.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.LogMask.LogNothing">
            <summary>
                Log nothing.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.LogMask.LogErrors">
            <summary>
                Log error messages.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.LogMask.LogWarnings">
            <summary>
                Log warning messages. Note: Enabling <see cref="F:CSCore.XAudio2.LogMask.LogWarnings"/> also enables <see cref="F:CSCore.XAudio2.LogMask.LogErrors"/>.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.LogMask.LogInfo">
            <summary>
                Log informational messages.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.LogMask.LogDetail">
            <summary>
                Log detailed informational messages. Note: Enabling <see cref="F:CSCore.XAudio2.LogMask.LogDetail"/> also enables <see cref="F:CSCore.XAudio2.LogMask.LogInfo"/>.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.LogMask.LogApiCalls">
            <summary>
                Log public API function entries and exits.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.LogMask.LogFuncCalls">
            <summary>
                Log internal function entries and exits. Note: Enabling <see cref="F:CSCore.XAudio2.LogMask.LogFuncCalls"/> also enables
                <see cref="F:CSCore.XAudio2.LogMask.LogApiCalls"/>.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.LogMask.LogTiming">
            <summary>
                Log delays detected and other timing data.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.LogMask.LogLocks">
            <summary>
                Log usage of critical sections and mutexes.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.LogMask.LogMemory">
            <summary>
                Log memory heap usage information.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.LogMask.LogStreaming">
            <summary>
                Log audio streaming information.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.PerformanceData">
            <summary>
                Contains performance information. Used by <see cref="P:CSCore.XAudio2.XAudio2.PerformanceData"/>.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.PerformanceData.AudioCyclesSinceLastQuery">
            <summary>
                CPU cycles spent on audio processing since the last call to the <see cref="M:CSCore.XAudio2.XAudio2.StartEngine"/> or
                <see cref="P:CSCore.XAudio2.XAudio2.PerformanceData"/> function.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.PerformanceData.TotalCyclesSinceLastQuery">
            <summary>
                Total CPU cycles elapsed since the last call. Note: This only counts cycles on the CPU on which XAudio2 is running.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.PerformanceData.MinimumCyclesPerQuantum">
            <summary>
                Fewest CPU cycles spent on processing any single audio quantum since the last call.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.PerformanceData.MaximumCyclesPerQuantum">
            <summary>
                Most CPU cycles spent on processing any single audio quantum since the last call.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.PerformanceData.MemoryUsageInBytes">
            <summary>
                Total memory currently in use.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.PerformanceData.CurrentLatencyInSamples">
            <summary>
                Minimum delay that occurs between the time a sample is read from a source buffer and the time it reaches the
                speakers.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.PerformanceData.GlitchesSinceEngineStarted">
            <summary>
                Total audio dropouts since the engine started.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.PerformanceData.ActiveSourceVoiceCount">
            <summary>
                Number of source voices currently playing.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.PerformanceData.TotalSourceVoiceCount">
            <summary>
                Total number of source voices currently in existence.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.PerformanceData.ActiveSubmixVoiceCount">
            <summary>
                Number of submix voices currently playing.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.PerformanceData.ActiveResamplerCount">
            <summary>
                Number of resampler xAPOs currently active.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.PerformanceData.ActiveMatrixMixCount">
            <summary>
                Number of matrix mix xAPOs currently active.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.PerformanceData.ActiveXmaSourceVoices">
            <summary>
                Not supported on Windows. Xbox 360. Number of source voices decoding XMA data.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.PerformanceData.ActiveXmaStreams">
            <summary>
                Not supported on Windows. A voice can use more than one XMA stream.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.SourceVoiceStopFlags">
            <summary>
                Flags that specify how a <see cref="T:CSCore.XAudio2.XAudio2SourceVoice"/> is stopped.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.SourceVoiceStopFlags.None">
            <summary>
                None
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.SourceVoiceStopFlags.PlayTails">
            <summary>
                Continue emitting effect output after the voice is stopped.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.StreamingSourceVoice">
            <summary>
                Extends the the <see cref="T:CSCore.XAudio2.XAudio2SourceVoice"/> to enable real-time audio streaming.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.XAudio2SourceVoice">
            <summary>
                Use a source voice to submit audio data to the XAudio2 processing pipeline.You must send voice data to a mastering
                voice to be heard, either directly or through intermediate submix voices.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.XAudio2Voice">
            <summary>
                Represents the base class from which <see cref="T:CSCore.XAudio2.XAudio2SourceVoice"/>, <see cref="T:CSCore.XAudio2.XAudio2SubmixVoice"/> and
                <see cref="T:CSCore.XAudio2.XAudio2MasteringVoice"/> are derived.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.#ctor(System.IntPtr,CSCore.XAudio2.XAudio2Version)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.XAudio2.XAudio2Voice"/> class.
            </summary>
            <param name="ptr">Native pointer of the <see cref="T:CSCore.XAudio2.XAudio2Voice"/> object.</param>
            <param name="version">The <see cref="T:CSCore.XAudio2.XAudio2Version"/> to use.</param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.GetVoiceDetailsNative(CSCore.XAudio2.VoiceDetails@)">
            <summary>
                Returns information about the creation flags, input channels, and sample rate of a voice.
            </summary>
            <param name="voiceDetails"><see cref="T:CSCore.XAudio2.VoiceDetails"/> object containing information about the voice.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.SetOutputVoicesNative(System.Nullable{CSCore.XAudio2.VoiceSends})">
            <summary>
                Designates a new set of submix or mastering voices to receive the output of the voice.
            </summary>
            <param name="voiceSends">
                VoiceSends structure which contains Output voices. If <paramref name="voiceSends" /> is null, the voice will send
                its output to the current mastering voice. All of the voices in a send list must have the same input sample rate.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.SetOutputVoices(CSCore.XAudio2.VoiceSendDescriptor[])">
            <summary>
                Designates a new set of submix or mastering voices to receive the output of the voice.
            </summary>
            <param name="voiceSendDescriptors">
                Array of <see cref="T:CSCore.XAudio2.VoiceSendDescriptor"/>s. if <paramref name="voiceSendDescriptors"/> is null, the voice will send
                its output to the current mastering voice.
                All voices in the <paramref name="voiceSendDescriptors"/> must have the same input sample rate.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.SetEffectChainNative(System.Nullable{CSCore.XAudio2.EffectChain})">
            <summary>
                Replaces the effect chain of the voice.
            </summary>
            <param name="effectChain">
                Describes the new effect chain to use.
                If null is passed, the current effect chain is removed.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.SetEffectChain(CSCore.XAudio2.EffectDescriptor[])">
            <summary>
                Replaces the effect chain of the voice.
            </summary>
            <param name="effectDescriptors">
                Describes the new effect chain to use.
                If null is passed, the current effect chain is removed.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.EnableEffectNative(System.Int32,System.Int32)">
            <summary>
                Enables the effect at a given position in the effect chain of the voice.
            </summary>
            <param name="effectIndex">Zero-based index of an effect in the effect chain of the voice.</param>
            <param name="operationSet">
                Identifies this call as part of a deferred batch. For more information see
                http://msdn.microsoft.com/en-us/library/windows/desktop/ee415807(v=vs.85).aspx.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.EnableEffect(System.Int32,System.Int32)">
            <summary>
                Enables the effect at a given position in the effect chain of the voice.
            </summary>
            <param name="effectIndex">Zero-based index of an effect in the effect chain of the voice.</param>
            <param name="operationSet">
                Identifies this call as part of a deferred batch. For more information see
                http://msdn.microsoft.com/en-us/library/windows/desktop/ee415807(v=vs.85).aspx.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.EnableEffect(System.Int32)">
            <summary>
                Enables the effect at a given position in the effect chain of the voice.
            </summary>
            <param name="effectIndex">Zero-based index of an effect in the effect chain of the voice.</param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.DisableEffectNative(System.Int32,System.Int32)">
            <summary>
                Disables the effect at a given position in the effect chain of the voice.
            </summary>
            <param name="effectIndex">Zero-based index of an effect in the effect chain of the voice.</param>
            <param name="operationSet">
                Identifies this call as part of a deferred batch. For more information see
                http://msdn.microsoft.com/en-us/library/windows/desktop/ee415807(v=vs.85).aspx.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.DisableEffect(System.Int32,System.Int32)">
            <summary>
                Disables the effect at a given position in the effect chain of the voice.
            </summary>
            <param name="effectIndex">Zero-based index of an effect in the effect chain of the voice.</param>
            <param name="operationSet">
                Identifies this call as part of a deferred batch. For more information see
                http://msdn.microsoft.com/en-us/library/windows/desktop/ee415807(v=vs.85).aspx.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.DisableEffect(System.Int32)">
            <summary>
                Disables the effect at a given position in the effect chain of the voice.
            </summary>
            <param name="effectIndex">Zero-based index of an effect in the effect chain of the voice.</param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.GetEffectStateNative(System.Int32,CSCore.Win32.NativeBool@)">
            <summary>
                Returns the running state of the effect at a specified position in the effect chain of the voice.
            </summary>
            <param name="effectIndex">Zero-based index of an effect in the effect chain of the voice.</param>
            <param name="enabled">Returns true if the effect is enabled. If the effect is disabled, returns false.</param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.IsEffectEnabled(System.Int32)">
            <summary>
                Returns whether the effect at the specified position in the effect chain is enabled.
            </summary>
            <param name="effectIndex">Zero-based index of an effect in the effect chain of the voice.</param>
            <returns>Returns true if the effect is enabled. If the effect is disabled, returns false.</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.SetEffectParametersNative(System.Int32,System.IntPtr,System.Int32,System.Int32)">
            <summary>
                Sets parameters for a given effect in the voice's effect chain.
            </summary>
            <param name="effectIndex">Zero-based index of an effect within the voice's effect chain.</param>
            <param name="effectParameters"> New values of the effect-specific parameters. </param>
            <param name="parametersByteSize">Size of the <paramref name="effectParameters" /> array in bytes.</param>
            <param name="operationSet">
                Identifies this call as part of a deferred batch. For more information see
                http://msdn.microsoft.com/en-us/library/windows/desktop/ee415807(v=vs.85).aspx.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.SetEffectParameters``1(System.Int32,``0)">
            <summary>
                Sets parameters for a given effect in the voice's effect chain.
            </summary>
            <typeparam name="T">Effect parameter.</typeparam>
            <param name="effectIndex">Zero-based index of an effect within the voice's effect chain.</param>
            <param name="effectParameters">New values of the effect-specific parameters.</param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.SetEffectParameters``1(System.Int32,``0,System.Int32)">
            <summary>
                Sets parameters for a given effect in the voice's effect chain.
            </summary>
            <typeparam name="T">Effect parameter.</typeparam>
            <param name="effectIndex">Zero-based index of an effect within the voice's effect chain.</param>
            <param name="effectParameters">New values of the effect-specific parameters.</param>
            <param name="operationSet">
                Identifies this call as part of a deferred batch. For more information see
                http://msdn.microsoft.com/en-us/library/windows/desktop/ee415807(v=vs.85).aspx.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.GetEffectParametersNative(System.Int32,System.IntPtr,System.Int32)">
            <summary>
                Returns the current effect-specific parameters of a given effect in the voice's effect chain.
            </summary>
            <param name="effectIndex">Zero-based index of an effect within the voice's effect chain.</param>
            <param name="effectParameters">Returns the current values of the effect-specific parameters.</param>
            <param name="parametersByteSize">Size of the <paramref name="effectParameters" /> array in bytes.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.GetEffectParameters``1(System.Int32)">
            <summary>
                Returns the current effect-specific parameters of a given effect in the voice's effect chain.
            </summary>
            <typeparam name="T">Effect parameters.</typeparam>
            <param name="effectIndex">Zero-based index of an effect within the voice's effect chain.</param>
            <returns>Effect parameters value.</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.SetFilterParametersNative(CSCore.XAudio2.FilterParameters,System.Int32)">
            <summary>
                Sets the voice's filter parameters.
            </summary>
            <param name="filterParameters">
                <see cref="T:CSCore.XAudio2.FilterParameters"/> structure containing the filter
                information.
            </param>
            <param name="operationSet">
                Identifies this call as part of a deferred batch. For more information see
                http://msdn.microsoft.com/en-us/library/windows/desktop/ee415807(v=vs.85).aspx.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.SetFilterParameters(CSCore.XAudio2.FilterParameters,System.Int32)">
            <summary>
                Sets the voice's filter parameters.
            </summary>
            <param name="filterParameters">
                <see cref="T:CSCore.XAudio2.FilterParameters"/> structure containing the filter
                information.
            </param>
            <param name="operationSet">
                Identifies this call as part of a deferred batch. For more information see
                http://msdn.microsoft.com/en-us/library/windows/desktop/ee415807(v=vs.85).aspx.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.GetFilterParametersNative(CSCore.XAudio2.FilterParameters@)">
            <summary>
                Gets the voice's filter parameters.
            </summary>
            <param name="filterParameters">
                <see cref="T:CSCore.XAudio2.FilterParameters"/> structure containing the filter
                information.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.GetFilterParameters">
            <summary>
                Gets the voice's filter parameters.
            </summary>
            <returns><see cref="T:CSCore.XAudio2.FilterParameters"/> structure containing the filter information.</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.SetOutputFilterParametersNative(CSCore.XAudio2.XAudio2Voice,CSCore.XAudio2.FilterParameters,System.Int32)">
            <summary>
                Sets the filter parameters on one of this voice's sends.
            </summary>
            <param name="destinationVoice">The destination voice of the send whose filter parameters will be set.</param>
            <param name="filterParameters">
                <see cref="T:CSCore.XAudio2.FilterParameters"/> structure containing the filter
                information.
            </param>
            <param name="operationSet">
                Identifies this call as part of a deferred batch. For more information see
                http://msdn.microsoft.com/en-us/library/windows/desktop/ee415807(v=vs.85).aspx.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.SetOutputFilterParameters(CSCore.XAudio2.XAudio2Voice,CSCore.XAudio2.FilterParameters,System.Int32)">
            <summary>
                Sets the filter parameters on one of this voice's sends.
            </summary>
            <param name="destinationVoice">The destination voice of the send whose filter parameters will be set.</param>
            <param name="filterParameters">
                <see cref="T:CSCore.XAudio2.FilterParameters"/> structure containing the filter
                information.
            </param>
            <param name="operationSet">
                Identifies this call as part of a deferred batch. For more information see
                http://msdn.microsoft.com/en-us/library/windows/desktop/ee415807(v=vs.85).aspx.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.SetOutputFilterParameters(CSCore.XAudio2.XAudio2Voice,CSCore.XAudio2.FilterParameters)">
            <summary>
                Sets the filter parameters on one of this voice's sends.
            </summary>
            <param name="destinationVoice">The destination voice of the send whose filter parameters will be set.</param>
            <param name="filterParameters">
                <see cref="T:CSCore.XAudio2.FilterParameters"/> structure containing the filter
                information.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.GetOutputFilterParametersNative(CSCore.XAudio2.XAudio2Voice,CSCore.XAudio2.FilterParameters@)">
            <summary>
                Returns the filter parameters from one of this voice's sends.
            </summary>
            <param name="destinationVoice">The destination voice of the send whose filter parameters will be read.</param>
            <param name="filterParameters">
                <see cref="T:CSCore.XAudio2.FilterParameters"/> structure containing the filter
                information.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.GetOutputFilterParameters(CSCore.XAudio2.XAudio2Voice)">
            <summary>
                Returns the filter parameters from one of this voice's sends.
            </summary>
            <param name="destinationVoice">The destination voice of the send whose filter parameters will be read.</param>
            <returns><see cref="T:CSCore.XAudio2.FilterParameters"/> structure containing the filter information.</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.SetVolumeNative(System.Single,System.Int32)">
            <summary>
                Sets the overall volume level for the voice.
            </summary>
            <param name="volume">Overall volume level to use. See Remarks for more information on volume levels.</param>
            <param name="operationSet">
                Identifies this call as part of a deferred batch. For more information see
                http://msdn.microsoft.com/en-us/library/windows/desktop/ee415807(v=vs.85).aspx.
            </param>
            <returns>HRESULT</returns>
            <remarks>
                The master volume level is applied at different times depending on the type of voice.
                For submix and mastering voices the volume level is applied just before the voice's built in filter and effect
                chain is applied.
                For source voices the master volume level is applied after the voice's filter and effect
                chain is applied. Volume levels are expressed as floating-point amplitude multipliers
                between -2^24 and 2^24, with a maximum
                gain of 144.5 dB. A volume level of 1.0 means there is no attenuation or gain and 0 means silence.
                Negative levels can be used to invert the audio's phase.
            </remarks>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.SetVolume(System.Single,System.Int32)">
            <summary>
                Sets the overall volume level for the voice.
            </summary>
            <param name="volume">Overall volume level to use. See Remarks for more information on volume levels.</param>
            <param name="operationSet">
                Identifies this call as part of a deferred batch. For more information see
                http://msdn.microsoft.com/en-us/library/windows/desktop/ee415807(v=vs.85).aspx.
            </param>
            <remarks>
                The master volume level is applied at different times depending on the type of voice.
                For submix and mastering voices the volume level is applied just before the voice's built in filter and effect
                chain is applied.
                For source voices the master volume level is applied after the voice's filter and effect
                chain is applied. Volume levels are expressed as floating-point amplitude multipliers
                between -2^24 and 2^24, with a maximum
                gain of 144.5 dB. A volume level of 1.0 means there is no attenuation or gain and 0 means silence.
                Negative levels can be used to invert the audio's phase.
            </remarks>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.GetVolumeNative(System.Single@)">
            <summary>
                Gets the current overall volume level of the voice.
            </summary>
            <param name="volume">
                Returns the current overall volume level of the voice. See Remarks for more information on volume
                levels.
            </param>
            <returns>HRESULT</returns>
            <remarks>
                The master volume level is applied at different times depending on the type of voice.
                For submix and mastering voices the volume level is applied just before the voice's built in filter and effect
                chain is applied.
                For source voices the master volume level is applied after the voice's filter and effect
                chain is applied. Volume levels are expressed as floating-point amplitude multipliers
                between -2^24 and 2^24, with a maximum
                gain of 144.5 dB. A volume level of 1.0 means there is no attenuation or gain and 0 means silence.
                Negative levels can be used to invert the audio's phase.
            </remarks>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.GetVolume">
            <summary>
                Gets the current overall volume level of the voice.
            </summary>
            <returns>The current overall volume level of the voice. See Remarks for more information on volume levels.</returns>
            <remarks>
                The master volume level is applied at different times depending on the type of voice.
                For submix and mastering voices the volume level is applied just before the voice's built in filter and effect
                chain is applied.
                For source voices the master volume level is applied after the voice's filter and effect
                chain is applied. Volume levels are expressed as floating-point amplitude multipliers
                between -2^24 and 2^24, with a maximum
                gain of 144.5 dB. A volume level of 1.0 means there is no attenuation or gain and 0 means silence.
                Negative levels can be used to invert the audio's phase.
            </remarks>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.SetChannelVolumesNative(System.Int32,System.Single[],System.Int32)">
            <summary>
                Sets the volume levels for the voice, per channel. This method is valid only for source and submix voices, because
                mastering voices do not specify volume per channel.
            </summary>
            <param name="channelCount">Number of channels in the voice.</param>
            <param name="volumes">
                Array containing the new volumes of each channel in the voice. The array must have
                <paramref name="channelCount" /> elements. See Remarks for more information on volume levels.
            </param>
            <param name="operationSet">
                Identifies this call as part of a deferred batch. For more information see
                http://msdn.microsoft.com/en-us/library/windows/desktop/ee415807(v=vs.85).aspx.
            </param>
            <returns>HRESULT</returns>
            <remarks>
                The master volume level is applied at different times depending on the type of voice.
                For submix and mastering voices the volume level is applied just before the voice's built in filter and effect
                chain is applied.
                For source voices the master volume level is applied after the voice's filter and effect
                chain is applied. Volume levels are expressed as floating-point amplitude multipliers
                between -2^24 and 2^24, with a maximum
                gain of 144.5 dB. A volume level of 1.0 means there is no attenuation or gain and 0 means silence.
                Negative levels can be used to invert the audio's phase.
            </remarks>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.SetChannelVolumes(System.Int32,System.Single[],System.Int32)">
            <summary>
                Sets the volume levels for the voice, per channel. This method is valid only for source and submix voices, because
                mastering voices do not specify volume per channel.
            </summary>
            <param name="channelCount">Number of channels in the voice.</param>
            <param name="volumes">
                Array containing the new volumes of each channel in the voice. The array must have
                <paramref name="channelCount" /> elements. See Remarks for more information on volume levels.
            </param>
            <param name="operationSet">
                Identifies this call as part of a deferred batch. For more information see
                http://msdn.microsoft.com/en-us/library/windows/desktop/ee415807(v=vs.85).aspx.
            </param>
            <remarks>
                The master volume level is applied at different times depending on the type of voice.
                For submix and mastering voices the volume level is applied just before the voice's built in filter and effect
                chain is applied.
                For source voices the master volume level is applied after the voice's filter and effect
                chain is applied. Volume levels are expressed as floating-point amplitude multipliers
                between -2^24 and 2^24, with a maximum
                gain of 144.5 dB. A volume level of 1.0 means there is no attenuation or gain and 0 means silence.
                Negative levels can be used to invert the audio's phase.
            </remarks>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.SetChannelVolumes(System.Int32,System.Single[])">
            <summary>
                Sets the volume levels for the voice, per channel. This method is valid only for source and submix voices, because
                mastering voices do not specify volume per channel.
            </summary>
            <param name="channelCount">Number of channels in the voice.</param>
            <param name="volumes">
                Array containing the new volumes of each channel in the voice. The array must have
                <paramref name="channelCount" /> elements. See Remarks for more information on volume levels.
            </param>
            <remarks>
                The master volume level is applied at different times depending on the type of voice.
                For submix and mastering voices the volume level is applied just before the voice's built in filter and effect
                chain is applied.
                For source voices the master volume level is applied after the voice's filter and effect
                chain is applied. Volume levels are expressed as floating-point amplitude multipliers
                between -2^24 and 2^24, with a maximum
                gain of 144.5 dB. A volume level of 1.0 means there is no attenuation or gain and 0 means silence.
                Negative levels can be used to invert the audio's phase.
            </remarks>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.GetChannelVolumesNative(System.Int32,System.Single[])">
            <summary>
                Returns the volume levels for the voice, per channel.
                These settings are applied after the effect chain is applied.
                This method is valid only for source and submix voices, because mastering voices do not specify volume per channel.
            </summary>
            <param name="channelCount">Confirms the channel count of the voice.</param>
            <param name="volumes">
                Returns the current volume level of each channel in the voice. The array must have at least
                <paramref name="channelCount" /> elements.
                See remarks for more information on volume levels.
            </param>
            <returns>HRESULT</returns>
            <remarks>
                The master volume level is applied at different times depending on the type of voice.
                For submix and mastering voices the volume level is applied just before the voice's built in filter and effect
                chain is applied.
                For source voices the master volume level is applied after the voice's filter and effect
                chain is applied. Volume levels are expressed as floating-point amplitude multipliers
                between -2^24 and 2^24, with a maximum
                gain of 144.5 dB. A volume level of 1.0 means there is no attenuation or gain and 0 means silence.
                Negative levels can be used to invert the audio's phase.
            </remarks>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.GetChannelVolumes(System.Int32)">
            <summary>
                Returns the volume levels for the voice, per channel.
                These settings are applied after the effect chain is applied.
                This method is valid only for source and submix voices, because mastering voices do not specify volume per channel.
            </summary>
            <param name="channelCount">Confirms the channel count of the voice.</param>
            <returns>
                Returns the current volume level of each channel in the voice. The has at least <paramref name="channelCount" />
                elements.
            </returns>
            <remarks>
                The master volume level is applied at different times depending on the type of voice.
                For submix and mastering voices the volume level is applied just before the voice's built in filter and effect
                chain is applied.
                For source voices the master volume level is applied after the voice's filter and effect
                chain is applied. Volume levels are expressed as floating-point amplitude multipliers
                between -2^24 and 2^24, with a maximum
                gain of 144.5 dB. A volume level of 1.0 means there is no attenuation or gain and 0 means silence.
                Negative levels can be used to invert the audio's phase.
            </remarks>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.SetOutputMatrixNative(CSCore.XAudio2.XAudio2Voice,System.Int32,System.Int32,System.Single[],System.Int32)">
            <summary>
                Sets the volume level of each channel of the final output for the voice. These channels are mapped to the input
                channels of a specified destination voice.
            </summary>
            <param name="destinationVoice">
                Destination <see cref="T:CSCore.XAudio2.XAudio2Voice"/> for which to set volume levels.
                If the voice sends to a single target voice then specifying null will cause SetOutputMatrix to operate on that
                target voice.
            </param>
            <param name="sourceChannels">
                Confirms the output channel count of the voice. This is the number of channels that are
                produced by the last effect in the chain.
            </param>
            <param name="destinationChannels">Confirms the input channel count of the destination voice.</param>
            <param name="levelMatrix">
                Array of [SourceChannels × DestinationChannels] volume levels sent to the destination voice.
                The level sent from source channel S to destination channel D is specified in the form levelMatrix[SourceChannels ×
                D + S].
                For more details see
                http://msdn.microsoft.com/en-us/library/windows/desktop/microsoft.directx_sdk.ixaudio2voice.ixaudio2voice.setoutputmatrix(v=vs.85).aspx.
            </param>
            <param name="operationSet">
                Identifies this call as part of a deferred batch. For more information see
                http://msdn.microsoft.com/en-us/library/windows/desktop/ee415807(v=vs.85).aspx.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.SetOutputMatrix(CSCore.XAudio2.XAudio2Voice,System.Int32,System.Int32,System.Single[],System.Int32)">
            <summary>
                Sets the volume level of each channel of the final output for the voice. These channels are mapped to the input
                channels of a specified destination voice.
            </summary>
            <param name="destinationVoice">
                Destination <see cref="T:CSCore.XAudio2.XAudio2Voice"/> for which to set volume levels.
                If the voice sends to a single target voice then specifying null will cause SetOutputMatrix to operate on that
                target voice.
            </param>
            <param name="sourceChannels">
                Confirms the output channel count of the voice. This is the number of channels that are
                produced by the last effect in the chain.
            </param>
            <param name="destinationChannels">Confirms the input channel count of the destination voice.</param>
            <param name="levelMatrix">
                Array of [SourceChannels × DestinationChannels] volume levels sent to the destination voice.
                The level sent from source channel S to destination channel D is specified in the form levelMatrix[SourceChannels ×
                D + S].
                For more details see
                http://msdn.microsoft.com/en-us/library/windows/desktop/microsoft.directx_sdk.ixaudio2voice.ixaudio2voice.setoutputmatrix(v=vs.85).aspx.
            </param>
            <param name="operationSet">
                Identifies this call as part of a deferred batch. For more information see
                http://msdn.microsoft.com/en-us/library/windows/desktop/ee415807(v=vs.85).aspx.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.SetOutputMatrix(CSCore.XAudio2.XAudio2Voice,System.Int32,System.Int32,System.Single[])">
            <summary>
                Sets the volume level of each channel of the final output for the voice. These channels are mapped to the input
                channels of a specified destination voice.
            </summary>
            <param name="destinationVoice">
                Destination <see cref="T:CSCore.XAudio2.XAudio2Voice"/> for which to set volume levels.
                If the voice sends to a single target voice then specifying null will cause SetOutputMatrix to operate on that
                target voice.
            </param>
            <param name="sourceChannels">
                Confirms the output channel count of the voice. This is the number of channels that are
                produced by the last effect in the chain.
            </param>
            <param name="destinationChannels">Confirms the input channel count of the destination voice.</param>
            <param name="levelMatrix">
                Array of [SourceChannels × DestinationChannels] volume levels sent to the destination voice.
                The level sent from source channel S to destination channel D is specified in the form levelMatrix[SourceChannels ×
                D + S].
                For more details see
                http://msdn.microsoft.com/en-us/library/windows/desktop/microsoft.directx_sdk.ixaudio2voice.ixaudio2voice.setoutputmatrix(v=vs.85).aspx.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.GetOutputMatrixNative(CSCore.XAudio2.XAudio2Voice,System.Int32,System.Int32,System.Single[])">
            <summary>
                Gets the volume level of each channel of the final output for the voice. These channels are mapped to the input
                channels of a specified destination voice.
            </summary>
            <param name="destinationVoice">The destination <see cref="T:CSCore.XAudio2.XAudio2Voice"/> to retrieve the output matrix for.</param>
            <param name="sourceChannels">
                Confirms the output channel count of the voice. This is the number of channels that are
                produced by the last effect in the chain.
            </param>
            <param name="destinationChannels">Confirms the input channel count of the destination voice.</param>
            <param name="levelMatrix">
                Array of [SourceChannels × DestinationChannels] volume levels sent to the destination voice.
                The level sent from source channel S to destination channel D is specified in the form levelMatrix[SourceChannels ×
                D + S].
                For more details see
                http://msdn.microsoft.com/en-us/library/windows/desktop/microsoft.directx_sdk.ixaudio2voice.ixaudio2voice.getoutputmatrix(v=vs.85).aspx.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.GetOutputMatrix(CSCore.XAudio2.XAudio2Voice,System.Int32,System.Int32,System.Single[])">
            <summary>
                Gets the volume level of each channel of the final output for the voice. These channels are mapped to the input
                channels of a specified destination voice.
            </summary>
            <param name="destinationVoice">The destination <see cref="T:CSCore.XAudio2.XAudio2Voice"/> to retrieve the output matrix for.</param>
            <param name="sourceChannels">
                Confirms the output channel count of the voice. This is the number of channels that are
                produced by the last effect in the chain.
            </param>
            <param name="destinationChannels">Confirms the input channel count of the destination voice.</param>
            <param name="levelMatrix">
                Array of [SourceChannels × DestinationChannels] volume levels sent to the destination voice.
                The level sent from source channel S to destination channel D is specified in the form levelMatrix[SourceChannels ×
                D + S].
                For more details see
                http://msdn.microsoft.com/en-us/library/windows/desktop/microsoft.directx_sdk.ixaudio2voice.ixaudio2voice.getoutputmatrix(v=vs.85).aspx.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.DestroyVoice">
            <summary>
                Destroys the voice. If necessary, stops the voice and removes it from the XAudio2 graph.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Voice.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:CSCore.XAudio2.XAudio2Voice"/> and calls the <see cref="M:CSCore.XAudio2.XAudio2Voice.DestroyVoice"/> method..
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:CSCore.XAudio2.XAudio2Voice.Version">
            <summary>
            Gets the XAudio2 Version.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.XAudio2Voice.VoiceDetails">
            <summary>
                Gets the <see cref="T:CSCore.XAudio2.VoiceDetails"/> of the <see cref="T:CSCore.XAudio2.XAudio2Voice"/>.
                These details include information about the number of input channels, the sample rate and the
                <see cref="T:CSCore.XAudio2.VoiceFlags"/>.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.XAudio2Voice.FilterParameters">
            <summary>
                Gets or sets the <see cref="T:CSCore.XAudio2.FilterParameters"/> of the <see cref="T:CSCore.XAudio2.XAudio2Voice"/>.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.XAudio2Voice.Volume">
            <summary>
                Gets or sets the volume of the <see cref="T:CSCore.XAudio2.XAudio2Voice"/>. The default value is 1.0.
            </summary>
            <remarks>
                The master volume level is applied at different times depending on the type of voice.
                For submix and mastering voices the volume level is applied just before the voice's built in filter and effect
                chain is applied.
                For source voices the master volume level is applied after the voice's filter and effect
                chain is applied. Volume levels are expressed as floating-point amplitude multipliers
                between -2^24 and 2^24, with a maximum
                gain of 144.5 dB. A volume level of 1.0 means there is no attenuation or gain and 0 means silence.
                Negative levels can be used to invert the audio's phase.
            </remarks>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2SourceVoice.#ctor(System.IntPtr,CSCore.XAudio2.XAudio2Version)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.XAudio2.XAudio2SourceVoice"/> class.
            </summary>
            <param name="ptr">Native pointer of the <see cref="T:CSCore.XAudio2.XAudio2SourceVoice"/> object.</param>
            <param name="version">The <see cref="T:CSCore.XAudio2.XAudio2Version"/> to use.</param>        
        </member>
        <member name="M:CSCore.XAudio2.XAudio2SourceVoice.StartNative(System.Int32,System.Int32)">
            <summary>
                Starts consumption and processing of audio by the voice. Delivers the result to any connected submix or mastering
                voices, or to the output device.
            </summary>
            <param name="flags">Flags that control how the voice is started. Must be 0.</param>
            <param name="operationSet">
                Identifies this call as part of a deferred batch. For more details see
                http://msdn.microsoft.com/en-us/library/windows/desktop/ee415807(v=vs.85).aspx.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2SourceVoice.Start(System.Int32,System.Int32)">
            <summary>
                Starts consumption and processing of audio by the voice. Delivers the result to any connected submix or mastering
                voices, or to the output device.
            </summary>
            <param name="flags">Flags that control how the voice is started. Must be 0.</param>
            <param name="operationSet">
                Identifies this call as part of a deferred batch. For more details see
                http://msdn.microsoft.com/en-us/library/windows/desktop/ee415807(v=vs.85).aspx.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2SourceVoice.Start">
            <summary>
                Starts consumption and processing of audio by the voice. Delivers the result to any connected submix or mastering
                voices, or to the output device.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2SourceVoice.StopNative(CSCore.XAudio2.SourceVoiceStopFlags,System.Int32)">
            <summary>
                Stops consumption of audio by the current voice.
            </summary>
            <param name="flags">
                Flags that control how the voice is stopped. Can be <see cref="F:CSCore.XAudio2.SourceVoiceStopFlags.None"/> or
                <see cref="F:CSCore.XAudio2.SourceVoiceStopFlags.PlayTails"/>.
            </param>
            <param name="operationSet">
                Identifies this call as part of a deferred batch. For more details see
                http://msdn.microsoft.com/en-us/library/windows/desktop/ee415807(v=vs.85).aspx.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2SourceVoice.Stop">
            <summary>
                Stops consumption of audio by the current voice.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2SourceVoice.Stop(CSCore.XAudio2.SourceVoiceStopFlags,System.Int32)">
            <summary>
                Stops consumption of audio by the current voice.
            </summary>
            <param name="flags">
                Flags that control how the voice is stopped. Can be <see cref="F:CSCore.XAudio2.SourceVoiceStopFlags.None"/> or
                <see cref="F:CSCore.XAudio2.SourceVoiceStopFlags.PlayTails"/>.
            </param>
            <param name="operationSet">
                Identifies this call as part of a deferred batch. For more details see
                http://msdn.microsoft.com/en-us/library/windows/desktop/ee415807(v=vs.85).aspx.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2SourceVoice.SubmitSourceBufferNative(System.IntPtr,System.IntPtr)">
            <summary>
                Adds a new audio buffer to the voice queue.
            </summary>
            <param name="buffer">Pointer to an <see cref="T:CSCore.XAudio2.XAudio2Buffer"/> structure to queue.</param>
            <param name="bufferWma">Pointer to an additional XAudio2BufferWma structure used when submitting WMA data.</param>
            <returns>HRESULT</returns>
            <remarks>
                See
                http://msdn.microsoft.com/en-us/library/windows/desktop/microsoft.directx_sdk.ixaudio2sourcevoice.ixaudio2sourcevoice.submitsourcebuffer(v=vs.85).aspx.
            </remarks>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2SourceVoice.SubmitSourceBuffer(CSCore.XAudio2.XAudio2Buffer)">
            <summary>
                Adds a new audio buffer to the voice queue.
            </summary>
            <param name="buffer"><see cref="T:CSCore.XAudio2.XAudio2Buffer"/> structure to queue.</param>
            <remarks>
                See
                http://msdn.microsoft.com/en-us/library/windows/desktop/microsoft.directx_sdk.ixaudio2sourcevoice.ixaudio2sourcevoice.submitsourcebuffer(v=vs.85).aspx.
            </remarks>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2SourceVoice.FlushSourceBuffersNative">
            <summary>
                Removes all pending audio buffers from the voice queue. If the voice is started, the buffer that is currently
                playing is not removed from the queue.
            </summary>
            <returns>HRESULT</returns>
            <remarks>
                See
                http://msdn.microsoft.com/en-us/library/windows/desktop/microsoft.directx_sdk.ixaudio2sourcevoice.ixaudio2sourcevoice.flushsourcebuffers(v=vs.85).aspx.
            </remarks>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2SourceVoice.FlushSourceBuffers">
            <summary>
                Removes all pending audio buffers from the voice queue. If the voice is started, the buffer that is currently
                playing is not removed from the queue.
            </summary>
            <remarks>
                See
                http://msdn.microsoft.com/en-us/library/windows/desktop/microsoft.directx_sdk.ixaudio2sourcevoice.ixaudio2sourcevoice.flushsourcebuffers(v=vs.85).aspx.
            </remarks>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2SourceVoice.DiscontinuityNative">
            <summary>
                Notifies an XAudio2 voice that no more buffers are coming after the last one that is currently in its queue.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2SourceVoice.Discontinuity">
            <summary>
                Notifies an XAudio2 voice that no more buffers are coming after the last one that is currently in its queue.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2SourceVoice.ExitLoopNative(System.Int32)">
            <summary>
                Stops looping the voice when it reaches the end of the current loop region.
            </summary>
            <param name="operationSet">
                Identifies this call as part of a deferred batch. For more details see
                http://msdn.microsoft.com/en-us/library/windows/desktop/ee415807(v=vs.85).aspx.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2SourceVoice.ExitLoop(System.Int32)">
            <summary>
                Stops looping the voice when it reaches the end of the current loop region.
            </summary>
            <param name="operationSet">
                Identifies this call as part of a deferred batch. For more details see
                http://msdn.microsoft.com/en-us/library/windows/desktop/ee415807(v=vs.85).aspx.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2SourceVoice.ExitLoop">
            <summary>
                Stops looping the voice when it reaches the end of the current loop region.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2SourceVoice.GetState">
            <summary>
                Returns the voice's current cursor position data.
            </summary>
            <returns><see cref="T:CSCore.XAudio2.VoiceState"/> structure containing the state of the voice.</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2SourceVoice.GetState(CSCore.XAudio2.GetVoiceStateFlags)">
            <summary>
                Returns the voice's current cursor position data.
            </summary>
            <param name="flags">
                <b>XAudio2.8 only:</b> Flags controlling which voice state data should be returned.
                Valid values are <see cref="F:CSCore.XAudio2.GetVoiceStateFlags.Default"/> or <see cref="F:CSCore.XAudio2.GetVoiceStateFlags.NoSamplesPlayed"/>.
                The default value is <see cref="F:CSCore.XAudio2.GetVoiceStateFlags.Default"/>. If you specify
                <see cref="F:CSCore.XAudio2.GetVoiceStateFlags.NoSamplesPlayed"/>, GetState
                returns only the buffer state, not the sampler state.
                GetState takes roughly one-third as much time to complete when you specify
                <see cref="F:CSCore.XAudio2.GetVoiceStateFlags.NoSamplesPlayed"/>.
            </param>
            <returns><see cref="T:CSCore.XAudio2.VoiceState"/> structure containing the state of the voice.</returns>
            <remarks>If the <see cref="P:CSCore.XAudio2.XAudio2Voice.Version"/> is not <see cref="F:CSCore.XAudio2.XAudio2Version.XAudio2_8"/> the <paramref name="flags"/> parameter will be ignored.</remarks>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2SourceVoice.SetFrequencyRatioNative(System.Single,System.Int32)">
            <summary>
                Sets the frequency adjustment ratio of the voice.
            </summary>
            <param name="ratio">
                Frequency adjustment ratio. This value must be between <see cref="F:CSCore.XAudio2.XAudio2.MinFrequencyRatio"/> and
                the MaxFrequencyRatio parameter specified when the voice was created
                <see cref="M:CSCore.XAudio2.XAudio2.CreateSourceVoice(CSCore.WaveFormat,CSCore.XAudio2.VoiceFlags,System.Single,CSCore.XAudio2.IXAudio2VoiceCallback,System.Nullable{CSCore.XAudio2.VoiceSends},System.Nullable{CSCore.XAudio2.EffectChain})"/>
                .
            </param>
            <param name="operationSet">
                Identifies this call as part of a deferred batch. For more details see
                http://msdn.microsoft.com/en-us/library/windows/desktop/ee415807(v=vs.85).aspx.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2SourceVoice.SetFrequencyRatio(System.Single,System.Int32)">
            <summary>
                Sets the frequency adjustment ratio of the voice.
            </summary>
            <param name="ratio">
                Frequency adjustment ratio. This value must be between <see cref="F:CSCore.XAudio2.XAudio2.MinFrequencyRatio"/> and
                the MaxFrequencyRatio parameter specified when the voice was created
                <see cref="M:CSCore.XAudio2.XAudio2.CreateSourceVoice(CSCore.WaveFormat,CSCore.XAudio2.VoiceFlags,System.Single,CSCore.XAudio2.IXAudio2VoiceCallback,System.Nullable{CSCore.XAudio2.VoiceSends},System.Nullable{CSCore.XAudio2.EffectChain})"/>
                .
            </param>
            <param name="operationSet">
                Identifies this call as part of a deferred batch. For more details see
                http://msdn.microsoft.com/en-us/library/windows/desktop/ee415807(v=vs.85).aspx.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2SourceVoice.SetFrequencyRatio(System.Single)">
            <summary>
                Sets the frequency adjustment ratio of the voice.
            </summary>
            <param name="ratio">
                Frequency adjustment ratio. This value must be between <see cref="F:CSCore.XAudio2.XAudio2.MinFrequencyRatio"/> and
                the MaxFrequencyRatio parameter specified when the voice was created
                <see cref="M:CSCore.XAudio2.XAudio2.CreateSourceVoice(CSCore.WaveFormat,CSCore.XAudio2.VoiceFlags,System.Single,CSCore.XAudio2.IXAudio2VoiceCallback,System.Nullable{CSCore.XAudio2.VoiceSends},System.Nullable{CSCore.XAudio2.EffectChain})"/>
                .
            </param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2SourceVoice.GetFrequencyRatio">
            <summary>
                Returns the frequency adjustment ratio of the voi
            </summary>
            <returns>Current frequency adjustment ratio if successful.</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2SourceVoice.SetSourceSampleRateNative(System.Int32)">
            <summary>
                Reconfigures the voice to consume source data at a different sample rate than the rate specified when the voice was
                created.
            </summary>
            <param name="newSourceSampleRate">
                The new sample rate the voice should process submitted data at. Valid sample rates
                are 1kHz to 200kHz.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2SourceVoice.SetSourceSampleRate(System.Int32)">
            <summary>
                Reconfigures the voice to consume source data at a different sample rate than the rate specified when the voice was
                created.
            </summary>
            <param name="newSourceSampleRate">
                The new sample rate the voice should process submitted data at. Valid sample rates
                are 1kHz to 200kHz.
            </param>
        </member>
        <member name="P:CSCore.XAudio2.XAudio2SourceVoice.State">
            <summary>
            Gets the <see cref="T:CSCore.XAudio2.VoiceState"/> of the source voice.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.StreamingSourceVoice.#ctor(System.IntPtr,CSCore.XAudio2.VoiceCallback,CSCore.IWaveSource,System.Int32,CSCore.XAudio2.XAudio2Version)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.XAudio2.StreamingSourceVoice"/> class.
            </summary>
            <param name="ptr">Pointer to a <see cref="T:CSCore.XAudio2.XAudio2SourceVoice"/> object.</param>
            <param name="voiceCallback">
                <see cref="T:CSCore.XAudio2.VoiceCallback"/> instance which receives notifications from the
                <see cref="T:CSCore.XAudio2.XAudio2SourceVoice"/> which got passed as a pointer (see the <paramref name="ptr"/> argument).
            </param>
            <param name="waveSource"><see cref="T:CSCore.IWaveSource"/> which provides the audio data to stream.</param>
            <param name="bufferSize">
                Buffersize of the internal used buffers in milliseconds. Values in the range from 70ms to
                200ms are recommended.
            </param>
            <param name="version">The XAudio2 Version to use.</param>
            <remarks>It is recommended to use the <see cref="M:CSCore.XAudio2.StreamingSourceVoice.Create(CSCore.XAudio2.XAudio2,CSCore.IWaveSource,System.Int32)"/> method instead of the this constructor.</remarks>
        </member>
        <member name="M:CSCore.XAudio2.StreamingSourceVoice.Create(CSCore.XAudio2.XAudio2,CSCore.IWaveSource,System.Int32)">
            <summary>
                Creates an instance of the <see cref="T:CSCore.XAudio2.StreamingSourceVoice"/> class.
            </summary>
            <param name="xaudio2">Instance of the <see cref="T:CSCore.XAudio2.XAudio2"/> class.</param>
            <param name="waveSource"><see cref="T:CSCore.IWaveSource"/> which provides the audio data to stream.</param>
            <param name="bufferSize">
                Buffersize of the internal used buffers in milliseconds. Values in the range from 70ms to
                200ms are recommended.
            </param>
            <returns>Configured <see cref="T:CSCore.XAudio2.StreamingSourceVoice"/> instance.</returns>
        </member>
        <member name="M:CSCore.XAudio2.StreamingSourceVoice.Refill">
            <summary>
                Notifies the <see cref="T:CSCore.XAudio2.StreamingSourceVoice"/> class that new data got requested. If there are any buffers which
                are currently not queued and the underlying <see cref="T:CSCore.IWaveSource"/> holds any more data, this data refills the
                internal used buffers and provides audio data to play.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.StreamingSourceVoice.Dispose(System.Boolean)">
            <summary>
                Stops and disposes the <see cref="T:CSCore.XAudio2.XAudio2SourceVoice"/>, closes the internal used waithandle and frees the
                allocated memory of all used buffers.
            </summary>
            <param name="disposing">
                True to release both managed and unmanaged resources; false to release only unmanaged
                resources.
            </param>
        </member>
        <member name="E:CSCore.XAudio2.StreamingSourceVoice.Stopped">
            <summary>
                Occurs when the playback stops and no more data is available.
            </summary>
            <remarks>This event occurs whenever the <see cref="E:CSCore.XAudio2.VoiceCallback.StreamEnd"/> event occurs.</remarks>
        </member>
        <member name="T:CSCore.XAudio2.StreamingSourceVoiceListener">
            <summary>
                Provides a mechanism for playing <see cref="T:CSCore.XAudio2.StreamingSourceVoice"/> instances.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.StreamingSourceVoiceListener.MaxItems">
            <summary>
                Maximum amount of <see cref="T:CSCore.XAudio2.StreamingSourceVoice"/> instances a <see cref="T:CSCore.XAudio2.StreamingSourceVoiceListener"/> can
                contain.
            </summary>
            <remarks>Limited by the <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)"/> method.</remarks>
        </member>
        <member name="M:CSCore.XAudio2.StreamingSourceVoiceListener.Dispose">
            <summary>
                Disposes the <see cref="T:CSCore.XAudio2.StreamingSourceVoiceListener"/>.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.StreamingSourceVoiceListener.Add(CSCore.XAudio2.StreamingSourceVoice)">
            <summary>
                Adds a <see cref="T:CSCore.XAudio2.StreamingSourceVoice"/> to the <see cref="T:CSCore.XAudio2.StreamingSourceVoiceListener"/>.
            </summary>
            <param name="streamingSourceVoice">
                The <see cref="T:CSCore.XAudio2.StreamingSourceVoice"/> instance to add to the
                <see cref="T:CSCore.XAudio2.StreamingSourceVoiceListener"/>.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.StreamingSourceVoiceListener.Remove(CSCore.XAudio2.StreamingSourceVoice)">
            <summary>
                Removes a <see cref="T:CSCore.XAudio2.StreamingSourceVoice"/> from the <see cref="T:CSCore.XAudio2.StreamingSourceVoiceListener"/>.
            </summary>
            <param name="streamingSourceVoice">
                The <see cref="T:CSCore.XAudio2.StreamingSourceVoice"/> instance to remove from the
                <see cref="T:CSCore.XAudio2.StreamingSourceVoiceListener"/>.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.StreamingSourceVoiceListener.Dispose(System.Boolean)">
            <summary>
                Disposes the <see cref="T:CSCore.XAudio2.StreamingSourceVoiceListener"/> and stops the internal playback thread.
            </summary>
            <param name="disposing">
                True to release both managed and unmanaged resources; false to release only unmanaged
                resources.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.StreamingSourceVoiceListener.Finalize">
            <summary>
            Destructor which calls the <see cref="M:CSCore.XAudio2.StreamingSourceVoiceListener.Dispose(System.Boolean)"/> method.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.StreamingSourceVoiceListener.Default">
            <summary>
                Gets the default <see cref="T:CSCore.XAudio2.StreamingSourceVoiceListener"/> singleton instance.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.StreamingSourceVoiceListener.Count">
            <summary>
                Gets the number of items which got added to the <see cref="T:CSCore.XAudio2.StreamingSourceVoiceListener"/>.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.VoiceCallback">
            <summary>
                Default implementation of the <see cref="T:CSCore.XAudio2.IXAudio2VoiceCallback"/> interface.
            </summary>
        </member>
        <member name="E:CSCore.XAudio2.VoiceCallback.ProcessingPassStart">
            <summary>
                Called during each processing pass for each voice, just before XAudio2 reads data from the voice's buffer queue.
                The only argument passed to the eventhandler is the number of required bytes:
                The number of bytes that must be submitted immediately to avoid starvation. This allows the implementation of
                just-in-time streaming scenarios; the client can keep the absolute minimum data queued on the voice at all times,
                and pass it fresh data just before the data is required. This model provides the lowest possible latency attainable
                with XAudio2. For xWMA and XMA data BytesRequired will always be zero, since the concept of a frame of xWMA or XMA
                data is meaningless.
                Note: In a situation where there is always plenty of data available on the source voice, BytesRequired should
                always report zero, because it doesn't need any samples immediately to avoid glitching.
            </summary>
        </member>
        <member name="E:CSCore.XAudio2.VoiceCallback.ProcessingPassEnd">
            <summary>
                Called just after the processing pass for the voice ends.
            </summary>
        </member>
        <member name="E:CSCore.XAudio2.VoiceCallback.StreamEnd">
            <summary>
                Called when the voice has just finished playing a contiguous audio stream.
            </summary>
        </member>
        <member name="E:CSCore.XAudio2.VoiceCallback.BufferStart">
            <summary>
                Called when the voice is about to start processing a new audio buffer.
                The only argument passed to the eventhandler is a context pointer that was assigned to the pContext member of the
                <see cref="T:CSCore.XAudio2.XAudio2Buffer"/> structure when the buffer was submitted.
            </summary>
        </member>
        <member name="E:CSCore.XAudio2.VoiceCallback.BufferEnd">
            <summary>
                Called when the voice finishes processing a buffer.
                The only argument passed to the eventhandler is a context pointer that was assigned to the pContext member of the
                <see cref="T:CSCore.XAudio2.XAudio2Buffer"/> structure when the buffer was submitted.
            </summary>
        </member>
        <member name="E:CSCore.XAudio2.VoiceCallback.LoopEnd">
            <summary>
                Called when the voice reaches the end position of a loop.
                The only argument passed to the eventhandler is a context pointer that was assigned to the pContext member of the
                <see cref="T:CSCore.XAudio2.XAudio2Buffer"/> structure when the buffer was submitted.
            </summary>
        </member>
        <member name="E:CSCore.XAudio2.VoiceCallback.VoiceError">
            <summary>
                Called when a critical error occurs during voice processing.
                The first argument passed to the eventhandler is a context pointer that was assigned to the pContext member of the
                <see cref="T:CSCore.XAudio2.XAudio2Buffer"/> structure when the buffer was submitted.
                The second argument passed to the eventhandler is the HRESULT error code of the critical error.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.VoiceDetails">
            <summary>
                Contains information about the creation flags, input channels, and sample rate of a voice.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.VoiceDetails.CreationFlags">
            <summary>
                Flags used to create the voice; see the individual voice interfaces for more information.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.VoiceDetails.ActiveFlags">
            <summary>
                Flags that are currently set on the voice.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.VoiceDetails.InputChannels">
            <summary>
                The number of input channels the voice expects.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.VoiceDetails.InputSampleRate">
            <summary>
                The input sample rate the voice expects.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.VoiceFlags">
            <summary>
                VoiceFlags
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.VoiceFlags.None">
            <summary>
                None
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.VoiceFlags.NoPitch">
            <summary>
                No pitch control is available on the voice.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.VoiceFlags.NoSampleRateConversition">
            <summary>
                No sample rate conversion is available on the voice. The voice's outputs must have the same sample rate.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.VoiceFlags.UseFilter">
            <summary>
                The filter effect should be available on this voice.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.VoiceFlags.Music">
            <summary>
                <b>XAudio2.8 only:</b> Not supported on Windows.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.VoiceFlags.NoSamplesPlayed">
            <summary>
                <b>XAudio2.7 only:</b> Indicates that no samples were played.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.VoiceSendDescriptor">
            <summary>
                Defines a destination voice that is the target of a send from another voice and specifies whether a filter should
                be used.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.VoiceSendDescriptor.Flags">
            <summary>
                Either 0 or XAUDIO2_SEND_USEFILTER.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.VoiceSendDescriptor.OutputVoicePtr">
            <summary>
                This send's destination voice.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.VoiceSendDescriptor.#ctor(CSCore.XAudio2.VoiceSendFlags,CSCore.XAudio2.XAudio2Voice)">
            <summary>
                Creates a new instance of the <see cref="T:CSCore.XAudio2.VoiceSendDescriptor"/> structure.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.VoiceSendDescriptor.#ctor(CSCore.XAudio2.VoiceSendFlags,System.IntPtr)">
            <summary>
                Creates a new instance of the <see cref="T:CSCore.XAudio2.VoiceSendDescriptor"/> structure.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.VoiceSendFlags">
            <summary>
                VoiceSendFlags
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.VoiceSendFlags.None">
            <summary>
                None.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.VoiceSendFlags.UseFilter">
            <summary>
                Indicates a filter should be used on a voice send.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.VoiceSends">
            <summary>
                Defines a set of voices to receive data from a single output voice.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.VoiceSends.SendCount">
            <summary>
                Number of voices to receive the output of the voice. An OutputCount value of 0 indicates the voice should not send
                output to any voices.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.VoiceSends.SendsPtr">
            <summary>
                Array of <see cref="T:CSCore.XAudio2.VoiceSendDescriptor"/>s.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.VoiceState">
            <summary>
                Returns the voice's current state and cursor position data.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.VoiceState.CurrentBufferContextPtr">
            <summary>
                Pointer to a buffer context provided in the <see cref="T:CSCore.XAudio2.XAudio2Buffer"/> that is processed currently, or,
                if the voice is stopped currently, to the next buffer due to be processed.
                <see cref="F:CSCore.XAudio2.VoiceState.CurrentBufferContextPtr"/> is NULL if there are no buffers in the queue.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.VoiceState.BuffersQueued">
            <summary>
                Number of audio buffers currently queued on the voice, including the one that is processed currently.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.VoiceState.SamplesPlayed">
            <summary>
                Total number of samples processed by this voice since it last started, or since the last audio stream ended (as
                marked with the <see cref="F:CSCore.XAudio2.XAudio2BufferFlags.EndOfStream"/> flag).
                This total includes samples played multiple times due to looping.
                Theoretically, if all audio emitted by the voice up to this time is captured, this parameter would be the length of
                the audio stream in samples.
                If you specify <see cref="F:CSCore.XAudio2.GetVoiceStateFlags.NoSamplesPlayed"/> when you call
                <see cref="M:CSCore.XAudio2.XAudio2SourceVoice.GetState(CSCore.XAudio2.GetVoiceStateFlags)"/>,
                this member won't be calculated, and its value is unspecified on return from
                <see cref="M:CSCore.XAudio2.XAudio2SourceVoice.GetState(CSCore.XAudio2.GetVoiceStateFlags)"/>.
                <see cref="M:CSCore.XAudio2.XAudio2SourceVoice.GetState(CSCore.XAudio2.GetVoiceStateFlags)"/> takes about one-third as much time to
                complete when you specify <see cref="F:CSCore.XAudio2.GetVoiceStateFlags.NoSamplesPlayed"/>.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.X3DAudio.CalculateFlags">
            <summary>
            Flags which define calculate flags for calculating the 3D audio parameters.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.CalculateFlags.Matrix">
            <summary>
            Enables matrix coefficient table calculation. 
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.CalculateFlags.Delay">
            <summary>
            	Enables delay time array calculation (stereo only). 
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.CalculateFlags.LpfDirect">
            <summary>
            Enables low pass filter (LPF) direct-path coefficient calculation. 
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.CalculateFlags.LpfReverb">
            <summary>
            Enables LPF reverb-path coefficient calculation. 
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.CalculateFlags.Reverb">
            <summary>
            Enables reverb send level calculation. 
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.CalculateFlags.Doppler">
            <summary>
            Enables Doppler shift factor calculation. 
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.CalculateFlags.EmitterAngle">
            <summary>
            Enables emitter-to-listener interior angle calculation. 
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.CalculateFlags.ZeroCenter">
            <summary>
            Fills the center channel with silence. This flag allows you to keep a 6-channel matrix so you do not have to remap the channels, but the center channel will be silent. This flag is only valid if you also set <see cref="F:CSCore.XAudio2.X3DAudio.CalculateFlags.Matrix"/>. 
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.CalculateFlags.RedirectToLfe">
            <summary>
            Applies an equal mix of all source channels to a low frequency effect (LFE) destination channel. It only applies to matrix calculations with a source that does not have an LFE channel and a destination that does have an LFE channel. This flag is only valid if you also set <see cref="F:CSCore.XAudio2.X3DAudio.CalculateFlags.Matrix"/>.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.X3DAudio.Cone">
            <summary>
            Specifies directionality for a single-channel non-Low-Frequency-Effect emitter by scaling DSP behavior with respect to the emitter's orientation.
            </summary>
            <remarks>
            For a detailed explanation of sound cones see <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ee418803(v=vs.85).aspx"/>.
            </remarks>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.Cone.X3DAUDIO_2PI">
            <summary>
            X3DAUDIO_2PI
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.Cone.InnerAngle">
            <summary>
            Inner cone angle in radians. This value must be within 0.0f to <see cref="F:CSCore.XAudio2.X3DAudio.Cone.X3DAUDIO_2PI"/>.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.Cone.OuterAngle">
            <summary>
            Outer cone angle in radians. This value must be within InnerAngle to <see cref="F:CSCore.XAudio2.X3DAudio.Cone.X3DAUDIO_2PI"/>.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.Cone.InnerVolume">
            <summary>
            Volume scaler on/within inner cone. This value must be within 0.0f to 2.0f.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.Cone.OuterVolume">
            <summary>
            Volume scaler on/beyond outer cone. This value must be within 0.0f to 2.0f.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.Cone.InnerLPF">
            <summary>
            LPF direct-path or reverb-path coefficient scaler on/within inner cone. This value is only used for LPF calculations and must be within 0.0f to 1.0f.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.Cone.OuterLPF">
            <summary>
            LPF direct-path or reverb-path coefficient scaler on or beyond outer cone. This value is only used for LPF calculations and must be within 0.0f to 1.0f.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.Cone.InnerReverb">
            <summary>
            Reverb send level scaler on or within inner cone. This must be within 0.0f to 2.0f.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.Cone.OuterReverb">
            <summary>
            Reverb send level scaler on/beyond outer cone. This must be within 0.0f to 2.0f.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.X3DAudio.CurvePoint">
            <summary>
            Defines a DSP setting at a given normalized distance.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.CurvePoint.Distance">
            <summary>
            Normalized distance. This must be within 0.0f to 1.0f.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.CurvePoint.DspSetting">
            <summary>
            DSP control setting.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.X3DAudio.DspSettings">
            <summary>
            Receives the results from a call to <see cref="M:CSCore.XAudio2.X3DAudio.X3DAudioCore.X3DAudioCalculate(CSCore.XAudio2.X3DAudio.Listener,CSCore.XAudio2.X3DAudio.Emitter,CSCore.XAudio2.X3DAudio.CalculateFlags,CSCore.XAudio2.X3DAudio.DspSettings)"/>. 
            See http://msdn.microsoft.com/en-us/library/windows/desktop/microsoft.directx_sdk.x3daudio.x3daudio_dsp_settings%28v=vs.85%29.aspx for more details.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.X3DAudio.DspSettings.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.XAudio2.X3DAudio.DspSettings"/> class.
            </summary>
            <param name="sourceChannelCount">The number of source channels.</param>
            <param name="destinationChannelCount">The number of destination channels.</param>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.DspSettings.MatrixCoefficients">
            <summary>
                Gets the caller provided array that will be initialized with the volume level of each source channel present in each
                destination channel. The array must have at least (<see cref="P:CSCore.XAudio2.X3DAudio.DspSettings.SrcChannelCount"/> × <see cref="P:CSCore.XAudio2.X3DAudio.DspSettings.DstChannelCount"/>)
                elements. The array is arranged with the source channels as the column index of the array and the destination
                channels as the row index of the array.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.DspSettings.DelayTimes">
            <summary>
                Gets the caller provided delay time array, which receives delays for each destination channel in milliseconds. This array
                must have at least <see cref="P:CSCore.XAudio2.X3DAudio.DspSettings.DstChannelCount"/> elements. X3DAudio doesn't actually perform the delay. It simply
                returns the
                coefficients that may be used to adjust a delay DSP effect placed in the effect chain. This won't be calculated if the <see cref="F:CSCore.XAudio2.X3DAudio.CalculateFlags.Delay"/> flag is not specified when calling
                <see cref="M:CSCore.XAudio2.X3DAudio.X3DAudioCore.X3DAudioCalculate(CSCore.XAudio2.X3DAudio.Listener,CSCore.XAudio2.X3DAudio.Emitter,CSCore.XAudio2.X3DAudio.CalculateFlags,CSCore.XAudio2.X3DAudio.DspSettings)"/>.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.DspSettings.SrcChannelCount">
            <summary>
                Gets the number of source channels.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.DspSettings.DstChannelCount">
            <summary>
                Gets the number of source channels. 
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.DspSettings.LPFDirectCoefficient">
            <summary>
                Gets the LPF direct-path coefficient. Only calculated if the <see cref="F:CSCore.XAudio2.X3DAudio.CalculateFlags.LpfDirect"/> flag is specified when
                calling <see cref="M:CSCore.XAudio2.X3DAudio.X3DAudioCore.X3DAudioCalculate(CSCore.XAudio2.X3DAudio.Listener,CSCore.XAudio2.X3DAudio.Emitter,CSCore.XAudio2.X3DAudio.CalculateFlags,CSCore.XAudio2.X3DAudio.DspSettings)"/>.
                When using X3DAudio with XAudio2 the value returned in the LPFDirectCoefficient member would be applied to a low
                pass filter on a source voice with <see cref="M:CSCore.XAudio2.XAudio2Voice.SetFilterParameters(CSCore.XAudio2.FilterParameters,System.Int32)"/>.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.DspSettings.LPFReverbCoefficient">
            <summary>
                Gets the LPF reverb-path coefficient. Only calculated if the <see cref="F:CSCore.XAudio2.X3DAudio.CalculateFlags.LpfReverb"/> flag is specified when
                calling <see cref="M:CSCore.XAudio2.X3DAudio.X3DAudioCore.X3DAudioCalculate(CSCore.XAudio2.X3DAudio.Listener,CSCore.XAudio2.X3DAudio.Emitter,CSCore.XAudio2.X3DAudio.CalculateFlags,CSCore.XAudio2.X3DAudio.DspSettings)"/>.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.DspSettings.ReverbLevel">
            <summary>
                Gets the reverb send level. Only calculated if the <see cref="F:CSCore.XAudio2.X3DAudio.CalculateFlags.Reverb"/> flag is specified when calling
                <see cref="M:CSCore.XAudio2.X3DAudio.X3DAudioCore.X3DAudioCalculate(CSCore.XAudio2.X3DAudio.Listener,CSCore.XAudio2.X3DAudio.Emitter,CSCore.XAudio2.X3DAudio.CalculateFlags,CSCore.XAudio2.X3DAudio.DspSettings)"/>.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.DspSettings.DopplerFactor">
            <summary>
                Gets the doppler shift factor. Scales the resampler ratio for Doppler shift effect, where:
                <code>effective_frequency = DopplerFactor × original_frequency</code>.
                Only calculated if the <see cref="F:CSCore.XAudio2.X3DAudio.CalculateFlags.Doppler"/> flag is specified when calling
                <see cref="M:CSCore.XAudio2.X3DAudio.X3DAudioCore.X3DAudioCalculate(CSCore.XAudio2.X3DAudio.Listener,CSCore.XAudio2.X3DAudio.Emitter,CSCore.XAudio2.X3DAudio.CalculateFlags,CSCore.XAudio2.X3DAudio.DspSettings)"/>.
                When using X3DAudio with XAudio2 the value returned in the DopplerFactor would be applied to a source voice with
                <see cref="M:CSCore.XAudio2.XAudio2SourceVoice.SetFrequencyRatio(System.Single)"/>.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.DspSettings.EmitterToListenerAngle">
            <summary>
                Gets the emitter-to-listener interior angle, expressed in radians with respect to the emitter's front orientation.
                Only calculated if the <see cref="F:CSCore.XAudio2.X3DAudio.CalculateFlags.EmitterAngle"/> flag is specified when calling
                <see cref="M:CSCore.XAudio2.X3DAudio.X3DAudioCore.X3DAudioCalculate(CSCore.XAudio2.X3DAudio.Listener,CSCore.XAudio2.X3DAudio.Emitter,CSCore.XAudio2.X3DAudio.CalculateFlags,CSCore.XAudio2.X3DAudio.DspSettings)"/>.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.DspSettings.EmitterToListenerDistance">
            <summary>
                Gets the distance in user-defined world units from the listener to the emitter base position.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.DspSettings.EmitterVelocityComponent">
            <summary>
                Gets the component of emitter velocity vector projected onto emitter-to-listener vector in user-defined world units per
                second.
                Only calculated if the <see cref="F:CSCore.XAudio2.X3DAudio.CalculateFlags.Doppler"/> flag is specified when calling
                <see cref="M:CSCore.XAudio2.X3DAudio.X3DAudioCore.X3DAudioCalculate(CSCore.XAudio2.X3DAudio.Listener,CSCore.XAudio2.X3DAudio.Emitter,CSCore.XAudio2.X3DAudio.CalculateFlags,CSCore.XAudio2.X3DAudio.DspSettings)"/>.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.DspSettings.ListenerVelocityComponent">
            <summary>
                Gets the component of listener velocity vector projected onto the emitter-&gt;listener vector in user-defined world units per
                second. Only calculated if the <see cref="F:CSCore.XAudio2.X3DAudio.CalculateFlags.Doppler"/> flag is specified when calling
                <see cref="M:CSCore.XAudio2.X3DAudio.X3DAudioCore.X3DAudioCalculate(CSCore.XAudio2.X3DAudio.Listener,CSCore.XAudio2.X3DAudio.Emitter,CSCore.XAudio2.X3DAudio.CalculateFlags,CSCore.XAudio2.X3DAudio.DspSettings)"/>.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.DspSettings.DspSettingsNative.MatrixCoefficientsPtr">
            <summary>
                Caller provided array that will be initialized with the volume level of each source channel present in each
                destination channel. The array must have at least (<see cref="F:CSCore.XAudio2.X3DAudio.DspSettings.DspSettingsNative.SrcChannelCount"/> × <see cref="F:CSCore.XAudio2.X3DAudio.DspSettings.DspSettingsNative.DstChannelCount"/>)
                elements. The array is arranged with the source channels as the column index of the array and the destination
                channels as the row index of the array.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.DspSettings.DspSettingsNative.DelayTimesPtr">
            <summary>
                Caller provided delay time array, which receives delays for each destination channel in milliseconds. This array
                must have at least <see cref="F:CSCore.XAudio2.X3DAudio.DspSettings.DspSettingsNative.DstChannelCount"/> elements. X3DAudio doesn't actually perform the delay. It simply
                returns the
                coefficients that may be used to adjust a delay DSP effect placed in the effect chain. The
                <see cref="F:CSCore.XAudio2.X3DAudio.DspSettings.DspSettingsNative.DelayTimesPtr"/> member can
                be NULL if the <see cref="F:CSCore.XAudio2.X3DAudio.CalculateFlags.Delay"/> flag is not specified when calling
                <see cref="M:CSCore.XAudio2.X3DAudio.X3DAudioCore.X3DAudioCalculate(CSCore.XAudio2.X3DAudio.Listener,CSCore.XAudio2.X3DAudio.Emitter,CSCore.XAudio2.X3DAudio.CalculateFlags,CSCore.XAudio2.X3DAudio.DspSettings)"/>.
                Note  This member is only returned when X3DAudio is initialized for stereo output. For typical Xbox 360 usage, it
                will not return any data at all.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.DspSettings.DspSettingsNative.SrcChannelCount">
            <summary>
                Number of source channels. This must be initialized to the number of emitter channels before calling
                <see cref="M:CSCore.XAudio2.X3DAudio.X3DAudioCore.X3DAudioCalculate(CSCore.XAudio2.X3DAudio.Listener,CSCore.XAudio2.X3DAudio.Emitter,CSCore.XAudio2.X3DAudio.CalculateFlags,CSCore.XAudio2.X3DAudio.DspSettings)"/>.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.DspSettings.DspSettingsNative.DstChannelCount">
            <summary>
                Number of source channels. This must be initialized to the number of emitter channels before calling
                <see cref="M:CSCore.XAudio2.X3DAudio.X3DAudioCore.X3DAudioCalculate(CSCore.XAudio2.X3DAudio.Listener,CSCore.XAudio2.X3DAudio.Emitter,CSCore.XAudio2.X3DAudio.CalculateFlags,CSCore.XAudio2.X3DAudio.DspSettings)"/>.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.DspSettings.DspSettingsNative.LPFDirectCoefficient">
            <summary>
                LPF direct-path coefficient. Only calculated if the <see cref="F:CSCore.XAudio2.X3DAudio.CalculateFlags.LpfDirect"/> flag is specified when
                calling <see cref="M:CSCore.XAudio2.X3DAudio.X3DAudioCore.X3DAudioCalculate(CSCore.XAudio2.X3DAudio.Listener,CSCore.XAudio2.X3DAudio.Emitter,CSCore.XAudio2.X3DAudio.CalculateFlags,CSCore.XAudio2.X3DAudio.DspSettings)"/>.
                When using X3DAudio with XAudio2 the value returned in the LPFDirectCoefficient member would be applied to a low
                pass filter on a source voice with <see cref="M:CSCore.XAudio2.XAudio2Voice.SetFilterParameters(CSCore.XAudio2.FilterParameters,System.Int32)"/>.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.DspSettings.DspSettingsNative.LPFReverbCoefficient">
            <summary>
                LPF reverb-path coefficient. Only calculated if the <see cref="F:CSCore.XAudio2.X3DAudio.CalculateFlags.LpfReverb"/> flag is specified when
                calling <see cref="M:CSCore.XAudio2.X3DAudio.X3DAudioCore.X3DAudioCalculate(CSCore.XAudio2.X3DAudio.Listener,CSCore.XAudio2.X3DAudio.Emitter,CSCore.XAudio2.X3DAudio.CalculateFlags,CSCore.XAudio2.X3DAudio.DspSettings)"/>.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.DspSettings.DspSettingsNative.ReverbLevel">
            <summary>
                Reverb send level. Only calculated if the <see cref="F:CSCore.XAudio2.X3DAudio.CalculateFlags.Reverb"/> flag is specified when calling
                <see cref="M:CSCore.XAudio2.X3DAudio.X3DAudioCore.X3DAudioCalculate(CSCore.XAudio2.X3DAudio.Listener,CSCore.XAudio2.X3DAudio.Emitter,CSCore.XAudio2.X3DAudio.CalculateFlags,CSCore.XAudio2.X3DAudio.DspSettings)"/>.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.DspSettings.DspSettingsNative.DopplerFactor">
            <summary>
                Doppler shift factor. Scales the resampler ratio for Doppler shift effect, where:
                <code>effective_frequency = DopplerFactor × original_frequency</code>.
                Only calculated if the <see cref="F:CSCore.XAudio2.X3DAudio.CalculateFlags.Doppler"/> flag is specified when calling
                <see cref="M:CSCore.XAudio2.X3DAudio.X3DAudioCore.X3DAudioCalculate(CSCore.XAudio2.X3DAudio.Listener,CSCore.XAudio2.X3DAudio.Emitter,CSCore.XAudio2.X3DAudio.CalculateFlags,CSCore.XAudio2.X3DAudio.DspSettings)"/>.
                When using X3DAudio with XAudio2 the value returned in the DopplerFactor would be applied to a source voice with
                <see cref="M:CSCore.XAudio2.XAudio2SourceVoice.SetFrequencyRatio(System.Single)"/>.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.DspSettings.DspSettingsNative.EmitterToListenerAngle">
            <summary>
                Emitter-to-listener interior angle, expressed in radians with respect to the emitter's front orientation.
                Only calculated if the <see cref="F:CSCore.XAudio2.X3DAudio.CalculateFlags.EmitterAngle"/> flag is specified when calling
                <see cref="M:CSCore.XAudio2.X3DAudio.X3DAudioCore.X3DAudioCalculate(CSCore.XAudio2.X3DAudio.Listener,CSCore.XAudio2.X3DAudio.Emitter,CSCore.XAudio2.X3DAudio.CalculateFlags,CSCore.XAudio2.X3DAudio.DspSettings)"/>.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.DspSettings.DspSettingsNative.EmitterToListenerDistance">
            <summary>
                Distance in user-defined world units from the listener to the emitter base position.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.DspSettings.DspSettingsNative.EmitterVelocityComponent">
            <summary>
                Component of emitter velocity vector projected onto emitter-to-listener vector in user-defined world units per
                second.
                Only calculated if the <see cref="F:CSCore.XAudio2.X3DAudio.CalculateFlags.Doppler"/> flag is specified when calling
                <see cref="M:CSCore.XAudio2.X3DAudio.X3DAudioCore.X3DAudioCalculate(CSCore.XAudio2.X3DAudio.Listener,CSCore.XAudio2.X3DAudio.Emitter,CSCore.XAudio2.X3DAudio.CalculateFlags,CSCore.XAudio2.X3DAudio.DspSettings)"/>.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.DspSettings.DspSettingsNative.ListenerVelocityComponent">
            <summary>
                Component of listener velocity vector projected onto the emitter-&gt;listener vector in user-defined world units per
                second. Only calculated if the <see cref="F:CSCore.XAudio2.X3DAudio.CalculateFlags.Doppler"/> flag is specified when calling
                <see cref="M:CSCore.XAudio2.X3DAudio.X3DAudioCore.X3DAudioCalculate(CSCore.XAudio2.X3DAudio.Listener,CSCore.XAudio2.X3DAudio.Emitter,CSCore.XAudio2.X3DAudio.CalculateFlags,CSCore.XAudio2.X3DAudio.DspSettings)"/>.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.X3DAudio.Emitter">
            <summary>
            Defines a single-point or multiple-point 3D audio source that is used with an arbitrary number of sound channels.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.X3DAudio.Emitter.ReverbCurve">
            <summary>
            Gets or sets the reverb send level distance curve, or NULL to use default curve: [0.0f, 1.0f], [1.0f, 0.0f].
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.Emitter.Cone">
            <summary>
            Gets or sets the sound cone. Used only with single-channel emitters for matrix, LPF (both direct and reverb paths), and reverb calculations. NULL specifies the emitter is omnidirectional.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.Emitter.OrientFront">
            <summary>
            Gets or sets the orientation of the front direction. This value must be orthonormal with <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.OrientTop"/>. <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.OrientFront"/> must be normalized when used. For single-channel emitters without cones <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.OrientFront"/> is only used for emitter angle calculations. For multi channel emitters or single-channel with cones <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.OrientFront"/> is used for matrix, LPF (both direct and reverb paths), and reverb calculations.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.Emitter.OrientTop">
            <summary>
            Gets or sets the orientation of the top direction. This value must be orthonormal with <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.OrientFront"/>. <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.OrientTop"/> is only used with multi-channel emitters for matrix calculations.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.Emitter.Position">
            <summary>
            Gets or sets the position in user-defined world units. This value does not affect <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.Velocity"/>.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.Emitter.Velocity">
            <summary>
            Gets or sets the velocity vector in user-defined world units/second. This value is used only for doppler calculations. It does not affect <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.Position"/>.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.Emitter.InnerRadius">
            <summary>
            Gets or sets the value to be used for the inner radius calculations. If <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.InnerRadius"/> is 0, then no inner radius is used, but <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.InnerRadiusAngle"/> may still be used. This value must be between 0.0f and FLT_MAX.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.Emitter.InnerRadiusAngle">
            <summary>
            Gets or sets the value to be used for the inner radius angle calculations. This value must be between 0.0f and <see cref="F:System.Math.PI"/>/4.0 (which equals 45°).
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.Emitter.ChannelCount">
            <summary>
            Gets or sets the number of emitters defined by the <see cref="T:CSCore.XAudio2.X3DAudio.Emitter"/> class. Must be greater than 0.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.Emitter.ChannelRadius">
            <summary>
            Gets or sets the distance from <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.Position"/> that channels will be placed if <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.ChannelCount"/> is greater than 1. <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.ChannelRadius"/> is only used with multi-channel emitters for matrix calculations. Must be greater than or equal to 0.0f.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.Emitter.ChannelAzimuths">
            <summary>
            Gets or sets the table of channel positions, expressed as an azimuth in radians along the channel radius with respect to the front orientation vector in the plane orthogonal to the top orientation vector. An azimuth of 2*<see cref="F:System.Math.PI"/> specifies a channel is a low-frequency effects (LFE) channel. LFE channels are positioned at the emitter base and are calculated with respect to <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.LowFrequencyEffectCurve"/> only, never <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.VolumeCurve"/>. <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.ChannelAzimuths"/> must have at least <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.ChannelCount"/> elements, but can be NULL if <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.ChannelCount"/> = 1. The table values must be within 0.0f to 2*<see cref="F:System.Math.PI"/>. <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.ChannelAzimuths"/> is used with multi-channel emitters for matrix calculations.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.Emitter.VolumeCurve">
            <summary>
            Gets or sets the volume-level distance curve, which is used only for matrix calculations. NULL specifies a specialized default curve that conforms to the inverse square law, such that when distance is between 0.0f and <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.CurveDistanceScaler"/>× 1.0f, no attenuation is applied. When distance is greater than <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.CurveDistanceScaler"/>× 1.0f, the amplification factor is (<see cref="P:CSCore.XAudio2.X3DAudio.Emitter.CurveDistanceScaler"/>× 1.0f)/distance. At a distance of <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.CurveDistanceScaler"/>× 2.0f, the sound will be at half volume or -6 dB, at a distance of <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.CurveDistanceScaler"/>× 4.0f, the sound will be at one quarter volume or -12 dB, and so on. <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.VolumeCurve"/> and <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.LowFrequencyEffectCurve"/> are independent of each other. <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.VolumeCurve"/> does not affect LFE channel volume.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.Emitter.LowFrequencyEffectCurve">
            <summary>
            Gets or sets the LFE roll-off distance curve, or NULL to use default curve: [0.0f, <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.CurveDistanceScaler"/> ×1.0f], [<see cref="P:CSCore.XAudio2.X3DAudio.Emitter.CurveDistanceScaler"/> ×1.0f, 0.0f]. A NULL value for <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.LowFrequencyEffectCurve"/> specifies a default curve that conforms to the inverse square law with distances &lt;= <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.CurveDistanceScaler"/> clamped to no attenuation. <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.VolumeCurve"/> and <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.LowFrequencyEffectCurve"/> are independent of each other. <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.LowFrequencyEffectCurve"/> does not affect non LFE channel volume.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.Emitter.LowPassFilterDirectCurve">
            <summary>
            Gets or sets the low-pass filter (LPF) direct-path coefficient distance curve, or NULL to use the default curve: [0.0f, 1.0f], [1.0f, 0.75f]. <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.LowPassFilterDirectCurve"/> is only used for LPF direct-path calculations.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.Emitter.LowPassFilterReverbCurve">
            <summary>
            Gets or sets the LPF reverb-path coefficient distance curve, or NULL to use default curve: [0.0f, 0.75f], [1.0f, 0.75f]. <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.LowPassFilterReverbCurve"/> is only used for LPF reverb path calculations.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.Emitter.CurveDistanceScaler">
            <summary>
            Gets or sets the curve distance scaler that is used to scale normalized distance curves to user-defined world units, and/or to exaggerate their effect. This does not affect any other calculations. The value must be within the range FLT_MIN to FLT_MAX. <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.CurveDistanceScaler"/> is only used for matrix, LPF (both direct and reverb paths), and reverb calculations.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.Emitter.DopplerScaler">
            <summary>
            Doppler shift scaler that is used to exaggerate Doppler shift effect. <see cref="P:CSCore.XAudio2.X3DAudio.Emitter.DopplerScaler"/> is only used for Doppler calculations and does not affect any other calculations. The value must be within the range 0.0f to FLT_MAX.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.X3DAudio.Listener">
            <summary>
                Defines a point of 3D audio reception.
            </summary>
            <remarks>
                A listener's front and top vectors must be orthonormal. To be considered orthonormal, a pair of vectors must
                have a magnitude of 1 +- 1x10-5 and a dot product of 0 +- 1x10-5.
            </remarks>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.Listener.OrientFront">
            <summary>
                Gets or sets the orientation of front direction. When <see cref="P:CSCore.XAudio2.X3DAudio.Listener.Cone"/> is NULL OrientFront is used only for
                matrix and delay calculations. When <see cref="P:CSCore.XAudio2.X3DAudio.Listener.Cone"/> is not NULL OrientFront is used for matrix, LPF (both
                direct and reverb paths), and reverb calculations. This value must be orthonormal with <see cref="P:CSCore.XAudio2.X3DAudio.Listener.OrientTop"/>
                when used.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.Listener.OrientTop">
            <summary>
                Gets or sets the orientation of top direction, used only for matrix and delay calculations. This value must be
                orthonormal with <see cref="P:CSCore.XAudio2.X3DAudio.Listener.OrientFront"/> when used.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.Listener.Position">
            <summary>
                Gets or sets the position in user-defined world units. This value does not affect <see cref="P:CSCore.XAudio2.X3DAudio.Listener.Velocity"/>.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.Listener.Velocity">
            <summary>
                Gets or sets the velocity vector in user-defined world units per second, used only for doppler calculations. This
                value does not affect <see cref="P:CSCore.XAudio2.X3DAudio.Listener.Position"/>.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.X3DAudio.Listener.Cone">
            <summary>
                Gets or sets the <see cref="P:CSCore.XAudio2.X3DAudio.Listener.Cone"/> to use. Providing a listener cone will specify that additional calculations
                are performed when determining the volume and filter DSP parameters for individual sound sources. A NULL
                <see cref="P:CSCore.XAudio2.X3DAudio.Listener.Cone"/> value specifies an omnidirectional sound and no cone processing is applied. <see cref="P:CSCore.XAudio2.X3DAudio.Listener.Cone"/>
                is only used for matrix, LPF (both direct and reverb paths), and reverb calculations.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.X3DAudio.X3DAudioCore">
            <summary>
            Provides access to the X3DAudio functions.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.X3DAudio.X3DAudioCore.#ctor(CSCore.ChannelMask)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.XAudio2.X3DAudio.X3DAudioCore"/> class.
            </summary>
            <param name="channelMask">Assignment of channels to speaker positions. This value must not be zero.</param>
        </member>
        <member name="M:CSCore.XAudio2.X3DAudio.X3DAudioCore.#ctor(CSCore.ChannelMask,System.Single)">
            <summary>
                Initializes a new instance of <see cref="T:CSCore.XAudio2.X3DAudio.X3DAudioCore"/> class.
            </summary>
            <param name="speedOfSound">
                Speed of sound, in user-defined world units per second. Use this value only for doppler
                calculations. It must be greater than or equal to zero.
            </param>
            <param name="channelMask">Assignment of channels to speaker positions. This value must not be zero.</param>
        </member>
        <member name="M:CSCore.XAudio2.X3DAudio.X3DAudioCore.X3DAudioCalculate(CSCore.XAudio2.X3DAudio.Listener,CSCore.XAudio2.X3DAudio.Emitter,CSCore.XAudio2.X3DAudio.CalculateFlags,CSCore.XAudio2.X3DAudio.DspSettings)">
            <summary>
                Calculates DSP settings with respect to 3D parameters.
            </summary>
            <param name="listener">Represents the point of reception.</param>
            <param name="emitter">Represents the sound source.</param>
            <param name="flags">Bitwise combination of <see cref="T:CSCore.XAudio2.X3DAudio.CalculateFlags"/> specifying which 3D parameters to calculate.</param>
            <param name="settings">
                Instance of the <see cref="T:CSCore.XAudio2.X3DAudio.DspSettings"/> class that receives the calculation results.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.X3DAudio.X3DAudioCore.Dispose">
            <summary>
                Disposes the <see cref="T:CSCore.XAudio2.X3DAudio.X3DAudioCore"/> instance.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.X3DAudio.X3DAudioCore.Finalize">
            <summary>
            Destructor which calls <see cref="M:CSCore.XAudio2.X3DAudio.X3DAudioCore.Dispose"/>.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.X3DAudio.X3DAudioCore.X3DAudioHandle">
            <summary>
                X3DAUDIO_HANDLE is an opaque data structure. Because the operating system doesn't allocate any additional storage
                for the 3D audio instance handle, you don't need to free or close it.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.XAudio2">
            <summary>
                <see cref="T:CSCore.XAudio2.XAudio2"/> is the class for the XAudio2 object that manages all audio engine states, the audio
                processing thread, the voice graph, and so forth.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2.QuantumDenominator">
            <summary>
                The denominator of a quantum unit. In 10ms chunks (= 1/100 seconds).
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2.MinimumSampleRate">
            <summary>
                Minimum sample rate is 1000 Hz.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2.MaximumSampleRate">
            <summary>
                Maximum sample rate is 200 kHz.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2.MinFrequencyRatio">
            <summary>
                The minimum frequency ratio is 1/1024.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2.MaxFrequencyRatio">
            <summary>
                Maximum frequency ratio is 1024.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2.DefaultFrequencyRatio">
            <summary>
                The default value for the frequency ratio is 4.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2.MaxAudioChannels">
            <summary>
                The maximum number of supported channels is 64.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2.DefaultChannels">
            <summary>
                Value which indicates that the default number of channels should be used.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2.DefaultSampleRate">
            <summary>
                Values which indicates that the default sample rate should be used.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2.CommitAll">
            <summary>
                Value which can be used in combination with the <see cref="M:CSCore.XAudio2.XAudio2.CommitChanges(System.Int32)"/> method to commit all
                changes.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2.CommitNow">
            <summary>
                Values which indicates that the made changes should be commited instantly.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.#ctor">
            <summary>
                Internal default ctor.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.#ctor(System.IntPtr,CSCore.XAudio2.XAudio2Version)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.XAudio2.XAudio2"/> class.
            </summary>
            <param name="ptr">Native pointer of the <see cref="T:CSCore.XAudio2.XAudio2Voice"/> object.</param>
            <param name="version">The XAudio2 subversion to use.</param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.CreateXAudio2">
            <summary>
                Creates a new instance of the <see cref="T:CSCore.XAudio2.XAudio2"/> class.
                If no supported XAudio2 version is available, the CreateXAudio2 method throws an
                <see cref="T:System.NotSupportedException"/>.
            </summary>
            <returns>A new <see cref="T:CSCore.XAudio2.XAudio2"/> instance.</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.CreateXAudio2(System.Nullable{CSCore.XAudio2.XAudio2Processor})">
            <summary>
                Creates a new instance of the <see cref="T:CSCore.XAudio2.XAudio2"/> class.
                If no supported XAudio2 version is available, the CreateXAudio2 method throws an
                <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="processor">The <see cref="T:CSCore.XAudio2.XAudio2Processor"/> to use.</param>
            <returns>A new <see cref="T:CSCore.XAudio2.XAudio2"/> instance.</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.RegisterForCallbacksNative(CSCore.XAudio2.IXAudio2EngineCallback)">
            <summary>
                Adds an <see cref="T:CSCore.XAudio2.IXAudio2EngineCallback"/> from the <see cref="T:CSCore.XAudio2.XAudio2"/> engine callback list.
            </summary>
            <param name="callback">
                <see cref="T:CSCore.XAudio2.IXAudio2EngineCallback"/> object to add to the <see cref="T:CSCore.XAudio2.XAudio2"/> engine
                callback list.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.RegisterForCallbacks(CSCore.XAudio2.IXAudio2EngineCallback)">
            <summary>
                Adds an <see cref="T:CSCore.XAudio2.IXAudio2EngineCallback"/> from the <see cref="T:CSCore.XAudio2.XAudio2"/> engine callback list.
            </summary>
            <param name="callback">
                <see cref="T:CSCore.XAudio2.IXAudio2EngineCallback"/> object to add to the <see cref="T:CSCore.XAudio2.XAudio2"/> engine
                callback list.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.UnregisterForCallbacks(CSCore.XAudio2.IXAudio2EngineCallback)">
            <summary>
                Removes an <see cref="T:CSCore.XAudio2.IXAudio2EngineCallback"/> from the <see cref="T:CSCore.XAudio2.XAudio2"/> engine callback list.
            </summary>
            <param name="callback">
                <see cref="T:CSCore.XAudio2.IXAudio2EngineCallback"/> object to remove from the <see cref="T:CSCore.XAudio2.XAudio2"/> engine
                callback list. If the given interface is present more than once in the list, only the first instance in the list
                will be removed.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.CreateSourceVoiceNative(System.IntPtr@,System.IntPtr,CSCore.XAudio2.VoiceFlags,System.Single,CSCore.XAudio2.IXAudio2VoiceCallback,System.Nullable{CSCore.XAudio2.VoiceSends},System.Nullable{CSCore.XAudio2.EffectChain})">
            <summary>
                Creates and configures a source voice. For more information see
                http://msdn.microsoft.com/en-us/library/windows/desktop/microsoft.directx_sdk.ixaudio2.ixaudio2.createsourcevoice(v=vs.85).aspx.
            </summary>
            <param name="pSourceVoice">If successful, returns a pointer to the new <see cref="T:CSCore.XAudio2.XAudio2SourceVoice"/> object.</param>
            <param name="sourceFormat">
                Pointer to a <see cref="T:CSCore.WaveFormat"/>. The following formats are supported:
                <ul>
                    <li>8-bit (unsigned) integer PCM</li><li>16-bit integer PCM (optimal format for XAudio2)</li>
                    <li>20-bit integer PCM (either in 24 or 32 bit containers)</li>
                    <li>24-bit integer PCM (either in 24 or 32 bit containers)</li><li>32-bit integer PCM</li>
                    <li>32-bit float PCM (preferred format after 16-bit integer)</li>
                </ul>
                The number of channels in a source voice must be less than or equal to <see cref="F:CSCore.XAudio2.XAudio2.MaxAudioChannels"/>. The sample
                rate of a source voice must be between <see cref="F:CSCore.XAudio2.XAudio2.MinimumSampleRate"/> and <see cref="F:CSCore.XAudio2.XAudio2.MaximumSampleRate"/>.
            </param>
            <param name="flags">
                <see cref="T:CSCore.XAudio2.VoiceFlags"/> that specify the behavior of the source voice. A flag can be
                <see cref="F:CSCore.XAudio2.VoiceFlags.None"/> or a combination of one or more of the following.
                Possible values are <see cref="F:CSCore.XAudio2.VoiceFlags.NoPitch"/>, <see cref="F:CSCore.XAudio2.VoiceFlags.NoSampleRateConversition"/> and
                <see cref="F:CSCore.XAudio2.VoiceFlags.UseFilter"/>. <see cref="F:CSCore.XAudio2.VoiceFlags.Music"/> is not supported on Windows.
            </param>
            <param name="maxFrequencyRatio">
                Highest allowable frequency ratio that can be set on this voice. The value for this
                argument must be between <see cref="F:CSCore.XAudio2.XAudio2.MinFrequencyRatio"/> and <see cref="F:CSCore.XAudio2.XAudio2.MaxFrequencyRatio"/>.
            </param>
            <param name="voiceCallback">
                Client-provided callback interface, <see cref="T:CSCore.XAudio2.IXAudio2VoiceCallback"/>. This parameter is
                optional and can be null.
            </param>
            <param name="sendList">
                List of <see cref="T:CSCore.XAudio2.VoiceSends"/> structures that describe the set of destination voices for the
                source voice. If <paramref name="sendList"/> is NULL, the send list defaults to a single output to the first
                mastering
                voice created.
            </param>
            <param name="effectChain">
                List of <see cref="T:CSCore.XAudio2.EffectChain"/> structures that describe an effect chain to use in the
                source voice. This parameter is optional and can be null.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.CreateSourceVoicePtr(CSCore.WaveFormat,CSCore.XAudio2.VoiceFlags,System.Single,CSCore.XAudio2.IXAudio2VoiceCallback,System.Nullable{CSCore.XAudio2.VoiceSends},System.Nullable{CSCore.XAudio2.EffectChain})">
            <summary>
                Creates and configures a source voice. For more information see
                http://msdn.microsoft.com/en-us/library/windows/desktop/microsoft.directx_sdk.ixaudio2.ixaudio2.createsourcevoice(v=vs.85).aspx.
            </summary>
            <param name="sourceFormat">
                Pointer to a <see cref="T:CSCore.WaveFormat"/>. The following formats are supported:
                <ul>
                    <li>8-bit (unsigned) integer PCM</li><li>16-bit integer PCM (optimal format for XAudio2)</li>
                    <li>20-bit integer PCM (either in 24 or 32 bit containers)</li>
                    <li>24-bit integer PCM (either in 24 or 32 bit containers)</li><li>32-bit integer PCM</li>
                    <li>32-bit float PCM (preferred format after 16-bit integer)</li>
                </ul>
                The number of channels in a source voice must be less than or equal to <see cref="F:CSCore.XAudio2.XAudio2.MaxAudioChannels"/>. The
                sample rate of a source voice must be between <see cref="F:CSCore.XAudio2.XAudio2.MinimumSampleRate"/> and <see cref="F:CSCore.XAudio2.XAudio2.MaximumSampleRate"/>
                .
            </param>
            <param name="flags">
                <see cref="T:CSCore.XAudio2.VoiceFlags"/> that specify the behavior of the source voice. A flag can be
                <see cref="F:CSCore.XAudio2.VoiceFlags.None"/> or a combination of one or more of the following.
                Possible values are <see cref="F:CSCore.XAudio2.VoiceFlags.NoPitch"/>, <see cref="F:CSCore.XAudio2.VoiceFlags.NoSampleRateConversition"/> and
                <see cref="F:CSCore.XAudio2.VoiceFlags.UseFilter"/>. <see cref="F:CSCore.XAudio2.VoiceFlags.Music"/> is not supported on Windows.
            </param>
            <param name="maxFrequencyRatio">
                Highest allowable frequency ratio that can be set on this voice. The value for this
                argument must be between <see cref="F:CSCore.XAudio2.XAudio2.MinFrequencyRatio"/> and <see cref="F:CSCore.XAudio2.XAudio2.MaxFrequencyRatio"/>.
            </param>
            <param name="voiceCallback">
                Client-provided callback interface, <see cref="T:CSCore.XAudio2.IXAudio2VoiceCallback"/>. This parameter is
                optional and can be null.
            </param>
            <param name="sendList">
                List of <see cref="T:CSCore.XAudio2.VoiceSends"/> structures that describe the set of destination voices for the
                source voice. If <paramref name="sendList"/> is NULL, the send list defaults to a single output to the first
                mastering
                voice created.
            </param>
            <param name="effectChain">
                List of <see cref="T:CSCore.XAudio2.EffectChain"/> structures that describe an effect chain to use in the
                source voice. This parameter is optional and can be null.
            </param>
            <returns>If successful, returns a pointer to the new <see cref="T:CSCore.XAudio2.XAudio2SourceVoice"/> object.</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.CreateSourceVoice(CSCore.WaveFormat,CSCore.XAudio2.VoiceFlags,System.Single,CSCore.XAudio2.IXAudio2VoiceCallback,System.Nullable{CSCore.XAudio2.VoiceSends},System.Nullable{CSCore.XAudio2.EffectChain})">
            <summary>
                Creates and configures a source voice. For more information see
                http://msdn.microsoft.com/en-us/library/windows/desktop/microsoft.directx_sdk.ixaudio2.ixaudio2.createsourcevoice(v=vs.85).aspx.
            </summary>
            <param name="sourceFormat">
                Pointer to a <see cref="T:CSCore.WaveFormat"/>. The following formats are supported:
                <ul>
                    <li>8-bit (unsigned) integer PCM</li><li>16-bit integer PCM (optimal format for XAudio2)</li>
                    <li>20-bit integer PCM (either in 24 or 32 bit containers)</li>
                    <li>24-bit integer PCM (either in 24 or 32 bit containers)</li><li>32-bit integer PCM</li>
                    <li>32-bit float PCM (preferred format after 16-bit integer)</li>
                </ul>
                The number of channels in a source voice must be less than or equal to <see cref="F:CSCore.XAudio2.XAudio2.MaxAudioChannels"/>. The
                sample rate of a source voice must be between <see cref="F:CSCore.XAudio2.XAudio2.MinimumSampleRate"/> and <see cref="F:CSCore.XAudio2.XAudio2.MaximumSampleRate"/>
                .
            </param>
            <param name="flags">
                <see cref="T:CSCore.XAudio2.VoiceFlags"/> that specify the behavior of the source voice. A flag can be
                <see cref="F:CSCore.XAudio2.VoiceFlags.None"/> or a combination of one or more of the following.
                Possible values are <see cref="F:CSCore.XAudio2.VoiceFlags.NoPitch"/>, <see cref="F:CSCore.XAudio2.VoiceFlags.NoSampleRateConversition"/> and
                <see cref="F:CSCore.XAudio2.VoiceFlags.UseFilter"/>. <see cref="F:CSCore.XAudio2.VoiceFlags.Music"/> is not supported on Windows.
            </param>
            <param name="maxFrequencyRatio">
                Highest allowable frequency ratio that can be set on this voice. The value for this
                argument must be between <see cref="F:CSCore.XAudio2.XAudio2.MinFrequencyRatio"/> and <see cref="F:CSCore.XAudio2.XAudio2.MaxFrequencyRatio"/>.
            </param>
            <param name="voiceCallback">
                Client-provided callback interface, <see cref="T:CSCore.XAudio2.IXAudio2VoiceCallback"/>. This parameter is
                optional and can be null.
            </param>
            <param name="sendList">
                List of <see cref="T:CSCore.XAudio2.VoiceSends"/> structures that describe the set of destination voices for the
                source voice. If <paramref name="sendList"/> is NULL, the send list defaults to a single output to the first
                mastering
                voice created.
            </param>
            <param name="effectChain">
                List of <see cref="T:CSCore.XAudio2.EffectChain"/> structures that describe an effect chain to use in the
                source voice. This parameter is optional and can be null.
            </param>
            <returns>If successful, returns a new <see cref="T:CSCore.XAudio2.XAudio2SourceVoice"/> object.</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.CreateSourceVoice(CSCore.WaveFormat,CSCore.XAudio2.VoiceFlags)">
            <summary>
                Creates and configures a source voice.
            </summary>
            <param name="sourceFormat">
                Pointer to a <see cref="T:CSCore.WaveFormat"/>. The following formats are supported:
                <ul>
                    <li>8-bit (unsigned) integer PCM</li><li>16-bit integer PCM (optimal format for XAudio2)</li>
                    <li>20-bit integer PCM (either in 24 or 32 bit containers)</li>
                    <li>24-bit integer PCM (either in 24 or 32 bit containers)</li><li>32-bit integer PCM</li>
                    <li>32-bit float PCM (preferred format after 16-bit integer)</li>
                </ul>
                The number of channels in a source voice must be less than or equal to <see cref="F:CSCore.XAudio2.XAudio2.MaxAudioChannels"/>. The
                sample rate of a source voice must be between <see cref="F:CSCore.XAudio2.XAudio2.MinimumSampleRate"/> and <see cref="F:CSCore.XAudio2.XAudio2.MaximumSampleRate"/>
                .
            </param>
            <param name="flags">
                <see cref="T:CSCore.XAudio2.VoiceFlags"/> that specify the behavior of the source voice. A flag can be
                <see cref="F:CSCore.XAudio2.VoiceFlags.None"/> or a combination of one or more of the following.
                Possible values are <see cref="F:CSCore.XAudio2.VoiceFlags.NoPitch"/>, <see cref="F:CSCore.XAudio2.VoiceFlags.NoSampleRateConversition"/> and
                <see cref="F:CSCore.XAudio2.VoiceFlags.UseFilter"/>. <see cref="F:CSCore.XAudio2.VoiceFlags.Music"/> is not supported on Windows.
            </param>
            <returns>If successful, returns a new <see cref="T:CSCore.XAudio2.XAudio2SourceVoice"/> object.</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.CreateSourceVoice(CSCore.WaveFormat)">
            <summary>
                Creates and configures a source voice.
            </summary>
            <param name="sourceFormat">
                Pointer to a <see cref="T:CSCore.WaveFormat"/>. The following formats are supported:
                <ul>
                    <li>8-bit (unsigned) integer PCM</li><li>16-bit integer PCM (optimal format for XAudio2)</li>
                    <li>20-bit integer PCM (either in 24 or 32 bit containers)</li>
                    <li>24-bit integer PCM (either in 24 or 32 bit containers)</li><li>32-bit integer PCM</li>
                    <li>32-bit float PCM (preferred format after 16-bit integer)</li>
                </ul>
                The number of channels in a source voice must be less than or equal to <see cref="F:CSCore.XAudio2.XAudio2.MaxAudioChannels"/>. The
                sample rate of a source voice must be between <see cref="F:CSCore.XAudio2.XAudio2.MinimumSampleRate"/> and <see cref="F:CSCore.XAudio2.XAudio2.MaximumSampleRate"/>
                .
            </param>
            <returns>If successful, returns a new <see cref="T:CSCore.XAudio2.XAudio2SourceVoice"/> object.</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.CreateSubmixVoiceNative(System.IntPtr@,System.Int32,System.Int32,CSCore.XAudio2.VoiceFlags,System.Int32,System.Nullable{CSCore.XAudio2.VoiceSends},System.Nullable{CSCore.XAudio2.EffectChain})">
            <summary>
                Creates and configures a submix voice.
            </summary>
            <param name="pSubmixVoice">On success, returns a pointer to the new <see cref="T:CSCore.XAudio2.XAudio2SubmixVoice"/> object.</param>
            <param name="inputChannels">
                Number of channels in the input audio data of the submix voice. The
                <paramref name="inputChannels"/> must be less than or equal to <see cref="F:CSCore.XAudio2.XAudio2.MaxAudioChannels"/>.
            </param>
            <param name="inputSampleRate">
                Sample rate of the input audio data of submix voice. This rate must be a multiple of
                <see cref="F:CSCore.XAudio2.XAudio2.QuantumDenominator"/>. InputSampleRate must be between <see cref="F:CSCore.XAudio2.XAudio2.MinimumSampleRate"/> and
                <see cref="F:CSCore.XAudio2.XAudio2.MaximumSampleRate"/>.
            </param>
            <param name="flags">
                Flags that specify the behavior of the submix voice. It can be <see cref="F:CSCore.XAudio2.VoiceFlags.None"/> or
                <see cref="F:CSCore.XAudio2.VoiceFlags.UseFilter"/>.
            </param>
            <param name="processingStage">
                An arbitrary number that specifies when this voice is processed with respect to other
                submix voices, if the XAudio2 engine is running other submix voices. The voice is processed after all other voices
                that include a smaller <paramref name="processingStage"/> value and before all other voices that include a larger
                <paramref name="processingStage"/> value. Voices that include the same <paramref name="processingStage"/> value
                are
                processed in any order. A submix voice cannot send to another submix voice with a lower or equal
                <paramref name="processingStage"/> value. This prevents audio being lost due to a submix cycle.
            </param>
            <param name="sendList">
                List of <see cref="T:CSCore.XAudio2.VoiceSends"/> structures that describe the set of destination voices for the
                submix voice. If <paramref name="sendList"/> is NULL, the send list will default to a single output to the first
                mastering voice created.
            </param>
            <param name="effectChain">
                List of <see cref="T:CSCore.XAudio2.EffectChain"/> structures that describe an effect chain to use in the
                submix voice. This parameter is optional and can be null.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.CreateSubmixVoicePtr(System.Int32,System.Int32,CSCore.XAudio2.VoiceFlags,System.Int32,System.Nullable{CSCore.XAudio2.VoiceSends},System.Nullable{CSCore.XAudio2.EffectChain})">
            <summary>
                Creates and configures a submix voice.
            </summary>
            <param name="inputChannels">
                Number of channels in the input audio data of the submix voice. The
                <paramref name="inputChannels"/> must be less than or equal to <see cref="F:CSCore.XAudio2.XAudio2.MaxAudioChannels"/>.
            </param>
            <param name="inputSampleRate">
                Sample rate of the input audio data of submix voice. This rate must be a multiple of
                <see cref="F:CSCore.XAudio2.XAudio2.QuantumDenominator"/>. InputSampleRate must be between <see cref="F:CSCore.XAudio2.XAudio2.MinimumSampleRate"/> and
                <see cref="F:CSCore.XAudio2.XAudio2.MaximumSampleRate"/>.
            </param>
            <param name="flags">
                Flags that specify the behavior of the submix voice. It can be <see cref="F:CSCore.XAudio2.VoiceFlags.None"/> or
                <see cref="F:CSCore.XAudio2.VoiceFlags.UseFilter"/>.
            </param>
            <param name="processingStage">
                An arbitrary number that specifies when this voice is processed with respect to other
                submix voices, if the XAudio2 engine is running other submix voices. The voice is processed after all other voices
                that include a smaller <paramref name="processingStage"/> value and before all other voices that include a larger
                <paramref name="processingStage"/> value. Voices that include the same <paramref name="processingStage"/> value
                are
                processed in any order. A submix voice cannot send to another submix voice with a lower or equal
                <paramref name="processingStage"/> value. This prevents audio being lost due to a submix cycle.
            </param>
            <param name="sendList">
                List of <see cref="T:CSCore.XAudio2.VoiceSends"/> structures that describe the set of destination voices for the
                submix voice. If <paramref name="sendList"/> is NULL, the send list will default to a single output to the first
                mastering voice created.
            </param>
            <param name="effectChain">
                List of <see cref="T:CSCore.XAudio2.EffectChain"/> structures that describe an effect chain to use in the
                submix voice. This parameter is optional and can be null.
            </param>
            <returns>On success, returns a pointer to the new <see cref="T:CSCore.XAudio2.XAudio2SubmixVoice"/> object.</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.CreateSubmixVoice(System.Int32,System.Int32,CSCore.XAudio2.VoiceFlags,System.Int32,System.Nullable{CSCore.XAudio2.VoiceSends},System.Nullable{CSCore.XAudio2.EffectChain})">
            <summary>
                Creates and configures a submix voice.
            </summary>
            <param name="inputChannels">
                Number of channels in the input audio data of the submix voice. The
                <paramref name="inputChannels"/> must be less than or equal to <see cref="F:CSCore.XAudio2.XAudio2.MaxAudioChannels"/>.
            </param>
            <param name="inputSampleRate">
                Sample rate of the input audio data of submix voice. This rate must be a multiple of
                <see cref="F:CSCore.XAudio2.XAudio2.QuantumDenominator"/>. InputSampleRate must be between <see cref="F:CSCore.XAudio2.XAudio2.MinimumSampleRate"/> and
                <see cref="F:CSCore.XAudio2.XAudio2.MaximumSampleRate"/>.
            </param>
            <param name="flags">
                Flags that specify the behavior of the submix voice. It can be <see cref="F:CSCore.XAudio2.VoiceFlags.None"/> or
                <see cref="F:CSCore.XAudio2.VoiceFlags.UseFilter"/>.
            </param>
            <param name="processingStage">
                An arbitrary number that specifies when this voice is processed with respect to other
                submix voices, if the XAudio2 engine is running other submix voices. The voice is processed after all other voices
                that include a smaller <paramref name="processingStage"/> value and before all other voices that include a larger
                <paramref name="processingStage"/> value. Voices that include the same <paramref name="processingStage"/> value
                are
                processed in any order. A submix voice cannot send to another submix voice with a lower or equal
                <paramref name="processingStage"/> value. This prevents audio being lost due to a submix cycle.
            </param>
            <param name="sendList">
                List of <see cref="T:CSCore.XAudio2.VoiceSends"/> structures that describe the set of destination voices for the
                submix voice. If <paramref name="sendList"/> is NULL, the send list will default to a single output to the first
                mastering voice created.
            </param>
            <param name="effectChain">
                List of <see cref="T:CSCore.XAudio2.EffectChain"/> structures that describe an effect chain to use in the
                submix voice. This parameter is optional and can be null.
            </param>
            <returns>On success, returns a new <see cref="T:CSCore.XAudio2.XAudio2SubmixVoice"/> object.</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.CreateSubmixVoice(System.Int32,System.Int32,CSCore.XAudio2.VoiceFlags)">
            <summary>
                Creates and configures a submix voice.
            </summary>
            <param name="inputChannels">
                Number of channels in the input audio data of the submix voice. The
                <paramref name="inputChannels"/> must be less than or equal to <see cref="F:CSCore.XAudio2.XAudio2.MaxAudioChannels"/>.
            </param>
            <param name="inputSampleRate">
                Sample rate of the input audio data of submix voice. This rate must be a multiple of
                <see cref="F:CSCore.XAudio2.XAudio2.QuantumDenominator"/>. InputSampleRate must be between <see cref="F:CSCore.XAudio2.XAudio2.MinimumSampleRate"/> and
                <see cref="F:CSCore.XAudio2.XAudio2.MaximumSampleRate"/>.
            </param>
            <param name="flags">
                Flags that specify the behavior of the submix voice. It can be <see cref="F:CSCore.XAudio2.VoiceFlags.None"/> or
                <see cref="F:CSCore.XAudio2.VoiceFlags.UseFilter"/>.
            </param>
            <returns>On success, returns a new <see cref="T:CSCore.XAudio2.XAudio2SubmixVoice"/> object.</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.CreateMasteringVoiceNative(System.IntPtr@,System.Int32,System.Int32,System.Int32,System.Object,System.Nullable{CSCore.XAudio2.EffectChain},CSCore.XAudio2.AudioStreamCategory)">
            <summary>
                Creates and configures a mastering voice.
            </summary>
            <param name="pMasteringVoice">If successful, returns a pointer to the new <see cref="T:CSCore.XAudio2.XAudio2MasteringVoice"/> object.</param>
            <param name="inputChannels">
                Number of channels the mastering voice expects in its input audio. <paramref name="inputChannels"/> must be less
                than
                or equal to <see cref="F:CSCore.XAudio2.XAudio2.MaxAudioChannels"/>.
                You can set InputChannels to <see cref="F:CSCore.XAudio2.XAudio2.DefaultChannels"/>, which causes XAudio2 to try to detect the system
                speaker configuration setup.
            </param>
            <param name="inputSampleRate">
                Sample rate of the input audio data of the mastering voice. This rate must be a multiple of
                <see cref="F:CSCore.XAudio2.XAudio2.QuantumDenominator"/>. <paramref name="inputSampleRate"/> must be between
                <see cref="F:CSCore.XAudio2.XAudio2.MinimumSampleRate"/>
                and <see cref="F:CSCore.XAudio2.XAudio2.MaximumSampleRate"/>.
                You can set InputSampleRate to <see cref="F:CSCore.XAudio2.XAudio2.DefaultSampleRate"/>, with the default being determined by the current
                platform.
            </param>
            <param name="flags">Flags that specify the behavior of the mastering voice. Must be 0.</param>
            <param name="device">
                Identifier of the device to receive the output audio. Specifying the default value of NULL (for XAudio2.8) or 0 (for XAudio2.7) causes
                XAudio2 to select the global default audio device.
            </param>
            <param name="effectChain">
                <see cref="T:CSCore.XAudio2.EffectChain"/> structure that describes an effect chain to use in the mastering
                voice, or NULL to use no effects.
            </param>
            <param name="streamCategory">The audio stream category to use for this mastering voice.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.CreateMasteringVoicePtr(System.Int32,System.Int32,System.Int32,System.Object,System.Nullable{CSCore.XAudio2.EffectChain},CSCore.XAudio2.AudioStreamCategory)">
            <summary>
                Creates and configures a mastering voice.
            </summary>
            <param name="inputChannels">
                Number of channels the mastering voice expects in its input audio. <paramref name="inputChannels"/> must be less
                than
                or equal to <see cref="F:CSCore.XAudio2.XAudio2.MaxAudioChannels"/>.
                You can set InputChannels to <see cref="F:CSCore.XAudio2.XAudio2.DefaultChannels"/>, which causes XAudio2 to try to detect the system
                speaker configuration setup.
            </param>
            <param name="inputSampleRate">
                Sample rate of the input audio data of the mastering voice. This rate must be a multiple of
                <see cref="F:CSCore.XAudio2.XAudio2.QuantumDenominator"/>. <paramref name="inputSampleRate"/> must be between
                <see cref="F:CSCore.XAudio2.XAudio2.MinimumSampleRate"/>
                and <see cref="F:CSCore.XAudio2.XAudio2.MaximumSampleRate"/>.
                You can set InputSampleRate to <see cref="F:CSCore.XAudio2.XAudio2.DefaultSampleRate"/>, with the default being determined by the current
                platform.
            </param>
            <param name="flags">Flags that specify the behavior of the mastering voice. Must be 0.</param>
            <param name="device">
                Identifier of the device to receive the output audio. Specifying the default value of NULL (for XAudio2.8) or 0 (for XAudio2.7) causes
                XAudio2 to select the global default audio device.
            </param>
            <param name="effectChain">
                <see cref="T:CSCore.XAudio2.EffectChain"/> structure that describes an effect chain to use in the mastering
                voice, or NULL to use no effects.
            </param>
            <param name="streamCategory">The audio stream category to use for this mastering voice.</param>
            <returns>If successful, returns a pointer to the new <see cref="T:CSCore.XAudio2.XAudio2MasteringVoice"/> object.</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.CreateMasteringVoice(System.Int32,System.Int32,System.Object,System.Nullable{CSCore.XAudio2.EffectChain},CSCore.XAudio2.AudioStreamCategory)">
            <summary>
                Creates and configures a mastering voice.
            </summary>
            <param name="inputChannels">
                Number of channels the mastering voice expects in its input audio. <paramref name="inputChannels"/> must be less
                than
                or equal to <see cref="F:CSCore.XAudio2.XAudio2.MaxAudioChannels"/>.
                You can set InputChannels to <see cref="F:CSCore.XAudio2.XAudio2.DefaultChannels"/>, which causes XAudio2 to try to detect the system
                speaker configuration setup.
            </param>
            <param name="inputSampleRate">
                Sample rate of the input audio data of the mastering voice. This rate must be a multiple of
                <see cref="F:CSCore.XAudio2.XAudio2.QuantumDenominator"/>. <paramref name="inputSampleRate"/> must be between
                <see cref="F:CSCore.XAudio2.XAudio2.MinimumSampleRate"/>
                and <see cref="F:CSCore.XAudio2.XAudio2.MaximumSampleRate"/>.
                You can set InputSampleRate to <see cref="F:CSCore.XAudio2.XAudio2.DefaultSampleRate"/>, with the default being determined by the current
                platform.
            </param>
            <param name="device">
                Identifier of the device to receive the output audio. Specifying the default value of NULL (for XAudio2.8) or 0 (for XAudio2.7) causes
                XAudio2 to select the global default audio device.
            </param>
            <param name="effectChain">
                <see cref="T:CSCore.XAudio2.EffectChain"/> structure that describes an effect chain to use in the mastering
                voice, or NULL to use no effects.
            </param>
            <param name="streamCategory"><b>XAudio2.8 only:</b> The audio stream category to use for this mastering voice.</param>
            <returns>If successful, returns a new <see cref="T:CSCore.XAudio2.XAudio2MasteringVoice"/> object.</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.CreateMasteringVoice(System.Int32,System.Int32,System.Object)">
            <summary>
                Creates and configures a mastering voice.
            </summary>
            <param name="inputChannels">
                Number of channels the mastering voice expects in its input audio. <paramref name="inputChannels"/> must be less
                than
                or equal to <see cref="F:CSCore.XAudio2.XAudio2.MaxAudioChannels"/>.
                You can set InputChannels to <see cref="F:CSCore.XAudio2.XAudio2.DefaultChannels"/>, which causes XAudio2 to try to detect the system
                speaker configuration setup.
            </param>
            <param name="inputSampleRate">
                Sample rate of the input audio data of the mastering voice. This rate must be a multiple of
                <see cref="F:CSCore.XAudio2.XAudio2.QuantumDenominator"/>. <paramref name="inputSampleRate"/> must be between
                <see cref="F:CSCore.XAudio2.XAudio2.MinimumSampleRate"/>
                and <see cref="F:CSCore.XAudio2.XAudio2.MaximumSampleRate"/>.
                You can set InputSampleRate to <see cref="F:CSCore.XAudio2.XAudio2.DefaultSampleRate"/>, with the default being determined by the current
                platform.
            </param>
            <param name="device">
                Identifier of the device to receive the output audio. Specifying the default value of NULL (for XAudio2.8) or 0 (for XAudio2.7) causes
                XAudio2 to select the global default audio device.
            </param>
            <returns>If successful, returns a new <see cref="T:CSCore.XAudio2.XAudio2MasteringVoice"/> object.</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.CreateMasteringVoice(System.Int32,System.Int32)">
            <summary>
                Creates and configures a mastering voice.
            </summary>
            <param name="inputChannels">
                Number of channels the mastering voice expects in its input audio. <paramref name="inputChannels"/> must be less
                than
                or equal to <see cref="F:CSCore.XAudio2.XAudio2.MaxAudioChannels"/>.
                You can set InputChannels to <see cref="F:CSCore.XAudio2.XAudio2.DefaultChannels"/>, which causes XAudio2 to try to detect the system
                speaker configuration setup.
            </param>
            <param name="inputSampleRate">
                Sample rate of the input audio data of the mastering voice. This rate must be a multiple of
                <see cref="F:CSCore.XAudio2.XAudio2.QuantumDenominator"/>. <paramref name="inputSampleRate"/> must be between
                <see cref="F:CSCore.XAudio2.XAudio2.MinimumSampleRate"/>
                and <see cref="F:CSCore.XAudio2.XAudio2.MaximumSampleRate"/>.
                You can set InputSampleRate to <see cref="F:CSCore.XAudio2.XAudio2.DefaultSampleRate"/>, with the default being determined by the current
                platform.
            </param>
            <returns>If successful, returns a new <see cref="T:CSCore.XAudio2.XAudio2MasteringVoice"/> object.</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.CreateMasteringVoice">
            <summary>
                Creates and configures a mastering voice.
            </summary>
            <returns>If successful, returns a new <see cref="T:CSCore.XAudio2.XAudio2MasteringVoice"/> object.</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.StartEngineNative">
            <summary>
                Starts the audio processing thread.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.StartEngine">
            <summary>
                Starts the audio processing thread.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.StopEngine">
            <summary>
                Stops the audio processing thread.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.CommitChangesNative(System.Int32)">
            <summary>
                Atomically applies a set of operations that are tagged with a given identifier.
            </summary>
            <param name="operationSet">
                Identifier of the set of operations to be applied. To commit all pending operations, pass
                <see cref="F:CSCore.XAudio2.XAudio2.CommitAll"/>.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.CommitChanges(System.Int32)">
            <summary>
                Atomically applies a set of operations that are tagged with a given identifier.
            </summary>
            <param name="operationSet">
                Identifier of the set of operations to be applied. To commit all pending operations, pass
                <see cref="F:CSCore.XAudio2.XAudio2.CommitAll"/>.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.CommitChanges">
            <summary>
                Atomically applies a set of operations that are tagged with a given identifier.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.GetPerformanceDataNative(CSCore.XAudio2.PerformanceData@)">
            <summary>
                Returns current resource usage details, such as available memory or CPU usage.
            </summary>
            <param name="performanceData">
                On success, pointer to an <see cref="T:CSCore.XAudio2.PerformanceData"/> structure that is
                returned.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.SetDebugConfigurationNative(CSCore.XAudio2.DebugConfiguration,System.IntPtr)">
            <summary>
                Changes <b>global</b> debug logging options for XAudio2.
            </summary>
            <param name="debugConfiguration"><see cref="T:CSCore.XAudio2.DebugConfiguration"/> structure that contains the new debug configuration.</param>
            <param name="reserved">Reserved parameter. Must me NULL.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.SetDebugConfiguration(CSCore.XAudio2.DebugConfiguration)">
            <summary>
                Changes <b>global</b> debug logging options for XAudio2.
            </summary>
            <param name="debugConfiguration"><see cref="T:CSCore.XAudio2.DebugConfiguration"/> structure that contains the new debug configuration.</param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2.GetDefaultDevice">
            <summary>
                Returns the default device.
            </summary>
            <returns>The default device.</returns>
        </member>
        <member name="P:CSCore.XAudio2.XAudio2.PerformanceData">
            <summary>
                Gets current resource usage details, such as available memory or CPU usage.
            </summary>
        </member>
        <member name="P:CSCore.XAudio2.XAudio2.DefaultDevice">
            <summary>
            Gets the default device which can be used to create a mastering voice.
            </summary>
            <value>Using XAudio2.7 the default device is 0 (as an integer). Using XAudio2.8 the default device is null.</value>
        </member>
        <member name="P:CSCore.XAudio2.XAudio2.Version">
            <summary>
            Gets the <see cref="T:CSCore.XAudio2.XAudio2Version"/> of the XAudio2 object.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.XAudio2Buffer">
            <summary>
                Represents an audio data buffer.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Buffer.MaxLoopCount">
            <summary>
                Maximum non-infinite LoopCount.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Buffer.LoopInfinite">
            <summary>
                Infinite Loop.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Buffer.MaxBufferBytes">
            <summary>
                MaxBufferBytes. See <see cref="F:CSCore.XAudio2.XAudio2Buffer.AudioBytes"/>.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Buffer.Flags">
            <summary>
                Flags that provide additional information about the audio buffer.
                May be <see cref="F:CSCore.XAudio2.XAudio2BufferFlags.None"/> or <see cref="F:CSCore.XAudio2.XAudio2BufferFlags.EndOfStream"/>.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Buffer.AudioBytes">
            <summary>
                Size of the audio data, in bytes. Must be no larger than <see cref="F:CSCore.XAudio2.XAudio2Buffer.MaxBufferBytes"/> for PCM data.
                Fore more details see
                http://msdn.microsoft.com/en-us/library/windows/desktop/microsoft.directx_sdk.xaudio2.xaudio2_buffer(v=vs.85).aspx.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Buffer.AudioDataPtr">
            <summary>
                Pointer to the audio data.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Buffer.PlayBegin">
            <summary>
                First sample in the buffer that should be played.
                For XMA buffers this value must be a multiple of 128 samples.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Buffer.PlayLength">
            <summary>
                Length of the region to be played, in samples.
                A value of zero means to play the entire buffer, and, in this case, <see cref="F:CSCore.XAudio2.XAudio2Buffer.PlayBegin"/> must be zero as well.
                Fore more details see
                http://msdn.microsoft.com/en-us/library/windows/desktop/microsoft.directx_sdk.xaudio2.xaudio2_buffer(v=vs.85).aspx.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Buffer.LoopBegin">
            <summary>
                First sample of the region to be looped. The value of <see cref="F:CSCore.XAudio2.XAudio2Buffer.LoopBegin"/> must be less than
                <see cref="F:CSCore.XAudio2.XAudio2Buffer.PlayBegin"/> + <see cref="F:CSCore.XAudio2.XAudio2Buffer.PlayLength"/>.
                <see cref="F:CSCore.XAudio2.XAudio2Buffer.LoopBegin"/> can be less than <see cref="F:CSCore.XAudio2.XAudio2Buffer.PlayBegin"/>. <see cref="F:CSCore.XAudio2.XAudio2Buffer.LoopBegin"/> must be 0 if
                <see cref="F:CSCore.XAudio2.XAudio2Buffer.LoopCount"/> is 0.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Buffer.LoopLength">
            <summary>
                Length of the loop region, in samples.
                The value of <see cref="F:CSCore.XAudio2.XAudio2Buffer.LoopBegin"/> + <see cref="F:CSCore.XAudio2.XAudio2Buffer.LoopLength"/> must be greater than <see cref="F:CSCore.XAudio2.XAudio2Buffer.PlayBegin"/> and
                less than <see cref="F:CSCore.XAudio2.XAudio2Buffer.PlayBegin"/> + <see cref="F:CSCore.XAudio2.XAudio2Buffer.PlayLength"/>.
                <see cref="F:CSCore.XAudio2.XAudio2Buffer.LoopLength"/> must be zero if <see cref="F:CSCore.XAudio2.XAudio2Buffer.LoopLength"/> is 0.
                If <see cref="F:CSCore.XAudio2.XAudio2Buffer.LoopLength"/> is not 0 then a loop length of zero indicates the entire sample should be looped.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Buffer.LoopCount">
            <summary>
                Number of times to loop through the loop region.
                This value can be between 0 and <see cref="F:CSCore.XAudio2.XAudio2Buffer.MaxLoopCount"/>.
                If LoopCount is zero no looping is performed and <see cref="F:CSCore.XAudio2.XAudio2Buffer.LoopBegin"/> and <see cref="F:CSCore.XAudio2.XAudio2Buffer.LoopLength"/> must be 0.
                To loop forever, set <see cref="F:CSCore.XAudio2.XAudio2Buffer.LoopCount"/> to <see cref="F:CSCore.XAudio2.XAudio2Buffer.LoopInfinite"/>.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Buffer.ContextPtr">
            <summary>
                Context value to be passed back in callbacks to the client. This may be <see cref="F:System.IntPtr.Zero"/>.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Buffer.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.XAudio2.XAudio2Buffer"/> structure.
            </summary>
            <param name="bufferSize"></param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Buffer.GetStream">
            <summary>
                Returns a <see cref="T:System.IO.UnmanagedMemoryStream"/> instance for the underlying <see cref="F:CSCore.XAudio2.XAudio2Buffer.AudioDataPtr"/>.
            </summary>
            <remarks>Call </remarks>
            <returns>
                <see cref="T:System.IO.UnmanagedMemoryStream"/>
            </returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Buffer.Free">
            <summary>
                Frees the allocated memory.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.XAudio2BufferFlags">
            <summary>
                Flags that provide additional information about the audio buffer.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2BufferFlags.None">
            <summary>
                None
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2BufferFlags.EndOfStream">
            <summary>
                Indicates that there cannot be any buffers in the queue after this buffer. The only effect of this flag is to
                suppress debug output warnings caused by starvation of the buffer queue.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.XAudio2CriticalErrorEventArgs">
            <summary>
                XAudio2CriticalErrorEventArgs
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2CriticalErrorEventArgs.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.XAudio2.XAudio2CriticalErrorEventArgs"/> class.
            </summary>
            <param name="hresult">Errorcode</param>
        </member>
        <member name="P:CSCore.XAudio2.XAudio2CriticalErrorEventArgs.HResult">
            <summary>
                Errorcode
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.XAudio2DeviceRole">
            <summary>
                Describes device roles of an XAudio2 Device. Used in <see cref="T:CSCore.XAudio2.DeviceDetails"/>.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2DeviceRole.NotDefaultDevice">
            <summary>
                Device is not used as the default device for any applications.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2DeviceRole.DefaultConsoleDevice">
            <summary>
                Device is used in audio console applications.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2DeviceRole.DefaultMultimediaDevice">
            <summary>
                Device is used to play multimedia.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2DeviceRole.DefaultCommunicationsDevice">
            <summary>
                Device is used for voice communication.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2DeviceRole.DefaultGameDevice">
            <summary>
                Device is used in for games.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2DeviceRole.GlobalDefaultDevice">
            <summary>
                Devices is the default device for all applications.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2DeviceRole.InvalidDeviceRole">
            <summary>
                The role of the device is not valid.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.XAudio2EngineCallback">
            <summary>
                XAudio2EngineCallback
            </summary>
        </member>
        <member name="E:CSCore.XAudio2.XAudio2EngineCallback.ProcessingPassStart">
            <summary>
                Fired by XAudio2 just before an audio processing pass begins.
            </summary>
        </member>
        <member name="E:CSCore.XAudio2.XAudio2EngineCallback.ProcessingPassEnd">
            <summary>
                Fired by XAudio2 just after an audio processing pass ends.
            </summary>
        </member>
        <member name="E:CSCore.XAudio2.XAudio2EngineCallback.CriticalError">
            <summary>
                Fired if a critical system error occurs that requires XAudio2 to be closed down and restarted.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.XAudio2Exception">
            <summary>
                XAudio2-COMException.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Exception.#ctor(System.Int32,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.XAudio2.XAudio2Exception"/> class.
            </summary>
            <param name="result">Errorcode.</param>
            <param name="interfaceName">
                Name of the interface which contains the COM-function which returned the specified
                <paramref name="result"/>.
            </param>
            <param name="member">Name of the COM-function which returned the specified <paramref name="result"/>.</param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2Exception.Try(System.Int32,System.String,System.String)">
            <summary>
                Throws an <see cref="T:CSCore.XAudio2.XAudio2Exception"/> if the <paramref name="result"/> is not <see cref="F:CSCore.Win32.HResult.S_OK"/>.
            </summary>
            <param name="result">Errorcode.</param>
            <param name="interfaceName">
                Name of the interface which contains the COM-function which returned the specified
                <paramref name="result"/>.
            </param>
            <param name="member">Name of the COM-function which returned the specified <paramref name="result"/>.</param>
        </member>
        <member name="T:CSCore.XAudio2.XAudio2MasteringVoice">
            <summary>
                A mastering voice is used to represent the audio output device.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2MasteringVoice.#ctor(System.IntPtr,CSCore.XAudio2.XAudio2Version)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.XAudio2.XAudio2MasteringVoice"/> class.
            </summary>
            <param name="ptr">Native pointer of the <see cref="T:CSCore.XAudio2.XAudio2MasteringVoice"/> object.</param>
            <param name="version">The <see cref="T:CSCore.XAudio2.XAudio2Version"/> to use.</param>        
        </member>
        <member name="M:CSCore.XAudio2.XAudio2MasteringVoice.GetChannelMaskNative(CSCore.ChannelMask@)">
            <summary>
                <b>XAudio2.8 only:</b> Returns the channel mask for this voice.
            </summary>
            <param name="channelMask">
                Returns the channel mask for this voice. This corresponds to the
                <see cref="P:CSCore.WaveFormatExtensible.ChannelMask"/> member of the <see cref="T:CSCore.WaveFormatExtensible"/> class.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="P:CSCore.XAudio2.XAudio2MasteringVoice.ChannelMask">
            <summary>
                <b>XAudio2.8 only:</b> Gets the channel mask for this voice.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.XAudio2Processor">
            <summary>
                Defines values to use with XAudio2Create to specify available processors.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor1">
            <summary>
                Processor 1
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor2">
            <summary>
                Processor 2
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor3">
            <summary>
                Processor 3
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor4">
            <summary>
                Processor 4
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor5">
            <summary>
                Processor 5
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor6">
            <summary>
                Processor 6
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor7">
            <summary>
                Processor 7
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor8">
            <summary>
                Processor 8
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor9">
            <summary>
                Processor 9
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor10">
            <summary>
                Processor 10
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor11">
            <summary>
                Processor 11
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor12">
            <summary>
                Processor 12
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor13">
            <summary>
                Processor 13
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor14">
            <summary>
                Processor 14
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor15">
            <summary>
                Processor 15
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor16">
            <summary>
                Processor 16
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor17">
            <summary>
                Processor 17
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor18">
            <summary>
                Processor 18
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor19">
            <summary>
                Processor 19
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor20">
            <summary>
                Processor 20
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor21">
            <summary>
                Processor 21
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor22">
            <summary>
                Processor 22
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor23">
            <summary>
                Processor 23
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor24">
            <summary>
                Processor 24
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor25">
            <summary>
                Processor 25
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor26">
            <summary>
                Processor 26
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor27">
            <summary>
                Processor 27
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor28">
            <summary>
                Processor 28
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor29">
            <summary>
                Processor 29
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor30">
            <summary>
                Processor 30
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor31">
            <summary>
                Processor 31
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Processor32">
            <summary>
                Processor 32
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Xaudio2AnyProcessor">
            <summary>
                Any processor
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Xaudio27DefaultProcessor">
            <summary>
                Default processor for XAudio2.7, which is defined as <see cref="F:CSCore.XAudio2.XAudio2Processor.Xaudio2AnyProcessor"/>.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Processor.Xaudio28DefaultProcessor">
            <summary>
                Default processor for XAudio2.8, which is defined as <see cref="F:CSCore.XAudio2.XAudio2Processor.Processor1"/>.
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.XAudio2SubmixVoice">
            <summary>
                A submix voice is used primarily for performance improvements and effects processing.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2SubmixVoice.#ctor(System.IntPtr,CSCore.XAudio2.XAudio2Version)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.XAudio2.XAudio2SubmixVoice"/> class.
            </summary>
            <param name="ptr">Native pointer of the <see cref="T:CSCore.XAudio2.XAudio2SubmixVoice"/> object.</param>
            <param name="version">The <see cref="T:CSCore.XAudio2.XAudio2Version"/> to use.</param>
        </member>
        <member name="T:CSCore.XAudio2.XAudio2Version">
            <summary>
            Defines supported XAudio2 subversions.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Version.XAudio2_7">
            <summary>
            XAudio2.7
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2Version.XAudio2_8">
            <summary>
            XAudio2.8
            </summary>
        </member>
        <member name="T:CSCore.XAudio2.XAudio2_7">
            <summary>
                <see cref="T:CSCore.XAudio2.XAudio2"/> is the class for the XAudio2 object that manages all audio engine states, the audio
                processing thread, the voice graph, and so forth.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2_7.QuantumDenominator">
            <summary>
            The denominator of a quantum unit. In 10ms chunks (= 1/100 seconds). 
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2_7.MinimumSampleRate">
            <summary>
            Minimum sample rate is 1000 Hz.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2_7.MaximumSampleRate">
            <summary>
            Maximum sample rate is 200 kHz.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2_7.MinFrequencyRatio">
            <summary>
            The minimum frequency ratio is 1/1024.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2_7.MaxFrequencyRatio">
            <summary>
            Maximum frequency ratio is 1024.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2_7.DefaultFrequencyRatio">
            <summary>
            The default value for the frequency ratio is 4.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2_7.MaxAudioChannels">
            <summary>
            The maximum number of supported channels is 64.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2_7.DefaultChannels">
            <summary>
            Value which indicates that the default number of channels should be used.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2_7.DefaultSampleRate">
            <summary>
            Values which indicates that the default sample rate should be used.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2_7.CommitAll">
            <summary>
            Value which can be used in combination with the <see cref="M:CSCore.XAudio2.XAudio2.CommitChanges(System.Int32)"/> method to commit all changes.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2_7.CommitNow">
            <summary>
            Values which indicates that the made changes should be commited instantly.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_7.#ctor(System.IntPtr)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.XAudio2.XAudio2_7"/> class.
            </summary>
            <param name="ptr">Native pointer of the <see cref="T:CSCore.XAudio2.XAudio2_7"/> object.</param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_7.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.XAudio2.XAudio2_7"/> class.
            </summary>
            <remarks>This constructor already calls <see cref="M:CSCore.XAudio2.XAudio2_7.Initialize(System.Int32,CSCore.XAudio2.XAudio2Processor)"/>. Don't call it a second time.</remarks>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_7.#ctor(System.Boolean,CSCore.XAudio2.XAudio2Processor)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.XAudio2.XAudio2_7"/> class.
            </summary>
            <param name="debug">
                Specifies whether the XAudio2 engine should be created in debug mode. Pass true to enable the debug
                mode.
            </param>
            <param name="processor">
                Specifies which CPU to use. Use <see cref="F:CSCore.XAudio2.XAudio2Processor.Xaudio27DefaultProcessor"/> as
                default value.
            </param>
            <remarks>This constructor already calls <see cref="M:CSCore.XAudio2.XAudio2_7.Initialize(System.Int32,CSCore.XAudio2.XAudio2Processor)"/>. Don't call it a second time.</remarks>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_7.GetDeviceCountNative(System.Int32@)">
            <summary>
                Returns the number of available audio output devices.
            </summary>
            <param name="deviceCount">Number of available audio output devices.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_7.GetDeviceCount">
            <summary>
                Returns the number of available audio output devices.
            </summary>
            <returns>Number of available audio output devices.</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_7.GetDeviceDetailsNative(System.Int32,CSCore.XAudio2.DeviceDetails@)">
            <summary>
                Returns information about an audio output device.
            </summary>
            <param name="deviceIndex">
                Index of the device to be queried. This value must be less than the count returned by
                <see cref="M:CSCore.XAudio2.XAudio2_7.GetDeviceCount"/>.
            </param>
            <param name="deviceDetails"><see cref="T:CSCore.XAudio2.DeviceDetails"/> structure.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_7.GetDeviceDetails(System.Int32)">
            <summary>
                Returns information about an audio output device.
            </summary>
            <param name="deviceIndex">
                Index of the device to be queried. This value must be less than the count returned by
                <see cref="M:CSCore.XAudio2.XAudio2_7.GetDeviceCount"/>.
            </param>
            <returns><see cref="T:CSCore.XAudio2.DeviceDetails"/> structure.</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_7.InitializeNative(System.Int32,CSCore.XAudio2.XAudio2Processor)">
            <summary>
                Sets XAudio2 parameters and prepares XAudio2 for use.
            </summary>
            <param name="flags">Flags that specify the behavior of the XAudio2 object. This value must be 0.</param>
            <param name="processor">
                Specifies which CPU to use. Use <see cref="F:CSCore.XAudio2.XAudio2Processor.Xaudio27DefaultProcessor"/> as default value.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_7.Initialize(System.Int32,CSCore.XAudio2.XAudio2Processor)">
            <summary>
                Sets XAudio2 parameters and prepares XAudio2 for use.
            </summary>
            <param name="flags">Flags that specify the behavior of the XAudio2 object. This value must be 0.</param>
            <param name="processor">
                Specifies which CPU to use. Use <see cref="F:CSCore.XAudio2.XAudio2Processor.Xaudio27DefaultProcessor"/> as default value.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_7.RegisterForCallbacksNative(CSCore.XAudio2.IXAudio2EngineCallback)">
            <summary>
                Adds an <see cref="T:CSCore.XAudio2.IXAudio2EngineCallback"/> from the <see cref="T:CSCore.XAudio2.XAudio2"/> engine callback list.
            </summary>
            <param name="callback">
                <see cref="T:CSCore.XAudio2.IXAudio2EngineCallback"/> object to add to the <see cref="T:CSCore.XAudio2.XAudio2"/> engine
                callback list.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_7.UnregisterForCallbacks(CSCore.XAudio2.IXAudio2EngineCallback)">
            <summary>
                Removes an <see cref="T:CSCore.XAudio2.IXAudio2EngineCallback"/> from the <see cref="T:CSCore.XAudio2.XAudio2"/> engine callback list.
            </summary>
            <param name="callback">
                <see cref="T:CSCore.XAudio2.IXAudio2EngineCallback"/> object to remove from the <see cref="T:CSCore.XAudio2.XAudio2"/> engine
                callback list. If the given interface is present more than once in the list, only the first instance in the list
                will be removed.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_7.CreateSourceVoiceNative(System.IntPtr@,System.IntPtr,CSCore.XAudio2.VoiceFlags,System.Single,CSCore.XAudio2.IXAudio2VoiceCallback,System.Nullable{CSCore.XAudio2.VoiceSends},System.Nullable{CSCore.XAudio2.EffectChain})">
            <summary>
                Creates and configures a source voice. For more information see
                http://msdn.microsoft.com/en-us/library/windows/desktop/microsoft.directx_sdk.ixaudio2.ixaudio2.createsourcevoice(v=vs.85).aspx.
            </summary>
            <param name="pSourceVoice">If successful, returns a pointer to the new <see cref="T:CSCore.XAudio2.XAudio2SourceVoice"/> object.</param>
            <param name="sourceFormat">
                Pointer to a <see cref="T:CSCore.WaveFormat"/>. The following formats are supported:
                <ul>
                    <li>8-bit (unsigned) integer PCM</li><li>16-bit integer PCM (optimal format for XAudio2)</li>
                    <li>20-bit integer PCM (either in 24 or 32 bit containers)</li>
                    <li>24-bit integer PCM (either in 24 or 32 bit containers)</li><li>32-bit integer PCM</li>
                    <li>32-bit float PCM (preferred format after 16-bit integer)</li>
                </ul>
                The number of channels in a source voice must be less than or equal to <see cref="F:CSCore.XAudio2.XAudio2_7.MaxAudioChannels"/>. The sample
                rate of a source voice must be between <see cref="F:CSCore.XAudio2.XAudio2_7.MinimumSampleRate"/> and <see cref="F:CSCore.XAudio2.XAudio2_7.MaximumSampleRate"/>.
            </param>
            <param name="flags">
                <see cref="T:CSCore.XAudio2.VoiceFlags"/> that specify the behavior of the source voice. A flag can be
                <see cref="F:CSCore.XAudio2.VoiceFlags.None"/> or a combination of one or more of the following.
                Possible values are <see cref="F:CSCore.XAudio2.VoiceFlags.NoPitch"/>, <see cref="F:CSCore.XAudio2.VoiceFlags.NoSampleRateConversition"/> and
                <see cref="F:CSCore.XAudio2.VoiceFlags.UseFilter"/>. <see cref="F:CSCore.XAudio2.VoiceFlags.Music"/> is not supported on Windows.
            </param>
            <param name="maxFrequencyRatio">
                Highest allowable frequency ratio that can be set on this voice. The value for this
                argument must be between <see cref="F:CSCore.XAudio2.XAudio2_7.MinFrequencyRatio"/> and <see cref="F:CSCore.XAudio2.XAudio2_7.MaxFrequencyRatio"/>.
            </param>
            <param name="voiceCallback">
                Client-provided callback interface, <see cref="T:CSCore.XAudio2.IXAudio2VoiceCallback"/>. This parameter is
                optional and can be null.
            </param>
            <param name="sendList">
                List of <see cref="T:CSCore.XAudio2.VoiceSends"/> structures that describe the set of destination voices for the
                source voice. If <paramref name="sendList"/> is NULL, the send list defaults to a single output to the first mastering
                voice created.
            </param>
            <param name="effectChain">
                List of <see cref="T:CSCore.XAudio2.EffectChain"/> structures that describe an effect chain to use in the
                source voice. This parameter is optional and can be null.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_7.CreateSubmixVoiceNative(System.IntPtr@,System.Int32,System.Int32,CSCore.XAudio2.VoiceFlags,System.Int32,System.Nullable{CSCore.XAudio2.VoiceSends},System.Nullable{CSCore.XAudio2.EffectChain})">
            <summary>
                Creates and configures a submix voice.
            </summary>
            <param name="pSubmixVoice">On success, returns a pointer to the new <see cref="T:CSCore.XAudio2.XAudio2SubmixVoice"/> object.</param>
            <param name="inputChannels">
                Number of channels in the input audio data of the submix voice. The
                <paramref name="inputChannels"/> must be less than or equal to <see cref="F:CSCore.XAudio2.XAudio2_7.MaxAudioChannels"/>.
            </param>
            <param name="inputSampleRate">
                Sample rate of the input audio data of submix voice. This rate must be a multiple of
                <see cref="F:CSCore.XAudio2.XAudio2_7.QuantumDenominator"/>. InputSampleRate must be between <see cref="F:CSCore.XAudio2.XAudio2_7.MinimumSampleRate"/> and
                <see cref="F:CSCore.XAudio2.XAudio2_7.MaximumSampleRate"/>.
            </param>
            <param name="flags">
                Flags that specify the behavior of the submix voice. It can be <see cref="F:CSCore.XAudio2.VoiceFlags.None"/> or
                <see cref="F:CSCore.XAudio2.VoiceFlags.UseFilter"/>.
            </param>
            <param name="processingStage">
                An arbitrary number that specifies when this voice is processed with respect to other
                submix voices, if the XAudio2 engine is running other submix voices. The voice is processed after all other voices
                that include a smaller <paramref name="processingStage"/> value and before all other voices that include a larger
                <paramref name="processingStage"/> value. Voices that include the same <paramref name="processingStage"/> value are
                processed in any order. A submix voice cannot send to another submix voice with a lower or equal
                <paramref name="processingStage"/> value. This prevents audio being lost due to a submix cycle.
            </param>
            <param name="sendList">
                List of <see cref="T:CSCore.XAudio2.VoiceSends"/> structures that describe the set of destination voices for the
                submix voice. If <paramref name="sendList"/> is NULL, the send list will default to a single output to the first
                mastering voice created.
            </param>
            <param name="effectChain">
                List of <see cref="T:CSCore.XAudio2.EffectChain"/> structures that describe an effect chain to use in the
                submix voice. This parameter is optional and can be null.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_7.CreateMasteringVoiceNative(System.IntPtr@,System.Int32,System.Int32,System.Int32,System.Object,System.Nullable{CSCore.XAudio2.EffectChain},CSCore.XAudio2.AudioStreamCategory)">
            <summary>
                Creates and configures a mastering voice.
            </summary>
            <param name="pMasteringVoice">If successful, returns a pointer to the new <see cref="T:CSCore.XAudio2.XAudio2MasteringVoice"/> object.</param>
            <param name="inputChannels">
                Number of channels the mastering voice expects in its input audio. <paramref name="inputChannels"/> must be less than
                or equal to <see cref="F:CSCore.XAudio2.XAudio2_7.MaxAudioChannels"/>.
                You can set InputChannels to <see cref="F:CSCore.XAudio2.XAudio2_7.DefaultChannels"/>, which causes XAudio2 to try to detect the system
                speaker configuration setup.
            </param>
            <param name="inputSampleRate">
                Sample rate of the input audio data of the mastering voice. This rate must be a multiple of
                <see cref="F:CSCore.XAudio2.XAudio2_7.QuantumDenominator"/>. <paramref name="inputSampleRate"/> must be between <see cref="F:CSCore.XAudio2.XAudio2_7.MinimumSampleRate"/>
                and <see cref="F:CSCore.XAudio2.XAudio2_7.MaximumSampleRate"/>.
                You can set InputSampleRate to <see cref="F:CSCore.XAudio2.XAudio2_7.DefaultSampleRate"/>, with the default being determined by the current
                platform.
            </param>
            <param name="flags">Flags that specify the behavior of the mastering voice. Must be 0.</param>
            <param name="deviceId">
                Identifier of the device to receive the output audio. Specifying the default value of 0 (zero)
                causes XAudio2 to select the global default audio device.
            </param>
            <param name="effectChain">
                <see cref="T:CSCore.XAudio2.EffectChain"/> structure that describes an effect chain to use in the mastering
                voice, or NULL to use no effects.
            </param>
            <param name="streamCategory"><b>Not valid for XAudio 2.7.</b></param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_7.StartEngineNative">
            <summary>
                Starts the audio processing thread.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_7.StopEngine">
            <summary>
                Stops the audio processing thread.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_7.CommitChangesNative(System.Int32)">
            <summary>
                Atomically applies a set of operations that are tagged with a given identifier.
            </summary>
            <param name="operationSet">
                Identifier of the set of operations to be applied. To commit all pending operations, pass
                <see cref="F:CSCore.XAudio2.XAudio2_7.CommitAll"/>.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_7.GetPerformanceDataNative(CSCore.XAudio2.PerformanceData@)">
            <summary>
                Returns current resource usage details, such as available memory or CPU usage.
            </summary>
            <param name="performanceData">
                On success, pointer to an <see cref="T:CSCore.XAudio2.PerformanceData"/> structure that is
                returned.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_7.SetDebugConfigurationNative(CSCore.XAudio2.DebugConfiguration,System.IntPtr)">
            <summary>
                Changes <b>global</b> debug logging options for XAudio2.
            </summary>
            <param name="debugConfiguration"><see cref="T:CSCore.XAudio2.DebugConfiguration"/> structure that contains the new debug configuration.</param>
            <param name="reserved">Reserved parameter. Must me NULL.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_7.GetDefaultDevice">
            <summary>
            Returns the default device.
            </summary>
            <returns>The default device.</returns>
        </member>
        <member name="T:CSCore.XAudio2.XAudio2_8">
            <summary>
                <see cref="T:CSCore.XAudio2.XAudio2"/> is the class for the XAudio2 object that manages all audio engine states, the audio
                processing thread, the voice graph, and so forth.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2_8.QuantumDenominator">
            <summary>
            The denominator of a quantum unit. In 10ms chunks (= 1/100 seconds). 
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2_8.MinimumSampleRate">
            <summary>
            Minimum sample rate is 1000 Hz.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2_8.MaximumSampleRate">
            <summary>
            Maximum sample rate is 200 kHz.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2_8.MinFrequencyRatio">
            <summary>
            The minimum frequency ratio is 1/1024.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2_8.MaxFrequencyRatio">
            <summary>
            Maximum frequency ratio is 1024.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2_8.DefaultFrequencyRatio">
            <summary>
            The default value for the frequency ratio is 4.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2_8.MaxAudioChannels">
            <summary>
            The maximum number of supported channels is 64.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2_8.DefaultChannels">
            <summary>
            Value which indicates that the default number of channels should be used.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2_8.DefaultSampleRate">
            <summary>
            Values which indicates that the default sample rate should be used.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2_8.CommitAll">
            <summary>
            Value which can be used in combination with the <see cref="M:CSCore.XAudio2.XAudio2.CommitChanges(System.Int32)"/> method to commit all changes.
            </summary>
        </member>
        <member name="F:CSCore.XAudio2.XAudio2_8.CommitNow">
            <summary>
            Values which indicates that the made changes should be commited instantly.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_8.#ctor(System.IntPtr)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.XAudio2.XAudio2_8"/> class.
            </summary>
            <param name="ptr">Native pointer of the <see cref="T:CSCore.XAudio2.XAudio2_8"/> object.</param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_8.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.XAudio2.XAudio2_8"/> class.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_8.#ctor(CSCore.XAudio2.XAudio2Processor)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.XAudio2.XAudio2_8"/> class.
            </summary>
            <param name="processor">
                Specifies which CPU to use. Use <see cref="F:CSCore.XAudio2.XAudio2Processor.Xaudio28DefaultProcessor"/> as
                default value.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_8.RegisterForCallbacksNative(CSCore.XAudio2.IXAudio2EngineCallback)">
            <summary>
                Adds an <see cref="T:CSCore.XAudio2.IXAudio2EngineCallback"/> from the <see cref="T:CSCore.XAudio2.XAudio2"/> engine callback list.
            </summary>
            <param name="callback">
                <see cref="T:CSCore.XAudio2.IXAudio2EngineCallback"/> object to add to the <see cref="T:CSCore.XAudio2.XAudio2"/> engine
                callback list.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_8.UnregisterForCallbacks(CSCore.XAudio2.IXAudio2EngineCallback)">
            <summary>
                Removes an <see cref="T:CSCore.XAudio2.IXAudio2EngineCallback"/> from the <see cref="T:CSCore.XAudio2.XAudio2"/> engine callback list.
            </summary>
            <param name="callback">
                <see cref="T:CSCore.XAudio2.IXAudio2EngineCallback"/> object to remove from the <see cref="T:CSCore.XAudio2.XAudio2"/> engine
                callback list. If the given interface is present more than once in the list, only the first instance in the list
                will be removed.
            </param>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_8.CreateSourceVoiceNative(System.IntPtr@,System.IntPtr,CSCore.XAudio2.VoiceFlags,System.Single,CSCore.XAudio2.IXAudio2VoiceCallback,System.Nullable{CSCore.XAudio2.VoiceSends},System.Nullable{CSCore.XAudio2.EffectChain})">
            <summary>
                Creates and configures a source voice. For more information see
                http://msdn.microsoft.com/en-us/library/windows/desktop/microsoft.directx_sdk.ixaudio2.ixaudio2.createsourcevoice(v=vs.85).aspx.
            </summary>
            <param name="pSourceVoice">If successful, returns a pointer to the new <see cref="T:CSCore.XAudio2.XAudio2SourceVoice"/> object.</param>
            <param name="sourceFormat">
                Pointer to a <see cref="T:CSCore.WaveFormat"/>. The following formats are supported:
                <ul>
                    <li>8-bit (unsigned) integer PCM</li><li>16-bit integer PCM (optimal format for XAudio2)</li>
                    <li>20-bit integer PCM (either in 24 or 32 bit containers)</li>
                    <li>24-bit integer PCM (either in 24 or 32 bit containers)</li><li>32-bit integer PCM</li>
                    <li>32-bit float PCM (preferred format after 16-bit integer)</li>
                </ul>
                The number of channels in a source voice must be less than or equal to <see cref="F:CSCore.XAudio2.XAudio2_8.MaxAudioChannels"/>. The sample
                rate of a source voice must be between <see cref="F:CSCore.XAudio2.XAudio2_8.MinimumSampleRate"/> and <see cref="F:CSCore.XAudio2.XAudio2_8.MaximumSampleRate"/>.
            </param>
            <param name="flags">
                <see cref="T:CSCore.XAudio2.VoiceFlags"/> that specify the behavior of the source voice. A flag can be
                <see cref="F:CSCore.XAudio2.VoiceFlags.None"/> or a combination of one or more of the following.
                Possible values are <see cref="F:CSCore.XAudio2.VoiceFlags.NoPitch"/>, <see cref="F:CSCore.XAudio2.VoiceFlags.NoSampleRateConversition"/> and
                <see cref="F:CSCore.XAudio2.VoiceFlags.UseFilter"/>. <see cref="F:CSCore.XAudio2.VoiceFlags.Music"/> is not supported on Windows.
            </param>
            <param name="maxFrequencyRatio">
                Highest allowable frequency ratio that can be set on this voice. The value for this
                argument must be between <see cref="F:CSCore.XAudio2.XAudio2_8.MinFrequencyRatio"/> and <see cref="F:CSCore.XAudio2.XAudio2_8.MaxFrequencyRatio"/>.
            </param>
            <param name="voiceCallback">
                Client-provided callback interface, <see cref="T:CSCore.XAudio2.IXAudio2VoiceCallback"/>. This parameter is
                optional and can be null.
            </param>
            <param name="sendList">
                List of <see cref="T:CSCore.XAudio2.VoiceSends"/> structures that describe the set of destination voices for the
                source voice. If <paramref name="sendList"/> is NULL, the send list defaults to a single output to the first mastering
                voice created.
            </param>
            <param name="effectChain">
                List of <see cref="T:CSCore.XAudio2.EffectChain"/> structures that describe an effect chain to use in the
                source voice. This parameter is optional and can be null.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_8.CreateSubmixVoiceNative(System.IntPtr@,System.Int32,System.Int32,CSCore.XAudio2.VoiceFlags,System.Int32,System.Nullable{CSCore.XAudio2.VoiceSends},System.Nullable{CSCore.XAudio2.EffectChain})">
            <summary>
                Creates and configures a submix voice.
            </summary>
            <param name="pSubmixVoice">On success, returns a pointer to the new <see cref="T:CSCore.XAudio2.XAudio2SubmixVoice"/> object.</param>
            <param name="inputChannels">
                Number of channels in the input audio data of the submix voice. The
                <paramref name="inputChannels"/> must be less than or equal to <see cref="F:CSCore.XAudio2.XAudio2_8.MaxAudioChannels"/>.
            </param>
            <param name="inputSampleRate">
                Sample rate of the input audio data of submix voice. This rate must be a multiple of
                <see cref="F:CSCore.XAudio2.XAudio2_8.QuantumDenominator"/>. InputSampleRate must be between <see cref="F:CSCore.XAudio2.XAudio2_8.MinimumSampleRate"/> and
                <see cref="F:CSCore.XAudio2.XAudio2_8.MaximumSampleRate"/>.
            </param>
            <param name="flags">
                Flags that specify the behavior of the submix voice. It can be <see cref="F:CSCore.XAudio2.VoiceFlags.None"/> or
                <see cref="F:CSCore.XAudio2.VoiceFlags.UseFilter"/>.
            </param>
            <param name="processingStage">
                An arbitrary number that specifies when this voice is processed with respect to other
                submix voices, if the XAudio2 engine is running other submix voices. The voice is processed after all other voices
                that include a smaller <paramref name="processingStage"/> value and before all other voices that include a larger
                <paramref name="processingStage"/> value. Voices that include the same <paramref name="processingStage"/> value are
                processed in any order. A submix voice cannot send to another submix voice with a lower or equal
                <paramref name="processingStage"/> value. This prevents audio being lost due to a submix cycle.
            </param>
            <param name="sendList">
                List of <see cref="T:CSCore.XAudio2.VoiceSends"/> structures that describe the set of destination voices for the
                submix voice. If <paramref name="sendList"/> is NULL, the send list will default to a single output to the first
                mastering voice created.
            </param>
            <param name="effectChain">
                List of <see cref="T:CSCore.XAudio2.EffectChain"/> structures that describe an effect chain to use in the
                submix voice. This parameter is optional and can be null.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_8.CreateMasteringVoiceNative(System.IntPtr@,System.Int32,System.Int32,System.Int32,System.Object,System.Nullable{CSCore.XAudio2.EffectChain},CSCore.XAudio2.AudioStreamCategory)">
            <summary>
                Creates and configures a mastering voice.
            </summary>
            <param name="pMasteringVoice">If successful, returns a pointer to the new <see cref="T:CSCore.XAudio2.XAudio2MasteringVoice"/> object.</param>
            <param name="inputChannels">
                Number of channels the mastering voice expects in its input audio. <paramref name="inputChannels"/> must be less than
                or equal to <see cref="F:CSCore.XAudio2.XAudio2_8.MaxAudioChannels"/>.
                You can set InputChannels to <see cref="F:CSCore.XAudio2.XAudio2_8.DefaultChannels"/>, which causes XAudio2 to try to detect the system
                speaker configuration setup.
            </param>
            <param name="inputSampleRate">
                Sample rate of the input audio data of the mastering voice. This rate must be a multiple of
                <see cref="F:CSCore.XAudio2.XAudio2_8.QuantumDenominator"/>. <paramref name="inputSampleRate"/> must be between <see cref="F:CSCore.XAudio2.XAudio2_8.MinimumSampleRate"/>
                and <see cref="F:CSCore.XAudio2.XAudio2_8.MaximumSampleRate"/>.
                You can set InputSampleRate to <see cref="F:CSCore.XAudio2.XAudio2_8.DefaultSampleRate"/>, with the default being determined by the current
                platform.
            </param>
            <param name="flags">Flags that specify the behavior of the mastering voice. Must be 0.</param>
            <param name="deviceId">
                Identifier of the device to receive the output audio. Specifying the default value of NULL
                causes XAudio2 to select the global default audio device.
            </param>
            <param name="effectChain">
                <see cref="T:CSCore.XAudio2.EffectChain"/> structure that describes an effect chain to use in the mastering
                voice, or NULL to use no effects.
            </param>
            <param name="streamCategory">The audio stream category to use for this mastering voice.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_8.StartEngineNative">
            <summary>
                Starts the audio processing thread.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_8.StopEngine">
            <summary>
                Stops the audio processing thread.
            </summary>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_8.CommitChangesNative(System.Int32)">
            <summary>
                Atomically applies a set of operations that are tagged with a given identifier.
            </summary>
            <param name="operationSet">
                Identifier of the set of operations to be applied. To commit all pending operations, pass
                <see cref="F:CSCore.XAudio2.XAudio2_8.CommitAll"/>.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_8.GetPerformanceDataNative(CSCore.XAudio2.PerformanceData@)">
            <summary>
                Returns current resource usage details, such as available memory or CPU usage.
            </summary>
            <param name="performanceData">
                On success, pointer to an <see cref="T:CSCore.XAudio2.PerformanceData"/> structure that is
                returned.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_8.SetDebugConfigurationNative(CSCore.XAudio2.DebugConfiguration,System.IntPtr)">
            <summary>
                Changes <b>global</b> debug logging options for XAudio2.
            </summary>
            <param name="debugConfiguration"><see cref="T:CSCore.XAudio2.DebugConfiguration"/> structure that contains the new debug configuration.</param>
            <param name="reserved">Reserved parameter. Must me NULL.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.XAudio2.XAudio2_8.GetDefaultDevice">
            <summary>
            Returns the default device.
            </summary>
            <returns>The default device.</returns>
        </member>
        <member name="T:CSCore.Codecs.RAW.RawDataReader">
            <summary>
                Implementation of the <see cref="T:CSCore.IWaveSource"/> interface which reads raw data from a <see cref="T:System.IO.Stream"/> based
                on a specified <see cref="P:CSCore.Codecs.RAW.RawDataReader.WaveFormat"/>.
            </summary>
        </member>
        <member name="M:CSCore.Codecs.RAW.RawDataReader.#ctor(System.IO.Stream,CSCore.WaveFormat)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.Codecs.RAW.RawDataReader"/> class.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> which contains raw waveform-audio data.</param>
            <param name="waveFormat">The format of the waveform-audio data within the <paramref name="stream"/>.</param>
        </member>
        <member name="M:CSCore.Codecs.RAW.RawDataReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads a sequence of bytes from the <see cref="T:CSCore.Codecs.RAW.RawDataReader"/> and advances the position within the stream by the
                number of bytes read.
            </summary>
            <param name="buffer">
                An array of bytes. When this method returns, the <paramref name="buffer"/> contains the specified
                byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> +
                <paramref name="count"/> - 1) replaced by the bytes read from the current source.
            </param>
            <param name="offset">
                The zero-based byte offset in the <paramref name="buffer"/> at which to begin storing the data
                read from the current stream.
            </param>
            <param name="count">The maximum number of bytes to read from the current source.</param>
            <returns>The total number of bytes read into the buffer.</returns>
        </member>
        <member name="M:CSCore.Codecs.RAW.RawDataReader.Dispose">
            <summary>
                Disposes the <see cref="T:CSCore.Codecs.RAW.RawDataReader"/> and the underlying <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:CSCore.Codecs.RAW.RawDataReader.Dispose(System.Boolean)">
            <summary>
                Disposes the <see cref="T:CSCore.Codecs.RAW.RawDataReader"/> and the underlying <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="disposing">
                True to release both managed and unmanaged resources; false to release only unmanaged
                resources.
            </param>
        </member>
        <member name="M:CSCore.Codecs.RAW.RawDataReader.Finalize">
            <summary>
            Destructor which calls the <see cref="M:CSCore.Codecs.RAW.RawDataReader.Dispose(System.Boolean)"/> method.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.RAW.RawDataReader.WaveFormat">
            <summary>
                Gets the format of the raw data.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.RAW.RawDataReader.Position">
            <summary>
                Gets or sets the position of the <see cref="T:CSCore.Codecs.RAW.RawDataReader"/> in bytes.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.RAW.RawDataReader.Length">
            <summary>
                Gets the length of the <see cref="T:CSCore.Codecs.RAW.RawDataReader"/> in bytes.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioEndpointVolume">
            <summary>
            The <see cref="T:CSCore.CoreAudioAPI.AudioEndpointVolume"/> interface represents the volume controls on the audio stream to or from an audio endpoint device.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.FromDevice(CSCore.CoreAudioAPI.MMDevice)">
            <summary>
            Initializes a new <see cref="T:CSCore.CoreAudioAPI.AudioEndpointVolume"/> instance based on a <see cref="T:CSCore.CoreAudioAPI.MMDevice"/> instance.
            </summary>
            <param name="device"><see cref="T:CSCore.CoreAudioAPI.MMDevice"/> instance to create the <see cref="T:CSCore.CoreAudioAPI.AudioEndpointVolume"/> for.</param>
            <returns><see cref="T:CSCore.CoreAudioAPI.AudioEndpointVolume"/></returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.CoreAudioAPI.AudioEndpointVolume"/> class.
            </summary>
            <param name="ptr">Native pointer of the <see cref="T:CSCore.CoreAudioAPI.AudioEndpointVolume"/> object.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.RegisterControlChangeNotifyNative(CSCore.CoreAudioAPI.IAudioEndpointVolumeCallback)">
            <summary>
            The RegisterControlChangeNotify method registers a client's notification callback
            interface.
            </summary>
            <param name="notify">Notificationprovider</param>
            <returns>HRESULT</returns>
            <remarks>
            When notifications are no longer needed, the client can call the
            IAudioEndpointVolume::UnregisterControlChangeNotify method to terminate the
            notifications.
            </remarks>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.RegisterControlChangeNotify(CSCore.CoreAudioAPI.IAudioEndpointVolumeCallback)">
            <summary>
            The RegisterControlChangeNotify method registers a client's notification callback
            interface.
            </summary>
            <param name="notify">Notificationprovider</param>
            <remarks>
            When notifications are no longer needed, the client can call the
            IAudioEndpointVolume::UnregisterControlChangeNotify method to terminate the
            notifications.
            </remarks>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.UnregisterControlChangeNotifyNative(CSCore.CoreAudioAPI.IAudioEndpointVolumeCallback)">
            <summary>
            The UnregisterControlChangeNotify method deletes the registration of a client's
            notification callback interface that the client registered in a previous call to the
            IAudioEndpointVolume::RegisterControlChangeNotify method.
            </summary>
            <param name="notify">Notificationprovider</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.UnregisterControlChangeNotify(CSCore.CoreAudioAPI.IAudioEndpointVolumeCallback)">
            <summary>
            The UnregisterControlChangeNotify method deletes the registration of a client's
            notification callback interface that the client registered in a previous call to the
            IAudioEndpointVolume::RegisterControlChangeNotify method.
            </summary>
            <param name="notify">Notificationprovider</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetChannelCountNative(System.UInt32@)">
            <summary>
            The GetChannelCount method gets a count of the channels in the audio stream that enters
            or leaves the audio endpoint device.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetChannelCount">
            <summary>
            The GetChannelCount method gets a count of the channels in the audio stream that enters
            or leaves the audio endpoint device.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.SetMasterVolumeLevelNative(System.Single,System.Guid)">
            <summary>
            The SetMasterVolumeLevel method sets the master volume level, in decibels, of the audio
            stream that enters or leaves the audio endpoint device.
            </summary>
            <param name="levelDB">The new master volume level in decibels. To obtain the range and
            granularity of the volume levels that can be set by this method, call the
            IAudioEndpointVolume::GetVolumeRange method.</param>
            <param name="eventContext">EventContext which can be accessed in the event handler.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.SetMasterVolumeLevel(System.Single,System.Guid)">
            <summary>
            The SetMasterVolumeLevel method sets the master volume level, in decibels, of the audio
            stream that enters or leaves the audio endpoint device.
            </summary>
            <param name="levelDB">The new master volume level in decibels. To obtain the range and
            granularity of the volume levels that can be set by this method, call the
            IAudioEndpointVolume::GetVolumeRange method.</param>
            <param name="eventContext">EventContext which can be accessed in the event handler.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.SetMasterVolumeLevelScalarNative(System.Single,System.Guid)">
            <summary>
            The SetMasterVolumeLevelScalar method sets the master volume level of the audio stream
            that enters or leaves the audio endpoint device. The volume level is expressed as a
            normalized, audio-tapered value in the range from 0.0 to 1.0.
            </summary>
            <param name="level">The new master volume level. The level is expressed as a normalized
            value in the range from 0.0 to 1.0.</param>
            <param name="eventContext">EventContext which can be accessed in the event handler.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.SetMasterVolumeLevelScalar(System.Single,System.Guid)">
            <summary>
            The SetMasterVolumeLevelScalar method sets the master volume level of the audio stream
            that enters or leaves the audio endpoint device. The volume level is expressed as a
            normalized, audio-tapered value in the range from 0.0 to 1.0.
            </summary>
            <param name="level">The new master volume level. The level is expressed as a normalized
            value in the range from 0.0 to 1.0.</param>
            <param name="eventContext">EventContext which can be accessed in the event handler.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetMasterVolumeLevelNative(System.Single@)">
            <summary>
            The GetMasterVolumeLevel method gets the master volume level, in decibels, of the audio
            stream that enters or leaves the audio endpoint device.
            </summary>
            <param name="levelDB">Pointer to the master volume level. This parameter points to a
            float variable into which the method writes the volume level in decibels. To get the
            range of volume levels obtained from this method, call the
            IAudioEndpointVolume::GetVolumeRange method.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetMasterVolumeLevel">
            <summary>
            The GetMasterVolumeLevel method gets the master volume level, in decibels, of the audio
            stream that enters or leaves the audio endpoint device.
            </summary>
            <returns>Volume level in decibels. To get the range of volume levels obtained from this
            method, call the IAudioEndpointVolume::GetVolumeRange method.</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetMasterVolumeLevelScalarNative(System.Single@)">
            <summary>
            The GetMasterVolumeLevelScalar method gets the master volume level of the audio stream
            that enters or leaves the audio endpoint device. The volume level is expressed as a
            normalized, audio-tapered value in the range from 0.0 to 1.0.
            </summary>
            <param name="level">Pointer to the master volume level. This parameter points to a float
            variable into which the method writes the volume level. The level is expressed as a
            normalized value in the range from 0.0 to 1.0.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetMasterVolumeLevelScalar">
            <summary>
            The GetMasterVolumeLevelScalar method gets the master volume level of the audio stream
            that enters or leaves the audio endpoint device. The volume level is expressed as a
            normalized, audio-tapered value in the range from 0.0 to 1.0.
            </summary>
            <returns>Volume level. The level is expressed as a normalized value in the range from
            0.0 to 1.0.</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.SetChannelVolumeLevelNative(System.UInt32,System.Single,System.Guid)">
            <summary>
            The SetChannelVolumeLevel method sets the volume level, in decibels, of the specified
            channel of the audio stream that enters or leaves the audio endpoint device.
            </summary>
            <param name="levelDB">The new volume level in decibels. To obtain the range and
            granularity of the volume levels that can be set by this method, call the
            IAudioEndpointVolume::GetVolumeRange method.</param>
            <param name="eventContext">EventContext which can be accessed in the event handler.</param>
            <param name="channel">The channel number. If the audio stream contains n channels, the channels are numbered from 0 to n– 1. </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.SetChannelVolumeLevel(System.UInt32,System.Single,System.Guid)">
            <summary>
            The SetChannelVolumeLevel method sets the volume level, in decibels, of the specified
            channel of the audio stream that enters or leaves the audio endpoint device.
            </summary>
            <param name="levelDB">The new volume level in decibels. To obtain the range and
            granularity of the volume levels that can be set by this method, call the
            IAudioEndpointVolume::GetVolumeRange method.</param>
            <param name="eventContext">EventContext which can be accessed in the event handler.</param>
            <param name="channel">The channel number. If the audio stream contains n channels, the channels are numbered from 0 to n– 1. </param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.SetChannelVolumeLevelScalarNative(System.UInt32,System.Single,System.Guid)">
            <summary>
            The SetChannelVolumeLevelScalar method sets the normalized, audio-tapered volume level
            of the specified channel in the audio stream that enters or leaves the audio endpoint
            device.
            </summary>
            <param name="level">The volume level. The volume level is expressed as a normalized
            value in the range from 0.0 to 1.0.</param>
            <param name="eventContext">EventContext which can be accessed in the event handler.</param>
            <param name="channel">The channel number. If the audio stream contains n channels, the channels are numbered from 0 to n– 1. </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.SetChannelVolumeLevelScalar(System.UInt32,System.Single,System.Guid)">
            <summary>
            The SetChannelVolumeLevelScalar method sets the normalized, audio-tapered volume level
            of the specified channel in the audio stream that enters or leaves the audio endpoint
            device.
            </summary>
            <param name="level">The volume level. The volume level is expressed as a normalized
            value in the range from 0.0 to 1.0.</param>
            <param name="eventContext">EventContext which can be accessed in the event handler.</param>
            <param name="channel">The channel number. If the audio stream contains n channels, the channels are numbered from 0 to n– 1. </param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetChannelVolumeLevelNative(System.UInt32,System.Single@)">
            <summary>
            The GetChannelVolumeLevel method gets the volume level, in decibels, of the specified
            channel in the audio stream that enters or leaves the audio endpoint device.
            </summary>
            <param name="levelDB">Pointer to a float variable into which the method writes the
            volume level in decibels. To get the range of volume levels obtained from this method,
            call the IAudioEndpointVolume::GetVolumeRange method.</param>
            <param name="channel">The channel number. If the audio stream contains n channels, the channels are numbered from 0 to n– 1. </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetChannelVolumeLevel(System.UInt32)">
            <summary>
            The GetChannelVolumeLevel method gets the volume level, in decibels, of the specified
            channel in the audio stream that enters or leaves the audio endpoint device.
            </summary>
            <param name="channel">The channel number. If the audio stream contains n channels, the channels are numbered from 0 to n– 1. </param>
            <returns>Volume level in decibels. To get the range of volume levels obtained from this
            method, call the IAudioEndpointVolume::GetVolumeRange method.</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetChannelVolumeLevelScalarNative(System.UInt32,System.Single@)">
            <summary>
            The GetChannelVolumeLevelScalar method gets the normalized, audio-tapered volume level
            of the specified channel of the audio stream that enters or leaves the audio endpoint
            device.
            </summary>
            <param name="level">Pointer to a float variable into which the method writes the volume
            level. The level is expressed as a normalized value in the range from 0.0 to
            1.0.</param>
            <param name="channel">The channel number. If the audio stream contains n channels, the channels are numbered from 0 to n– 1. </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetChannelVolumeLevelScalar(System.UInt32)">
            <summary>
            The GetChannelVolumeLevelScalar method gets the normalized, audio-tapered volume level
            of the specified channel of the audio stream that enters or leaves the audio endpoint
            device.
            </summary>
            <param name="channel">The channel number. If the audio stream contains n channels, the channels are numbered from 0 to n– 1. </param>
            <returns>Volume level of a specific channel. The level is expressed as a normalized
            value in the range from 0.0 to 1.0.</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.SetMuteNative(CSCore.Win32.NativeBool,System.Guid)">
            <summary>
            The SetMute method sets the muting state of the audio stream that enters or leaves the
            audio endpoint device.
            </summary>
            <param name="mute">True mutes the stream. False turns off muting.</param>
            <param name="eventContext">EventContext which can be accessed in the event handler.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.SetMute(System.Boolean,System.Guid)">
            <summary>
            The SetMute method sets the muting state of the audio stream that enters or leaves the
            audio endpoint device.
            </summary>
            <param name="eventContext">EventContext which can be accessed in the event handler.</param>
            <param name="mute">True mutes the stream. False turns off muting.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetMuteNative(CSCore.Win32.NativeBool@)">
            <summary>
            The GetMute method gets the muting state of the audio stream that enters or leaves the
            audio endpoint device.
            </summary>
            <param name="mute">True = Stream is muted. False = Stream is not muted.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetMute">
            <summary>
            The GetMute method gets the muting state of the audio stream that enters or leaves the
            audio endpoint device.
            </summary>
            <returns>True = Stream is muted. False = Stream is not muted.</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetVolumeStepInfoNative(System.UInt32@,System.UInt32@)">
            <summary>
            The GetVolumeStepInfo method gets information about the current step in the volume
            range.
            </summary>
            <param name="currentStep">Current stepindex. This value is a value in the range from 0
            to stepCount.</param>
            <param name="stepCount">Number of steps in the volume range.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetVolumeStepInfo(System.UInt32@,System.UInt32@)">
            <summary>
            The GetVolumeStepInfo method gets information about the current step in the volume
            range.
            </summary>
            <param name="currentStep">Current stepindex. This value is a value in the range from 0
            to stepCount.</param>
            <param name="stepCount">Number of steps in the volume range.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.VolumeStepUpNative(System.Guid)">
            <summary>
            The VolumeStepUp method increments, by one step, the volume level of the audio stream
            that enters or leaves the audio endpoint device.
            </summary>
            <param name="eventContext">EventContext which can be accessed in the event handler.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.VolumeStepUp(System.Guid)">
            <summary>
            The VolumeStepUp method increments, by one step, the volume level of the audio stream
            that enters or leaves the audio endpoint device.
            </summary>
            <param name="eventContext">EventContext which can be accessed in the event handler.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.VolumeStepDownNative(System.Guid)">
            <summary>
            The VolumeStepDown method decrements, by one step, the volume level of the audio stream
            that enters or leaves the audio endpoint device.
            </summary>
            <param name="eventContext">EventContext which can be accessed in the event handler.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.VolumeStepDown(System.Guid)">
            <summary>
            The VolumeStepDown method decrements, by one step, the volume level of the audio stream
            that enters or leaves the audio endpoint device.
            </summary>
            <param name="eventContext">EventContext which can be accessed in the event handler.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.QueryHardwareSupportNative(CSCore.CoreAudioAPI.EndpointHardwareSupport@)">
            <summary>
            The QueryHardwareSupport method queries the audio endpoint device for its
            hardware-supported functions.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.QueryHardwareSupport">
            <summary>
            The QueryHardwareSupport method queries the audio endpoint device for its
            hardware-supported functions.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetVolumeRangeNative(System.Single@,System.Single@,System.Single@)">
            <summary>
            The GetVolumeRange method gets the volume range, in decibels, of the audio stream that
            enters or leaves the audio endpoint device.
            </summary>
            <param name="volumeMinDB">Minimum volume level in decibels. This value remains constant
            for the lifetime of the IAudioEndpointVolume interface instance.</param>
            <param name="volumeMaxDB">Maximum volume level in decibels. This value remains constant
            for the lifetime of the IAudioEndpointVolume interface instance.</param>
            <param name="volumeIncrementDB">Volume increment in decibels. This increment remains
            constant for the lifetime of the IAudioEndpointVolume interface instance.</param>
            <returns>HREUSLT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetVolumeRange(System.Single@,System.Single@,System.Single@)">
            <summary>
            The GetVolumeRange method gets the volume range, in decibels, of the audio stream that
            enters or leaves the audio endpoint device.
            </summary>
            <param name="volumeMinDB">Minimum volume level in decibels. This value remains constant
            for the lifetime of the IAudioEndpointVolume interface instance.</param>
            <param name="volumeMaxDB">Maximum volume level in decibels. This value remains constant
            for the lifetime of the IAudioEndpointVolume interface instance.</param>
            <param name="volumeIncrementDB">Volume increment in decibels. This increment remains
            constant for the lifetime of the IAudioEndpointVolume interface instance.</param>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioEndpointVolume.RegisteredCallbacks">
            <summary>
            List of all registered <see cref="T:CSCore.CoreAudioAPI.IAudioEndpointVolumeCallback"/>.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioEndpointVolume.ChannelCount">
            <summary>
            Gets the number of available channels. <seealso cref="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetChannelCount"/>
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioEndpointVolume.MasterVolumeLevel">
            <summary>
            Gets or sets the MasterVolumeLevel in decibel.
            <seealso cref="M:CSCore.CoreAudioAPI.AudioEndpointVolume.GetMasterVolumeLevel"/>
            <seealso cref="M:CSCore.CoreAudioAPI.AudioEndpointVolume.SetMasterVolumeLevel(System.Single,System.Guid)"/>
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioEndpointVolume.MasterVolumeLevelScalar">
            <summary>
            Gets or sets the MasterVolumeLevel as a normalized value in the range from 0.0 to 1.0.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioEndpointVolume.Channels">
            <summary>
            Gets all available channels.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioEndpointVolumeCallbackEventArgs.MasterVolume">
            <summary>
            Specifies the current master volume level of the audio stream. The volume level is
            normalized to the range from 0.0 to 1.0, where 0.0 is the minimum volume level and 1.0
            is the maximum level. Within this range, the relationship of the normalized volume level
            to the attenuation of signal amplitude is described by a nonlinear, audio-tapered curve.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioEndpointVolumeCallbackEventArgs.ChannelVolumes">
            <summary>
            The volume level for each channel is normalized to the range from 0.0 to 1.0, where 0.0
            is the minimum volume level and 1.0 is the maximum level. Within this range, the
            relationship of the normalized volume level to the attenuation of signal amplitude is
            described by a nonlinear, audio-tapered curve.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioRenderClient.#ctor(System.IntPtr)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.CoreAudioAPI.AudioRenderClient"/> class.
            </summary>
            <param name="ptr">Pointer to the <see cref="T:CSCore.CoreAudioAPI.AudioRenderClient"/> instance.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioRenderClient.FromAudioClient(CSCore.CoreAudioAPI.AudioClient)">
            <summary>
                Returns a new instance of the <see cref="T:CSCore.CoreAudioAPI.AudioRenderClient"/> class. This is done by calling the
                <see cref="M:CSCore.CoreAudioAPI.AudioClient.GetService(System.Guid)"/> method of the <see cref="T:CSCore.CoreAudioAPI.AudioClient"/> class.
            </summary>
            <param name="audioClient">
                <see cref="T:CSCore.CoreAudioAPI.AudioClient"/> instance which should be used to create the new
                <see cref="T:CSCore.CoreAudioAPI.AudioRenderClient"/> instance.
            </param>
            <returns>A new instance of the <see cref="T:CSCore.CoreAudioAPI.AudioRenderClient"/> class.</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioRenderClient.GetBuffer(System.Int32)">
            <summary>
                Retrieves a pointer to the next available space in the rendering endpoint buffer into
                which the caller can write a data packet.
            </summary>
            <returns>Buffer</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioRenderClient.GetBufferNative(System.Int32,System.IntPtr@)">
            <summary>
                Retrieves a pointer to the next available space in the rendering endpoint buffer into
                which the caller can write a data packet.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioRenderClient.ReleaseBufferNative(System.Int32,CSCore.CoreAudioAPI.AudioClientBufferFlags)">
            <summary>
                The ReleaseBuffer method releases the buffer space acquired in the previous call to the
                IAudioRenderClient::GetBuffer method.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioRenderClient.ReleaseBuffer(System.Int32,CSCore.CoreAudioAPI.AudioClientBufferFlags)">
            <summary>
                The ReleaseBuffer method releases the buffer space acquired in the previous call to the
                IAudioRenderClient::GetBuffer method.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioVolumeNotificationData">
            <summary>
            see http://msdn.microsoft.com/en-us/library/dd370799(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioClient">
            <summary>
            Enables a client to create and initialize an audio stream between an audio application and the audio engine (for a shared-mode stream) or the hardware buffer of an audio endpoint device (for an exclusive-mode stream). For more details see
            <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd370865(v=vs.85).aspx"/>.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioClient.IID_IAudioClient">
            <summary>
            IID of the IAudioClient-interface.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.FromMMDevice(CSCore.CoreAudioAPI.MMDevice)">
            <summary>
            Creates a new <see cref="T:CSCore.CoreAudioAPI.AudioClient"/> instance.
            </summary>
            <param name="device">Device which should be used to create the <see cref="T:CSCore.CoreAudioAPI.AudioClient"/> instance.</param>
            <returns><see cref="T:CSCore.CoreAudioAPI.AudioClient"/> instance.</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.CoreAudioAPI.AudioClient"/> class.
            </summary>
            <param name="ptr">Native pointer.</param>
            <remarks>Use the <see cref="M:CSCore.CoreAudioAPI.AudioClient.FromMMDevice(CSCore.CoreAudioAPI.MMDevice)"/> method to create a new <see cref="T:CSCore.CoreAudioAPI.AudioClient"/> instance.</remarks>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.InitializeNative(CSCore.CoreAudioAPI.AudioClientShareMode,CSCore.CoreAudioAPI.AudioClientStreamFlags,System.Int64,System.Int64,CSCore.WaveFormat,System.Guid)">
            <summary>
            The Initialize method initializes the audio stream.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.Initialize(CSCore.CoreAudioAPI.AudioClientShareMode,CSCore.CoreAudioAPI.AudioClientStreamFlags,System.Int64,System.Int64,CSCore.WaveFormat,System.Guid)">
            <summary>
            The Initialize method initializes the audio stream.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.GetBufferSize(System.UInt32@)">
            <summary>
            The GetBufferSize method retrieves the size (maximum capacity) of the endpoint buffer.
            </summary>
            <remarks>
            The length is expressed as the number of audio frames the buffer can hold. The size in
            bytes of an audio frame is calculated as the number of channels in the stream multiplied
            by the sample size per channel. For example, the frame size is four bytes for a stereo
            (2-channel) stream with 16-bit samples.
            </remarks>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.GetBufferSize">
            <summary>
            The GetBufferSize method retrieves the size (maximum capacity) of the endpoint buffer.
            </summary>
            ///
            <remarks>
            The length is expressed as the number of audio frames the buffer can hold. The size in
            bytes of an audio frame is calculated as the number of channels in the stream multiplied
            by the sample size per channel. For example, the frame size is four bytes for a stereo
            (2-channel) stream with 16-bit samples.
            </remarks>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.GetStreamLatency(System.Int64@)">
            <summary>
            The GetStreamLatency method retrieves the maximum latency for the current stream and can
            be called any time after the stream has been initialized.
            </summary>
            <remarks>
            Rendering clients can use this latency value to compute the minimum amount of data that
            they can write during any single processing pass. To write less than this minimum is to
            risk introducing glitches into the audio stream. For more information, see
            IAudioRenderClient::GetBuffer.
            </remarks>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.GetStreamLatency">
            <summary>
            The GetStreamLatency method retrieves the maximum latency for the current stream and can
            be called any time after the stream has been initialized.
            </summary>
            <remarks>
            Rendering clients can use this latency value to compute the minimum amount of data that
            they can write during any single processing pass. To write less than this minimum is to
            risk introducing glitches into the audio stream. For more information, see
            IAudioRenderClient::GetBuffer.
            </remarks>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.GetCurrentPaddingNative(System.UInt32@)">
            <summary>
            The GetCurrentPadding method retrieves the number of frames of padding in the endpoint
            buffer.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.GetCurrentPadding">
            <summary>
            The GetCurrentPadding method retrieves the number of frames of padding in the endpoint
            buffer.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.IsFormatSupportedNative(CSCore.CoreAudioAPI.AudioClientShareMode,CSCore.WaveFormat,CSCore.WaveFormat@)">
            <summary>
            The IsFormatSupportedInternal method indicates whether the audio endpoint device
            supports a particular stream format.
            </summary>
            <returns>For exclusive mode, IsFormatSupportedInternal returns S_OK if the audio
            endpoint device supports the caller-specified format, or it returns
            AUDCLNT_E_UNSUPPORTED_FORMAT if the device does not support the format. The
            ppClosestMatch parameter can be NULL. If it is not NULL, the method writes NULL to
            *ppClosestMatch. For shared mode, if the audio engine supports the caller-specified
            format, IsFormatSupportedInternal sets *ppClosestMatch to NULL and returns S_OK. If the
            audio engine does not support the caller-specified format but does support a similar
            format, the method retrieves the similar format through the ppClosestMatch parameter and
            returns S_FALSE. If the audio engine does not support the caller-specified format or any
            similar format, the method sets *ppClosestMatch to NULL and returns
            AUDCLNT_E_UNSUPPORTED_FORMAT.</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.IsFormatSupported(CSCore.CoreAudioAPI.AudioClientShareMode,CSCore.WaveFormat,CSCore.WaveFormat@)">
            <summary>
            Checks whether the audio endpoint device supports a particular stream format.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.IsFormatSupported(CSCore.CoreAudioAPI.AudioClientShareMode,CSCore.WaveFormat)">
            <summary>
            Checks whether the audio endpoint device supports a particular stream format.
            </summary>
            <param name="shareMode"></param>
            <param name="waveFormat"></param>
            <returns></returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.GetMixFormat(CSCore.WaveFormat@)">
            <summary>
            The GetMixFormat method retrieves the stream format that the audio engine uses for its
            internal processing of shared-mode streams.
            </summary>
            <remarks>
            </remarks>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.GetMixFormat">
            <summary>
            The GetMixFormat method retrieves the stream format that the audio engine uses for its
            internal processing of shared-mode streams.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.GetDevicePeriod(System.Int64@,System.Int64@)">
            <summary>
            The GetDevicePeriod method retrieves the length of the periodic interval separating
            successive processing passes by the audio engine on the data in the endpoint buffer.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.StartNative">
            <summary>
            The Start method starts the audio stream.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.Start">
            <summary>
            The Start method starts the audio stream.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.StopNative">
            <summary>
            The Stop method stops the audio stream.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.Stop">
            <summary>
            The Stop method stops the audio stream.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.ResetNative">
            <summary>
            The Reset method resets the audio stream.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.Reset">
            <summary>
            The Reset method resets the audio stream.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.SetEventHandleNative(System.IntPtr)">
            <summary>
            The SetEventHandle method sets the event handle that the system signals when an audio
            buffer is ready to be processed by the client.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.SetEventHandle(System.IntPtr)">
            <summary>
            The SetEventHandle method sets the event handle that the system signals when an audio
            buffer is ready to be processed by the client.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.GetServiceNative(System.Guid,System.IntPtr@)">
            <summary>
            The GetService method accesses additional services from the audio client object. Fore
            more details see
            http://msdn.microsoft.com/en-us/library/windows/desktop/dd370873(v=vs.85).aspx
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.AudioClient.GetService(System.Guid)">
            <summary>
            The GetService method accesses additional services from the audio client object. Fore
            more details see
            http://msdn.microsoft.com/en-us/library/windows/desktop/dd370873(v=vs.85).aspx
            </summary>
            <remarks>
            For a few services, there are already existing classes with static
            "FromAudioClient"-Methods like AudioRenderClient::FromAudioClient.
            </remarks>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioClient.DefaultDevicePeriod">
            <summary>
            Gets the default interval between periodic processing passes by the audio engine. The time is expressed in 100-nanosecond units.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioClient.MinimumDevicePeriod">
            <summary>
            Gets the minimum interval between periodic processing passes by the audio endpoint device. The time is expressed in 100-nanosecond units.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioClient.BufferSize">
            <summary>
            Gets the maximum capacity of the endpoint buffer.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioClient.CurrentPadding">
            <summary>
            Gets the number of frames of padding in the endpoint buffer.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioClient.MixFormat">
            <summary>
            Gets the stream format that the audio engine uses for its
            internal processing of shared-mode streams.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.AudioClient.StreamLatency">
            <summary>
            Gets the maximum latency for the current stream and can
            be called any time after the stream has been initialized.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.AudioClientShareMode">
            <summary>
            AudioClient share mode
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioClientShareMode.Shared">
            <summary>
            The device will be opened in shared mode and use the WAS format.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.AudioClientShareMode.Exclusive">
            <summary>
            The device will be opened in exclusive mode and use the application specified format.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.MMDeviceCollection">
            <summary>
            Represents a collection of multimedia device resources.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.MMDeviceCollection.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.CoreAudioAPI.MMDeviceCollection"/> class.
            </summary>
            <param name="ptr">The native pointer.</param>
            <remarks>Use the <see cref="M:CSCore.CoreAudioAPI.MMDeviceEnumerator.EnumAudioEndpoints(CSCore.CoreAudioAPI.DataFlow,CSCore.CoreAudioAPI.DeviceState)"/> method to create an instance of the <see cref="T:CSCore.CoreAudioAPI.MMDeviceCollection"/> class.</remarks>
        </member>
        <member name="M:CSCore.CoreAudioAPI.MMDeviceCollection.GetCount">
            <summary>
            The <see cref="M:CSCore.CoreAudioAPI.MMDeviceCollection.GetCount"/> method retrieves a count of the devices in the device collection.
            </summary>
            <returns>The number of devices in the device collection.</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.MMDeviceCollection.GetCountNative(System.Int32@)">
            <summary>
            The <see cref="M:CSCore.CoreAudioAPI.MMDeviceCollection.GetCount"/> method retrieves a count of the devices in the device collection.
            </summary>
            <param name="deviceCount">Variable into which the method writes the number of devices in the device collection.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.MMDeviceCollection.ItemAt(System.Int32)">
            <summary>
            The <see cref="M:CSCore.CoreAudioAPI.MMDeviceCollection.ItemAtNative(System.Int32,System.IntPtr@)"/> method retrieves a pointer to the specified item in the device collection.
            </summary>
            <param name="deviceIndex">The device number. If the collection contains n devices, the devices are numbered 0 to n– 1.</param>
            <returns>The <see cref="T:CSCore.CoreAudioAPI.MMDevice"/> object of the specified item in the device collection.</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.MMDeviceCollection.ItemAtNative(System.Int32,System.IntPtr@)">
            <summary>
            The <see cref="M:CSCore.CoreAudioAPI.MMDeviceCollection.ItemAtNative(System.Int32,System.IntPtr@)"/> method retrieves a pointer to the specified item in the device collection.
            </summary>
            <param name="deviceIndex">The device number. If the collection contains n devices, the devices are numbered 0 to n– 1.</param>
            <param name="device">Pointer to a pointer variable into which the method writes the address of the <see cref="T:CSCore.CoreAudioAPI.MMDevice"/> object of the specified item in the device collection.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.MMDeviceCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:CSCore.CoreAudioAPI.MMDeviceCollection"/>.
            </summary>
            <returns>Enumerator for the <see cref="T:CSCore.CoreAudioAPI.MMDeviceCollection"/>.</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.MMDeviceCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:CSCore.CoreAudioAPI.MMDeviceCollection"/>.
            </summary>
            <returns>Enumerator for the <see cref="T:CSCore.CoreAudioAPI.MMDeviceCollection"/>.</returns>
        </member>
        <member name="P:CSCore.CoreAudioAPI.MMDeviceCollection.Count">
            <summary>
            Gets the number of devices in the device collection.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.MMDeviceCollection.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.SimpleAudioVolume.SetMasterVolumeInternal(System.Single,System.Guid)">
            <summary>
            The SetMasterVolume method sets the master volume level for the audio session.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.SimpleAudioVolume.GetMasterVolumeInternal(System.Single@)">
            <summary>
            The GetMasterVolume method retrieves the client volume level for the audio session.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.SimpleAudioVolume.SetMuteInternal(CSCore.Win32.NativeBool,System.Guid)">
            <summary>
            The SetMute method sets the muting state for the audio session.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.SimpleAudioVolume.GetMuteInternal(CSCore.Win32.NativeBool@)">
            <summary>
            The GetMute method retrieves the current muting state for the audio session.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="P:CSCore.CoreAudioAPI.SimpleAudioVolume.MasterVolume">
            <summary>
            Gets or sets the master volume level for the audio session.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.SimpleAudioVolume.IsMuted">
            <summary>
            Gets or sets the muting state for the audio session.
            </summary>
        </member>
        <member name="T:CSCore.DMO.MediaBuffer">
            <summary>
                Default-Implementation of the IMediaBuffer interface.
                See http://msdn.microsoft.com/en-us/library/windows/desktop/dd376684(v=vs.85).aspx.
            </summary>
        </member>
        <member name="M:CSCore.DMO.MediaBuffer.#ctor(System.Int32)">
            <summary>
                Creates a MediaBuffer and allocates the specified number of bytes in the memory.
            </summary>
            <param name="maxlength">The number of bytes which has to be allocated in the memory.</param>
        </member>
        <member name="M:CSCore.DMO.MediaBuffer.Dispose">
            <summary>
                Frees the allocated memory of the internally used buffer.
            </summary>
        </member>
        <member name="M:CSCore.DMO.MediaBuffer.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Writes a sequence of bytes to the internally used buffer.
            </summary>
            <param name="buffer">
                Array of bytes. The Write method copies data from the specified array of bytes to the internally
                used buffer.
            </param>
            <param name="offset">
                Zero-based bytes offset in the specified buffer at which to begin copying bytes to the internally
                used buffer.
            </param>
            <param name="count">The number of bytes to be copied.</param>
        </member>
        <member name="M:CSCore.DMO.MediaBuffer.Read(System.Byte[],System.Int32)">
            <summary>
                Reads a sequence of bytes from the internally used buffer.
            </summary>
            <param name="buffer">Array of bytes to store the read bytes in.</param>
            <param name="offset">
                Zero-based byte offset in the specified buffer at which to begin storing the data read from the
                buffer.
            </param>
        </member>
        <member name="M:CSCore.DMO.MediaBuffer.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads a sequence of bytes from the buffer.
            </summary>
            <param name="buffer">Array of bytes to store the read bytes in.</param>
            <param name="offset">
                Zero-based byte offset in the specified buffer at which to begin storing the data read from the
                buffer.
            </param>
            <param name="count">The maximum number of bytes to read from the buffer.</param>
        </member>
        <member name="M:CSCore.DMO.MediaBuffer.Read(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
                Reads a sequence of bytes from the buffer.
            </summary>
            <param name="buffer">Array of bytes to store the read bytes in.</param>
            <param name="offset">
                Zero-based byte offset in the specified buffer at which to begin storing the data read from the
                buffer.
            </param>
            <param name="count">The maximum number of bytes to read from the buffer.</param>
            <param name="sourceOffset">Zero-based byte source offset.</param>
        </member>
        <member name="M:CSCore.DMO.MediaBuffer.Dispose(System.Boolean)">
            <summary>
                Frees the allocated memory of the internally used buffer.
            </summary>
        </member>
        <member name="M:CSCore.DMO.MediaBuffer.Finalize">
            <summary>
                Frees the allocated memory of the internally used buffer.
            </summary>
        </member>
        <member name="P:CSCore.DMO.MediaBuffer.MaxLength">
            <summary>
                Gets the maximum number of bytes this buffer can hold.
            </summary>
        </member>
        <member name="P:CSCore.DMO.MediaBuffer.Length">
            <summary>
                Gets the length of the data currently in the buffer.
            </summary>
        </member>
        <member name="T:CSCore.DMO.MediaObject">
            <summary>
                Represents a DMO MediaObject.
            </summary>
        </member>
        <member name="M:CSCore.DMO.MediaObject.#ctor(System.IntPtr)">
            <summary>
                Creates a MediaObject from its pointer.
            </summary>
            <param name="ptr">Pointer of a MediaObject.</param>
        </member>
        <member name="M:CSCore.DMO.MediaObject.FromComObject(CSCore.Win32.ComObject)">
            <summary>
                Creates a MediaObject from any ComObjects which derives from MediaObject.
            </summary>
            <remarks>
                Internally they IUnknown::QueryInterface method of the passed COM Object gets called.
            </remarks>
            <param name="comObj">ComObjects which has to get casted to a MediaObject.</param>
            <returns>MediaObject</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.GetStreamCountNative(System.Int32@,System.Int32@)">
            <summary>
                Retrieves the number of input and output streams.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.GetStreamCount(System.Int32@,System.Int32@)">
            <summary>
                Retrieves the number of input and output streams.
            </summary>
        </member>
        <member name="M:CSCore.DMO.MediaObject.GetInputStreamInfoNative(System.Int32,CSCore.DMO.DmoInputStreamInfoFlags@)">
            <summary>
                Retrieves information about a specified input stream.
            </summary>
            <param name="inputStreamIndex">Zero-based index of an input stream on the DMO.</param>
            <param name="flags">Bitwise combination of zero or more <see cref="T:CSCore.DMO.DmoInputStreamInfoFlags"/> flags.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.GetInputStreamInfo(System.Int32)">
            <summary>
                Retrieves information about a specified input stream.
            </summary>
            <param name="inputStreamIndex">Zero-based index of an input stream on the DMO.</param>
        </member>
        <member name="M:CSCore.DMO.MediaObject.GetOutputStreamInfoNative(System.Int32,CSCore.DMO.DmoOutputStreamInfoFlags@)">
            <summary>
                Retrieves information about a specified output stream.
            </summary>
            <param name="outputStreamIndex">Zero-based index of an output stream on the DMO.</param>
            <param name="flags">Bitwise combination of zero or more <see cref="T:CSCore.DMO.DmoOutputStreamInfoFlags"/> flags.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.GetOutputStreamInfo(System.Int32)">
            <summary>
                Retrieves information about a specified output stream.
            </summary>
            <param name="outputStreamIndex">Zero-based index of an output stream on the DMO.</param>
        </member>
        <member name="M:CSCore.DMO.MediaObject.GetInputTypeNative(System.Int32,System.Int32,System.Nullable{CSCore.DMO.MediaType}@)">
            <summary>
                Retrieves a preferred media type for a specified input stream.
            </summary>
            <param name="typeIndex">Zero-based index on the set of acceptable media types.</param>
            <param name="mediaType">
                Can be null to check whether the typeIndex argument is in range. If not, the errorcode will be
                DMO_E_NO_MORE_ITEMS (0x80040206).
            </param>
            <param name="inputStreamIndex">Zero-based index of an input stream on the DMO.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.GetInputType(System.Int32,System.Int32)">
            <summary>
                Retrieves a preferred media type for a specified input stream.
            </summary>
            <param name="typeIndex">Zero-based index on the set of acceptable media types.</param>
            <param name="inputStreamIndex">Zero-based index of an input stream on the DMO.</param>
        </member>
        <member name="M:CSCore.DMO.MediaObject.GetOutputTypeNative(System.Int32,System.Int32,System.Nullable{CSCore.DMO.MediaType}@)">
            <summary>
                Retrieves a preferred media type for a specified output stream.
            </summary>
            <param name="typeIndex">Zero-based index on the set of acceptable media types.</param>
            <param name="mediaType">
                Can be null to check whether the typeIndex argument is in range. If not, the errorcode will be
                DMO_E_NO_MORE_ITEMS (0x80040206).
            </param>
            <param name="outputStreamIndex">Zero-based index of an output stream on the DMO.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.GetOutputType(System.Int32,System.Int32)">
            <summary>
                Retrieves a preferred media type for a specified output stream.
            </summary>
            <param name="typeIndex">Zero-based index on the set of acceptable media types.</param>
            <param name="outputStreamIndex">Zero-based index of an output stream on the DMO.</param>
        </member>
        <member name="M:CSCore.DMO.MediaObject.SetInputTypeNative(System.Int32,CSCore.DMO.MediaType,CSCore.DMO.SetTypeFlags)">
            <summary>
                The SetInputType method sets the media type on an input stream, or tests whether a media type is acceptable.
            </summary>
            <param name="inputStreamIndex">Zero-based index of an input stream on the DMO.</param>
            <param name="mediaType">The new mediatype.</param>
            <param name="flags">Flags for setting the mediatype.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.ClearInputType(System.Int32)">
            <summary>
                Clears the inputtype for a specific inputStreamIndex.
            </summary>
            <param name="inputStreamIndex">Zero-based index of an input stream on the DMO.</param>
        </member>
        <member name="M:CSCore.DMO.MediaObject.SetInputType(System.Int32,CSCore.DMO.MediaType,CSCore.DMO.SetTypeFlags)">
            <summary>
                The SetInputType method sets the media type on an input stream.
            </summary>
            <param name="inputStreamIndex">Zero-based index of an input stream on the DMO.</param>
            <param name="mediaType">The new mediatype.</param>
            <param name="flags">Flags for setting the mediatype.</param>
        </member>
        <member name="M:CSCore.DMO.MediaObject.SetInputType(System.Int32,CSCore.WaveFormat)">
            <summary>
                The SetInputType method sets the media type on an input stream.
            </summary>
            <param name="inputStreamIndex">Zero-based index of an input stream on the DMO.</param>
            <param name="waveFormat">The waveformat which gets converted to the new mediatype.</param>
        </member>
        <member name="M:CSCore.DMO.MediaObject.SupportsInputFormat(System.Int32,CSCore.WaveFormat)">
            <summary>
                Tests whether the given waveformat is supported.
            </summary>
            <param name="inputStreamIndex">Zero-based index of an input stream on the DMO.</param>
            <param name="waveFormat">Waveformat</param>
            <returns>True = supported, False = not supported</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.SupportsInputFormat(System.Int32,CSCore.DMO.MediaType)">
            <summary>
                Tests whehter the given mediatype is supported.
            </summary>
            <param name="inputStreamIndex">Zero-based index of an input stream on the DMO.</param>
            <param name="mediaType">Mediatype</param>
            <returns>True = supported, False = not supported</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.SetOutputTypeNative(System.Int32,CSCore.DMO.MediaType,CSCore.DMO.SetTypeFlags)">
            <summary>
                The SetOutputType method sets the media type on an output stream, or tests whether a media type is acceptable.
            </summary>
            <param name="outputStreamIndex">Zero-based index of an output stream on the DMO.</param>
            <param name="mediaType">The new mediatype.</param>
            <param name="flags">Flags for setting the mediatype.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.ClearOutputType(System.Int32)">
            <summary>
                Clears the outputtype for a specific mediatype
            </summary>
            <param name="outputStreamIndex">Zero-based index of an output stream on the DMO.</param>
        </member>
        <member name="M:CSCore.DMO.MediaObject.SetOutputType(System.Int32,CSCore.DMO.MediaType,CSCore.DMO.SetTypeFlags)">
            <summary>
                The SetOutputType method sets the media type on an output stream, or tests whether a media type is acceptable.
            </summary>
            <param name="outputStreamIndex">Zero-based index of an output stream on the DMO.</param>
            <param name="mediaType">The new mediatype.</param>
            <param name="flags">Flags for setting the mediatype.</param>
        </member>
        <member name="M:CSCore.DMO.MediaObject.SetOutputType(System.Int32,CSCore.WaveFormat)">
            <summary>
                The SetOutputType method sets the media type on an output stream, or tests whether a media type is acceptable.
            </summary>
            <param name="outputStreamIndex">Zero-based index of an output stream on the DMO.</param>
            <param name="waveFormat">The new waveformat.</param>
        </member>
        <member name="M:CSCore.DMO.MediaObject.SupportsOutputFormat(System.Int32,CSCore.WaveFormat)">
            <summary>
                Tests whether the given WaveFormat is supported as OutputFormat.
            </summary>
            <param name="outputStreamIndex">Zero-based index of an output stream on the DMO.</param>
            <param name="waveFormat">WaveFormat</param>
            <returns>True = supported, False = not supported</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.SupportsOutputFormat(System.Int32,CSCore.DMO.MediaType)">
            <summary>
                Tests whether the given MediaType is supported as OutputFormat.
            </summary>
            <param name="outputStreamIndex">Zero-based index of an output stream on the DMO.</param>
            <param name="mediaType">MediaType</param>
            <returns>True = supported, False = not supported</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.GetInputCurrentType(System.Int32,CSCore.DMO.MediaType@)">
            <summary>
                The GetInputCurrentType method retrieves the media type that was set for an input stream, if any.
            </summary>
            <param name="inputStreamIndex">Zero-based index of an input stream on the DMO.</param>
            <param name="mediaType">MediaType</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.GetInputCurrentType(System.Int32)">
            <summary>
                The GetInputCurrentType method retrieves the media type that was set for an input stream, if any.
            </summary>
            <param name="inputStreamIndex">Zero-based index of an input stream on the DMO.</param>
        </member>
        <member name="M:CSCore.DMO.MediaObject.GetOutputCurrentType(System.Int32,CSCore.DMO.MediaType@)">
            <summary>
                The GetOutputCurrentType method retrieves the media type that was set for an output stream, if any.
            </summary>
            <param name="outputStreamIndex">Zero-based index of an output stream on the DMO.</param>
            <param name="mediaType">MediaType</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.GetOutputCurrentType(System.Int32)">
            <summary>
                The GetOutputCurrentType method retrieves the media type that was set for an output stream, if any.
            </summary>
            <param name="outputStreamIndex">Zero-based index of an output stream on the DMO.</param>
        </member>
        <member name="M:CSCore.DMO.MediaObject.GetInputSizeInfoNative(System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
                This method retrieves the buffer requirements for a specified input stream.
            </summary>
            <param name="inputStreamIndex">Zero-based index of an input stream on the DMO.</param>
            <param name="minSize">Minimum size of an input buffer for this stream, in bytes.</param>
            <param name="maxLookahead">
                The maximum amount of data that the DMO will hold for a lookahead, in bytes. If the DMO does
                not perform a lookahead on the stream, the value is zero.
            </param>
            <param name="alignment">
                The required buffer alignment, in bytes. If the input stream has no alignment requirement, the
                value is 1.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.GetInputSizeInfo(System.Int32)">
            <summary>
                This method retrieves the buffer requirements for a specified input stream.
            </summary>
            <param name="inputStreamIndex">Zero-based index of an input stream on the DMO.</param>
        </member>
        <member name="M:CSCore.DMO.MediaObject.GetOutputSizeInfoNative(System.Int32,System.Int32@,System.Int32@)">
            <summary>
                This method retrieves the buffer requirements for a specified output stream.
            </summary>
            <param name="outputStreamIndex">Zero-based index of an output stream on the DMO.</param>
            <param name="minSize">Minimum size of an output buffer for this stream, in bytes.</param>
            <param name="alignment">
                The required buffer alignment, in bytes. If the output stream has no alignment requirement, the
                value is 1.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.GetOutputSizeInfo(System.Int32)">
            <summary>
                This method retrieves the buffer requirements for a specified output stream.
            </summary>
            <param name="outputStreamIndex">Zero-based index of an output stream on the DMO.</param>
        </member>
        <member name="M:CSCore.DMO.MediaObject.GetInputMaxLatencyNative(System.Int32,System.Int64@)">
            <summary>
                Retrieves the maximum latency on a specified input stream.
            </summary>
            <param name="inputStreamIndex">Zero-based index of an input stream on the DMO.</param>
            <param name="maxLatency">Receives the maximum latency. Unit = REFERENCE_TIME = 100 nanoseconds</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.GetInputMaxLatency(System.Int32)">
            <summary>
                Retrieves the maximum latency on a specified input stream.
            </summary>
            <param name="inputStreamIndex">Zero-based index of an input stream on the DMO.</param>
            <returns>Maximum latency. Unit = REFERENCE_TIME = 100 nanoseconds</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.SetInputMaxLatencyNative(System.Int32,System.Int64)">
            <summary>
                Sets the maximum latency on a specified input stream. For the definition of maximum latency, see
                IMediaObject::GetInputMaxLatency.
            </summary>
            <param name="inputStreamIndex">Zero-based index of an input stream on the DMO.</param>
            <param name="maxLatency">Maximum latency. Unit = REFERENCE_TIME = 100 nanoseconds</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.SetInputMaxLatency(System.Int32,System.Int64)">
            <summary>
                Sets the maximum latency on a specified input stream. For the definition of maximum latency, see
                IMediaObject::GetInputMaxLatency.
            </summary>
            <param name="inputStreamIndex">Zero-based index of an input stream on the DMO.</param>
            <param name="maxLatency">Maximum latency. Unit = REFERENCE_TIME = 100 nanoseconds</param>
        </member>
        <member name="M:CSCore.DMO.MediaObject.FlushNative">
            <summary>
                This method flushes all internally buffered data.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.Flush">
            <summary>
                This method flushes all internally buffered data.
            </summary>
        </member>
        <member name="M:CSCore.DMO.MediaObject.DiscontinuityNative(System.Int32)">
            <summary>
                The Discontinuity method signals a discontinuity on the specified input stream.
            </summary>
            <param name="inputStreamIndex">Zero-based index of an input stream on the DMO.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.Discontinuity(System.Int32)">
            <summary>
                The Discontinuity method signals a discontinuity on the specified input stream.
            </summary>
            <param name="inputStreamIndex">Zero-based index of an input stream on the DMO.</param>
        </member>
        <member name="M:CSCore.DMO.MediaObject.AllocateStreamingResourcesNative">
            <summary>
                The AllocateStreamingResources method allocates any resources needed by the DMO. Calling this method is always
                optional.
                See http://msdn.microsoft.com/en-us/library/windows/desktop/dd406943(v=vs.85).aspx
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.AllocateStreamingResources">
            <summary>
                The AllocateStreamingResources method allocates any resources needed by the DMO. Calling this method is always
                optional.
                See http://msdn.microsoft.com/en-us/library/windows/desktop/dd406943(v=vs.85).aspx
            </summary>
        </member>
        <member name="M:CSCore.DMO.MediaObject.FreeStreamingResourcesNative">
            <summary>
                The FreeStreamingResources method frees resources allocated by the DMO. Calling this method is always optional.
            </summary>
            See http://msdn.microsoft.com/en-us/library/windows/desktop/dd406946(v=vs.85).aspx
            <returns>HREUSLT</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.FreeStreamingResources">
            <summary>
                The FreeStreamingResources method frees resources allocated by the DMO. Calling this method is always optional.
                See http://msdn.microsoft.com/en-us/library/windows/desktop/dd406946(v=vs.85).aspx
            </summary>
        </member>
        <member name="M:CSCore.DMO.MediaObject.GetInputStatus(System.Int32)">
            <summary>
                The GetInputStatus method queries whether an input stream can accept more input data.
                See http://msdn.microsoft.com/en-us/library/windows/desktop/dd406950(v=vs.85).aspx
            </summary>
            <param name="inputStreamIndex">Zero-based index of an input stream on the DMO.</param>
            <returns>InputStatusFlags</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.GetInputStatusNative(System.Int32,CSCore.DMO.InputStatusFlags@)">
            <summary>
                The GetInputStatus method queries whether an input stream can accept more input data.
                See http://msdn.microsoft.com/en-us/library/windows/desktop/dd406950(v=vs.85).aspx
            </summary>
            <param name="inputStreamIndex">Zero-based index of an input stream on the DMO.</param>
            <param name="flags">InputStatusFlags of the inputstream specified by the inputStreamIndex parameter.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.IsReadyForInput(System.Int32)">
            <summary>
                Queries whether an input stream can accept more input data.
            </summary>
            <param name="inputStreamIndex">Zero-based index of an input stream on the DMO.</param>
            <returns>If the return value is True, the input stream can accept more input data.</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.ProcessInput(System.Int32,CSCore.DMO.IMediaBuffer)">
            <summary>
                Delivers a buffer to the specified input stream.
            </summary>
            <param name="inputStreamIndex">Zero-based index of an input stream on the DMO.</param>
            <param name="mediaBuffer">The mediabuffer which has to be processed.</param>
        </member>
        <member name="M:CSCore.DMO.MediaObject.ProcessInput(System.Int32,CSCore.DMO.IMediaBuffer,CSCore.DMO.InputDataBufferFlags)">
            <summary>
                Delivers a buffer to the specified input stream.
            </summary>
            <param name="inputStreamIndex">Zero-based index of an input stream on the DMO.</param>
            <param name="mediaBuffer">The mediabuffer which has to be processed.</param>
            <param name="flags">Flags to describe the mediabuffer.</param>
        </member>
        <member name="M:CSCore.DMO.MediaObject.ProcessInput(System.Int32,CSCore.DMO.IMediaBuffer,CSCore.DMO.InputDataBufferFlags,System.Int64,System.Int64)">
            <summary>
                Delivers a buffer to the specified input stream.
            </summary>
            <param name="inputStreamIndex">Zero-based index of an input stream on the DMO.</param>
            <param name="mediaBuffer">The mediabuffer which has to be processed.</param>
            <param name="flags">Flags to describe the mediabuffer.</param>
            <param name="timestamp">
                Time stamp that specifies the start time of the data in the buffer. If the buffer has a valid
                time stamp, set the Time flag in the flags parameter.
            </param>
            <param name="timeduration">
                Reference time specifying the duration of the data in the buffer. If the buffer has a valid
                time stamp, set the TimeLength flag in the flags parameter.
            </param>
        </member>
        <member name="M:CSCore.DMO.MediaObject.ProcessInputNative(System.Int32,CSCore.DMO.IMediaBuffer,CSCore.DMO.InputDataBufferFlags,System.Int64,System.Int64)">
            <summary>
                Delivers a buffer to the specified input stream.
            </summary>
            <param name="inputStreamIndex">Zero-based index of an input stream on the DMO.</param>
            <param name="mediaBuffer">The mediabuffer which has to be processed.</param>
            <param name="flags">Flags to describe the mediabuffer.</param>
            <param name="timestamp">
                Time stamp that specifies the start time of the data in the buffer. If the buffer has a valid
                time stamp, set the Time flag in the flags parameter.
            </param>
            <param name="timeduration">
                Reference time specifying the duration of the data in the buffer. If the buffer has a valid
                time stamp, set the TimeLength flag in the flags parameter.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.ProcessOutput(CSCore.DMO.ProcessOutputFlags,CSCore.DMO.DmoOutputDataBuffer[])">
            <summary>
                Generates output from the current input data.
            </summary>
            <param name="flags">Flags that specify output processing requests</param>
            <param name="buffers">Array which contains the output buffers.</param>
        </member>
        <member name="M:CSCore.DMO.MediaObject.ProcessOutput(CSCore.DMO.ProcessOutputFlags,CSCore.DMO.DmoOutputDataBuffer[],System.Int32)">
            <summary>
                Generates output from the current input data.
            </summary>
            <param name="flags">Flags that specify output processing requests</param>
            <param name="buffers">Array which contains the output buffers.</param>
            <param name="bufferCount">Number of output buffers.</param>
        </member>
        <member name="M:CSCore.DMO.MediaObject.ProcessOutputNative(CSCore.DMO.ProcessOutputFlags,System.Int32,CSCore.DMO.DmoOutputDataBuffer[],System.Int32@)">
            <summary>
                Generates output from the current input data.
            </summary>
            <param name="flags">Flags that specify output processing requests</param>
            <param name="buffers">Array which contains the output buffers.</param>
            <param name="bufferCount">Number of output buffers.</param>
            <param name="status">Receives a reserved value (zero). The application should ignore this value.</param>
            <returns>HREUSLT</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.LockNative(System.Int64)">
            <summary>
                acquires or releases a lock on the DMO. Call this method to keep the DMO serialized when performing multiple
                operations.
            </summary>
            <param name="bLock">
                Value that specifies whether to acquire or release the lock. If the value is non-zero, a lock is
                acquired. If the value is zero, the lock is released.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.DMO.MediaObject.Lock(System.Int64)">
            <summary>
                acquires or releases a lock on the DMO. Call this method to keep the DMO serialized when performing multiple
                operations.
            </summary>
            <param name="bLock">
                Value that specifies whether to acquire or release the lock. If the value is non-zero, a lock is
                acquired. If the value is zero, the lock is released.
            </param>
        </member>
        <member name="P:CSCore.DMO.MediaObject.InputStreamCount">
            <summary>
                Gets the number of input streams.
            </summary>
        </member>
        <member name="P:CSCore.DMO.MediaObject.OutputStreamCount">
            <summary>
                Gets the number of output streams.
            </summary>
        </member>
        <member name="T:CSCore.DMO.MediaType">
            <summary>
                DMO_MEDIA_TYPE.
                See http://msdn.microsoft.com/en-us/library/windows/desktop/dd375504(v=vs.85).aspx.
            </summary>
        </member>
        <member name="M:CSCore.DMO.MediaType.FromWaveFormat(CSCore.WaveFormat)">
            <summary>
                Creates a MediaType based on a given WaveFormat. Don't forget to call Free() for the returend MediaType.
            </summary>
            <param name="waveFormat">WaveFormat to create a MediaType from.</param>
            <returns>Dmo MediaType</returns>
        </member>
        <member name="F:CSCore.DMO.MediaType.MajorType">
            <summary>
                A GUID identifying the stream's major media type. This must be one of the DMO Media
                Types(see http://msdn.microsoft.com/en-us/library/aa924843.aspx).
            </summary>
        </member>
        <member name="F:CSCore.DMO.MediaType.SubType">
            <summary>
                Subtype GUID of the stream.
            </summary>
        </member>
        <member name="F:CSCore.DMO.MediaType.FixedSizeSamples">
            <summary>
                If TRUE, samples are of a fixed size. This field is informational only. For audio, it is
                generally set to TRUE. For video, it is usually TRUE for uncompressed video and FALSE
                for compressed video.
            </summary>
        </member>
        <member name="F:CSCore.DMO.MediaType.TemporalCompression">
            <summary>
                If TRUE, samples are compressed using temporal (interframe) compression. A value of TRUE
                indicates that not all frames are key frames. This field is informational only.
            </summary>
        </member>
        <member name="F:CSCore.DMO.MediaType.SampleSize">
            <summary>
                Size of the sample, in bytes. For compressed data, the value can be zero.
            </summary>
        </member>
        <member name="F:CSCore.DMO.MediaType.FormatType">
            <summary>
                GUID specifying the format type. The pbFormat member points to the corresponding format
                structure. (see http://msdn.microsoft.com/en-us/library/aa929922.aspx)
            </summary>
        </member>
        <member name="F:CSCore.DMO.MediaType.CbFormat">
            <summary>
                Size of the format block of the media type.
            </summary>
        </member>
        <member name="F:CSCore.DMO.MediaType.PtrFormat">
            <summary>
                Pointer to the format structure. The structure type is specified by the formattype
                member. The format structure must be present, unless formattype is GUID_NULL or
                FORMAT_None.
            </summary>
        </member>
        <member name="M:CSCore.DMO.MediaType.Free">
            <summary>
                Frees the allocated members of a media type structure.
            </summary>
        </member>
        <member name="M:CSCore.DMO.WMResamplerProps.SetHalfFilterLength(System.Int32)">
            <summary>
                Specifies the quality of the output.
            </summary>
            <param name="quality">
                Specifies the quality of the output. The valid range is 1 to 60,
                inclusive.
            </param>
        </member>
        <member name="M:CSCore.DMO.WMResamplerProps.SetUserChannelMtx(System.Single[])">
            <summary>
                See http://msdn.microsoft.com/en-us/library/windows/desktop/ff819252(v=vs.85).aspx
            </summary>
        </member>
        <member name="M:CSCore.DMO.WMResamplerProps.SetHalfFilterLengthNative(System.Int32)">
            <summary>
                Specifies the quality of the output.
            </summary>
            <param name="quality">
                Specifies the quality of the output. The valid range is 1 to 60,
                inclusive.
            </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.DMO.WMResamplerProps.SetUserChannelMtxNative(System.Single[])">
            <summary>
                http://msdn.microsoft.com/en-us/library/windows/desktop/ff819252(v=vs.85).aspx
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="T:CSCore.DSP.DmoResampler">
            <summary>
                Resampler based on the DmoResampler. Supported since Windows XP.
            </summary>
        </member>
        <member name="M:CSCore.DSP.DmoResampler.#ctor(CSCore.IWaveSource,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.DSP.DmoResampler"/> class.
            </summary>
            <param name="source"><see cref="T:CSCore.IWaveSource"/> which has to get resampled.</param>
            <param name="destSampleRate">The new output samplerate specified in Hz.</param>
        </member>
        <member name="M:CSCore.DSP.DmoResampler.#ctor(CSCore.IWaveSource,CSCore.WaveFormat)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.DSP.DmoResampler"/> class.
            </summary>
            <param name="source"><see cref="T:CSCore.IWaveSource"/> which has to get resampled.</param>
            <param name="outputFormat">Waveformat, which specifies the new format. Note, that by far not all formats are supported.</param>
        </member>
        <member name="M:CSCore.DSP.DmoResampler.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads a resampled sequence of bytes from the <see cref="T:CSCore.DSP.DmoResampler"/> and advances the position within the
                stream by the
                number of bytes read.
            </summary>
            <param name="buffer">
                An array of bytes. When this method returns, the <paramref name="buffer"/> contains the specified
                byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> +
                <paramref name="count"/> - 1) replaced by the bytes read from the current source.
            </param>
            <param name="offset">
                The zero-based byte offset in the <paramref name="buffer"/> at which to begin storing the data
                read from the current stream.
            </param>
            <param name="count">The maximum number of bytes to read from the current source.</param>
            <returns>The total number of bytes read into the buffer.</returns>
        </member>
        <member name="M:CSCore.DSP.DmoResampler.DisposeResamplerOnly">
            <summary>
                Disposes the allocated resources of the resampler but does not dispose the underlying source.
            </summary>
        </member>
        <member name="M:CSCore.DSP.DmoResampler.Dispose(System.Boolean)">
            <summary>
                Disposes the <see cref="T:CSCore.DSP.DmoResampler"/>.
            </summary>
            <param name="disposing">
                True to release both managed and unmanaged resources; false to release only unmanaged
                resources.
            </param>
        </member>
        <member name="P:CSCore.DSP.DmoResampler.WaveFormat">
            <summary>
                Gets the new output format.
            </summary>
        </member>
        <member name="P:CSCore.DSP.DmoResampler.Position">
            <summary>
                Gets or sets the position of the source.
            </summary>
        </member>
        <member name="P:CSCore.DSP.DmoResampler.Length">
            <summary>
                Gets the length of the source.
            </summary>
        </member>
        <member name="P:CSCore.DSP.DmoResampler.Quality">
            <summary>
                Specifies the quality of the output. The valid range is from 1 to 60.
            </summary>
            <value>Specifies the quality of the resampled output. The valid range is: <code>1 &gt;= value &lt;= 60</code>.</value>
        </member>
        <member name="T:CSCore.DSP.ChannelMatrix">
            <summary>
                Defines a channel conversion matrix. For more details see
                <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ff819070(v=vs.85).aspx" />.
            </summary>
        </member>
        <member name="F:CSCore.DSP.ChannelMatrix.StereoToFiveDotOneSurroundWithRear">
            <summary>
                Defines a stereo to 5.1 surround (with rear) channel conversion matrix.
            </summary>
        </member>
        <member name="F:CSCore.DSP.ChannelMatrix.StereoToFiveDotOneSurroundWithSide">
            <summary>
                Defines a stereo to 5.1 surround (with side) channel conversion matrix.
            </summary>
        </member>
        <member name="F:CSCore.DSP.ChannelMatrix.StereoToSevenDotOneSurround">
            <summary>
                Defines a stereo to 7.1 surround channel conversion matrix.
            </summary>
        </member>
        <member name="F:CSCore.DSP.ChannelMatrix.StereoToMonoMatrix">
            <summary>
                Defines a stereo to mono conversion matrix.
            </summary>
        </member>
        <member name="F:CSCore.DSP.ChannelMatrix.MonoToStereoMatrix">
            <summary>
                Defines a mono to stereo conversion matrix.
            </summary>
        </member>
        <member name="M:CSCore.DSP.ChannelMatrix.#ctor(CSCore.ChannelMask,CSCore.ChannelMask)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.DSP.ChannelMatrix"/> class.
            </summary>
            <param name="inputMask">The <see cref="T:CSCore.ChannelMask"/> of the input signal.</param>
            <param name="outputMask">The <see cref="T:CSCore.ChannelMask"/> of the output signal.</param>
            <exception cref="T:System.ArgumentException">Invalid <paramref name="inputMask"/>/<paramref name="outputMask"/>.</exception>
        </member>
        <member name="M:CSCore.DSP.ChannelMatrix.SetMatrix(System.Single[0:,0:])">
            <summary>
            Sets the channel conversion matrix. 
            The x-axis of the <paramref name="matrix"/> specifies the output channels. The y-axis 
            of the <paramref name="matrix"/> specifies the input channels. 
            </summary>
            <param name="matrix">Channel conversion matrix to use.</param>
        </member>
        <member name="M:CSCore.DSP.ChannelMatrix.GetOneDimensionalMatrix">
            <summary>
            Returns a one dimensional array which contains the channel conversion matrix coefficients.
            </summary>
            <returns>A one dimensional array which contains the channel conversion matrix coefficients</returns>
            <remarks>This method is primarily used in combination with the <see cref="M:CSCore.DMO.WMResamplerProps.SetUserChannelMtx(System.Single[])"/> method.</remarks>
        </member>
        <member name="P:CSCore.DSP.ChannelMatrix.InputMask">
            <summary>
                Gets the <see cref="T:CSCore.ChannelMask"/> of the input signal.
            </summary>
        </member>
        <member name="P:CSCore.DSP.ChannelMatrix.OutputMask">
            <summary>
                Gets the <see cref="T:CSCore.ChannelMask"/> of the output signal.
            </summary>
        </member>
        <member name="P:CSCore.DSP.ChannelMatrix.Height">
            <summary>
            Gets the number of rows of the channel conversion matrix.
            </summary>
        </member>
        <member name="P:CSCore.DSP.ChannelMatrix.Width">
            <summary>
            Gets the number of columns of the channel conversion matrix.
            </summary>
        </member>
        <member name="P:CSCore.DSP.ChannelMatrix.InputChannelCount">
            <summary>
                Gets the input signals number of channels.
            </summary>
            <remarks>The <see cref="P:CSCore.DSP.ChannelMatrix.InputChannelCount"/> property always returns the same value as the <see cref="P:CSCore.DSP.ChannelMatrix.Height"/> property.</remarks>
        </member>
        <member name="P:CSCore.DSP.ChannelMatrix.OutputChannelCount">
            <summary>
                Gets the output signals number of channels.
            </summary>
            <remarks>The <see cref="P:CSCore.DSP.ChannelMatrix.OutputChannelCount"/> property always returns the same value as the <see cref="P:CSCore.DSP.ChannelMatrix.Width"/> property.</remarks>
        </member>
        <member name="P:CSCore.DSP.ChannelMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets a <see cref="T:CSCore.DSP.ChannelMatrixElement"/> of the <see cref="T:CSCore.DSP.ChannelMatrix"/>.
            </summary>
            <param name="input">The zero-based index of the input channel.</param>
            <param name="output">The zero-based index of the output channel.</param>
            <returns>The <see cref="T:CSCore.DSP.ChannelMatrixElement"/> of the <see cref="T:CSCore.DSP.ChannelMatrix"/> at the specified position.</returns>
        </member>
        <member name="T:CSCore.DSP.DmoChannelResampler">
            <summary>
                Resampler based on the <see cref="T:CSCore.DSP.DmoResampler"/> which can change the number of channels based on a
                <see cref="T:CSCore.DSP.ChannelMatrix"/>. Supported since Windows XP.
            </summary>
        </member>
        <member name="M:CSCore.DSP.DmoChannelResampler.#ctor(CSCore.IWaveSource,CSCore.DSP.ChannelMatrix)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.DSP.DmoChannelResampler"/> class.
            </summary>
            <param name="source">Underlying source which has to get resampled.</param>
            <param name="channelMatrix"><see cref="T:CSCore.DSP.ChannelMatrix"/> which defines how to map each channel.</param>
        </member>
        <member name="M:CSCore.DSP.DmoChannelResampler.#ctor(CSCore.IWaveSource,CSCore.DSP.ChannelMatrix,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.DSP.DmoChannelResampler"/> class.
            </summary>
            <param name="source">Underlying source which has to get resampled.</param>
            <param name="channelMatrix"><see cref="T:CSCore.DSP.ChannelMatrix"/> which defines how to map each channel.</param>
            <param name="destSampleRate">The destination sample rate.</param>
        </member>
        <member name="T:CSCore.CoreAudioAPI.MMDevice">
            <summary>
            Encapsulates the generic features of a multimedia device resource. 
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.MMDevice.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.CoreAudioAPI.MMDevice"/> class. 
            </summary>
            <param name="ptr">Native pointer.</param>
            <remarks>Use the <see cref="T:CSCore.CoreAudioAPI.MMDeviceEnumerator"/> class to create a new <see cref="T:CSCore.CoreAudioAPI.MMDevice"/> instance.</remarks>
        </member>
        <member name="M:CSCore.CoreAudioAPI.MMDevice.ActivateNative(System.Guid,CSCore.Win32.CLSCTX,System.IntPtr,System.IntPtr@)">
            <summary>
            Creates a COM object with the specified interface.
            </summary>
            <param name="iid">The interface identifier. This parameter is a reference to a GUID that identifies the interface that the caller requests be activated. The caller will use this interface to communicate with the COM object.</param>
            <param name="context">The execution context in which the code that manages the newly created object will run. </param>
            <param name="activationParams">Use <see cref="F:System.IntPtr.Zero"/> as the default value. See http://msdn.microsoft.com/en-us/library/windows/desktop/dd371405%28v=vs.85%29.aspx for more details.</param>
            <param name="pinterface">Pointer to a pointer variable into which the method writes the address of the interface specified by parameter <paramref name="iid"/>.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.MMDevice.Activate(System.Guid,CSCore.Win32.CLSCTX,System.IntPtr)">
            <summary>
            Creates a COM object with the specified interface.
            </summary>
            <param name="iid">The interface identifier. This parameter is a reference to a GUID that identifies the interface that the caller requests be activated. The caller will use this interface to communicate with the COM object.</param>
            <param name="context">The execution context in which the code that manages the newly created object will run. </param>
            <param name="activationParams">Use <see cref="F:System.IntPtr.Zero"/> as the default value. See http://msdn.microsoft.com/en-us/library/windows/desktop/dd371405%28v=vs.85%29.aspx for more details.</param>
            <returns>Pointer to a pointer variable into which the method writes the address of the interface specified by parameter <paramref name="iid"/>.</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.MMDevice.OpenPropertyStore(CSCore.CoreAudioAPI.StorageAccess)">
            <summary>
            Retrieves an interface to the device's property store.
            </summary>
            <param name="storageAccess">The storage-access mode. This parameter specifies whether to open the property store in read mode, write mode, or read/write mode.</param>
            <returns><see cref="P:CSCore.CoreAudioAPI.MMDevice.PropertyStore"/> for the <see cref="T:CSCore.CoreAudioAPI.MMDevice"/>.</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.MMDevice.OpenPropertyStoreNative(CSCore.CoreAudioAPI.StorageAccess,System.IntPtr@)">
            <summary>
            Retrieves an interface to the device's property store.
            </summary>
            <param name="storageAccess">The storage-access mode. This parameter specifies whether to open the property store in read mode, write mode, or read/write mode.</param>
            <param name="propertyStore">Pointer to a pointer variable into which the method writes the address of the IPropertyStore interface of the device's property store.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.MMDevice.GetIdNative(System.String@)">
            <summary>
            Retrieves an endpoint ID string that identifies the audio endpoint device.
            </summary>
            <param name="deviceid">The variable which will receive the id of the device.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.MMDevice.GetStateNative(CSCore.CoreAudioAPI.DeviceState@)">
            <summary>
            Retrieves the current device state.
            </summary>
            <param name="state">The variable which will receive the <see cref="T:CSCore.CoreAudioAPI.DeviceState"/> of the device.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.MMDevice.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:CSCore.CoreAudioAPI.MMDevice"/> and its default property store (see <see cref="P:CSCore.CoreAudioAPI.MMDevice.PropertyStore"/> property).
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.MMDevice.ToString">
            <summary>
            Returns the <see cref="P:CSCore.CoreAudioAPI.MMDevice.FriendlyName"/> of the <see cref="T:CSCore.CoreAudioAPI.MMDevice"/>.
            </summary>
            <returns>The <see cref="P:CSCore.CoreAudioAPI.MMDevice.FriendlyName"/>.</returns>
        </member>
        <member name="P:CSCore.CoreAudioAPI.MMDevice.PropertyStore">
            <summary>
            Warning: This PropertyStore is just Readable. Use the OpenPropertyStore-Method to get
                     writeable PropertyStore.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.MMDevice.DeviceID">
            <summary>
            Gets the device id. Fore details about device ids see: <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd370837(v=vs.85).aspx"/>.
            </summary>
        </member>
        <member name="P:CSCore.CoreAudioAPI.MMDevice.FriendlyName">
            <summary>
            Gets the friendly name of the device.
            </summary>
            <remarks>This value is stored in the <see cref="P:CSCore.CoreAudioAPI.MMDevice.PropertyStore"/>.</remarks>
        </member>
        <member name="P:CSCore.CoreAudioAPI.MMDevice.DeviceState">
            <summary>
            Gets the device state of the device.
            </summary>
        </member>
        <member name="T:CSCore.Win32.PropertyStore">
            <summary>
            See "Functiondiscoverykeys_devpkey.h" for different keys like FriendlyName, DeviceDesc,...
            </summary>
        </member>
        <member name="T:CSCore.MediaFoundation.MediaFoundationException">
            <summary>
            Mediafoundation COM Exception
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationException.Try(System.Int32,System.String,System.String)">
            <summary>
            Throws an <see cref="T:CSCore.MediaFoundation.MediaFoundationException"/> if the <paramref name="result"/> is not <see cref="F:CSCore.Win32.HResult.S_OK"/>.
            </summary>
            <param name="result">Errorcode.</param>
            <param name="interfaceName">Name of the interface which contains the COM-function which returned the specified <paramref name="result"/>.</param>
            <param name="member">Name of the COM-function which returned the specified <paramref name="result"/>.</param>
        </member>
        <member name="M:CSCore.MediaFoundation.MediaFoundationException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.MediaFoundation.MediaFoundationException"/> class.
            </summary>
            <param name="result">Errorcode.</param>
            <param name="interfaceName">Name of the interface which contains the COM-function which returned the specified <paramref name="result"/>.</param>
            <param name="member">Name of the COM-function which returned the specified <paramref name="result"/>.</param>
        </member>
        <member name="T:CSCore.MediaFoundation.MediaTypeEqualFlags">
            <summary>
                Indicates the degree of similarity between the two media types.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaTypeEqualFlags.None">
            <summary>
                None
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaTypeEqualFlags.MajorTypes">
            <summary>
                The major types are the same.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaTypeEqualFlags.FormatTypes">
            <summary>
                The subtypes are the same, or neither media type has a subtype.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaTypeEqualFlags.Data">
            <summary>
                The attributes in one of the media types are a subset of the attributes in the other, and the values of these
                attributes match, excluding the value of the MF_MT_USER_DATA, MF_MT_FRAME_RATE_RANGE_MIN, and
                MF_MT_FRAME_RATE_RANGE_MAX attributes.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MediaTypeEqualFlags.UserData">
            <summary>
                The user data is identical, or neither media type contains user data. User data is specified by the MF_MT_USER_DATA
                attribute.
            </summary>
        </member>
        <member name="T:CSCore.MediaFoundation.MFMediaType">
            <summary>
            Represents a description of a media format. 
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFMediaType.CreateEmpty">
            <summary>
            Creates an empty <see cref="T:CSCore.MediaFoundation.MFMediaType"/>.
            </summary>
            <returns>Returns an empty <see cref="T:CSCore.MediaFoundation.MFMediaType"/>.</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFMediaType.FromWaveFormat(CSCore.WaveFormat)">
            <summary>
            Creates a new <see cref="T:CSCore.MediaFoundation.MFMediaType"/> based on a specified <paramref name="waveFormat"/>.
            </summary>
            <param name="waveFormat"><see cref="T:CSCore.WaveFormat"/> which should be "converted" to a <see cref="T:CSCore.MediaFoundation.MFMediaType"/>.</param>
            <returns>Returns a new <see cref="T:CSCore.MediaFoundation.MFMediaType"/>.</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFMediaType.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.MediaFoundation.MFMediaType"/> class.
            </summary>
            <param name="ptr">The native pointer.</param>
        </member>
        <member name="M:CSCore.MediaFoundation.MFMediaType.GetMajorType(System.Guid@)">
            <summary>
            Gets the major type of the format.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFMediaType.GetMajorType">
            <summary>
            Gets the major type of the format.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFMediaType.IsCompressedFormat(CSCore.Win32.NativeBool@)">
            <summary>
            Queries whether the media type is a temporally compressed format. Temporal compression
            uses information from previously decoded samples when decompressing the current sample.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFMediaType.IsCompressedFormat">
            <summary>
            Queries whether the media type is a temporally compressed format. Temporal compression
            uses information from previously decoded samples when decompressing the current sample.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFMediaType.IsEqual(CSCore.MediaFoundation.MFMediaType,CSCore.MediaFoundation.MediaTypeEqualFlags@)">
            <summary>
            Compares two media types and determines whether they are identical. If they are not
            identical, the method indicates how the two formats differ.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFMediaType.IsEqual(CSCore.MediaFoundation.MFMediaType)">
            <summary>
            Compares two media types and determines whether they are identical. If they are not
            identical, the method indicates how the two formats differ.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFMediaType.GetRepresentation(System.Guid,System.IntPtr@)">
            <summary>
            Retrieves an alternative representation of the media type. Currently only the DirectShow
            AM_MEDIA_TYPE structure is supported.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFMediaType.GetRepresentation(System.Guid)">
            <summary>
            Retrieves an alternative representation of the media type. Currently only the DirectShow
            AM_MEDIA_TYPE structure is supported.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFMediaType.FreeRepresentationNative(System.Guid,System.IntPtr)">
            <summary>
            Frees memory that was allocated by the IMFMediaType::GetRepresentation method.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFMediaType.FreeRepresentation(System.Guid,System.IntPtr)">
            <summary>
            Frees memory that was allocated by the IMFMediaType::GetRepresentation method.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFMediaType.ToWaveFormat(CSCore.MediaFoundation.MFWaveFormatExConvertFlags)">
            <summary>
            Converts the <see cref="T:CSCore.MediaFoundation.MFMediaType"/> to a <see cref="T:CSCore.WaveFormat"/>.
            </summary>
            <param name="flags">Contains a flag from the <see cref="T:CSCore.MediaFoundation.MFWaveFormatExConvertFlags"/> enumeration.</param>
            <returns>The <see cref="T:CSCore.WaveFormat"/> which got created based on the <see cref="T:CSCore.MediaFoundation.MFMediaType"/>.</returns>
        </member>
        <member name="P:CSCore.MediaFoundation.MFMediaType.Channels">
            <summary>
            Number of channels
            </summary>
        </member>
        <member name="P:CSCore.MediaFoundation.MFMediaType.BitsPerSample">
            <summary>
            Bits per sample
            </summary>
        </member>
        <member name="P:CSCore.MediaFoundation.MFMediaType.SampleRate">
            <summary>
            Samples per second(for one channel each)
            </summary>
        </member>
        <member name="P:CSCore.MediaFoundation.MFMediaType.AverageBytesPerSecond">
            <summary>
            AVG bytes per second
            </summary>
        </member>
        <member name="P:CSCore.MediaFoundation.MFMediaType.SubType">
            <summary>
            Audiosubtype
            </summary>
        </member>
        <member name="P:CSCore.MediaFoundation.MFMediaType.MajorType">
            <summary>
            Majortype
            </summary>
        </member>
        <member name="P:CSCore.MediaFoundation.MFMediaType.IsCompressed">
            <summary>
            Queries whether the media type is a temporally compressed format. Temporal compression
            uses information from previously decoded samples when decompressing the current sample.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSample.GetSampleFlagsNative(CSCore.MediaFoundation.MFSampleFlags@)">
            <summary>
            Currently no flags are defined. Instead, metadata for samples is defined using
            attributes. To get attibutes from a sample, use the IMFAttributes interface, which
            IMFSample inherits.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSample.GetSampleFlags">
            <summary>
            Currently no flags are defined. Instead, metadata for samples is defined using
            attributes. To get attibutes from a sample, use the IMFAttributes interface, which
            IMFSample inherits.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSample.SetSampleFlagsNative(CSCore.MediaFoundation.MFSampleFlags)">
            <summary>
            Currently no flags are defined. Instead, metadata for samples is defined using
            attributes. To set attibutes on a sample, use the IMFAttributes interface, which
            IMFSample inherits.
            </summary>
            <param name="flags">must be zero</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSample.SetSampleFlags(CSCore.MediaFoundation.MFSampleFlags)">
            <summary>
            Currently no flags are defined. Instead, metadata for samples is defined using
            attributes. To set attibutes on a sample, use the IMFAttributes interface, which
            IMFSample inherits.
            </summary>
            <param name="flags">must be zero</param>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSample.GetSampleTimeNative(System.Int64@)">
            <summary>
            Retrieves the presentation time of the sample.
            </summary>
            <param name="hnsSampleTime">Presentation time, in 100-nanosecond units.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSample.GetSampleTime">
            <summary>
            Retrieves the presentation time of the sample.
            </summary>
            <returns>Presentation time, in 100-nanosecond units.</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.GetStreamSelectionNative(System.Int32,CSCore.Win32.NativeBool@)">
            <summary>
            Queries whether a stream is selected.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.GetStreamSelection(System.Int32)">
            <summary>
            Queries whether a stream is selected. 
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.SetStreamSelectionNative(System.Int32,CSCore.Win32.NativeBool)">
            <summary>
            Selects or deselects one or more streams.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.SetStreamSelection(System.Int32,CSCore.Win32.NativeBool)">
            <summary>
            Selects or deselects one or more streams.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.GetNativeMediaTypeNative(System.Int32,System.Int32,CSCore.MediaFoundation.MFMediaType@)">
            <summary>
            Gets a format that is supported natively by the media source.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.GetNativeMediaType(System.Int32,System.Int32)">
            <summary>
            Gets a format that is supported natively by the media source.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.GetCurrentMediaType(System.Int32,CSCore.MediaFoundation.MFMediaType@)">
            <summary>
            Gets the current media type for a stream.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.GetCurrentMediaType(System.Int32)">
            <summary>
            Gets the current media type for a stream.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.SetCurrentMediaTypeNative(System.Int32,System.IntPtr,CSCore.MediaFoundation.MFMediaType)">
            <summary>
            This media type defines that format that the Source Reader produces as output. It can
            differ from the native format provided by the media source. See Remarks for more
            information.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.SetCurrentMediaType(System.Int32,CSCore.MediaFoundation.MFMediaType)">
            <summary>
            This media type defines that format that the Source Reader produces as output. It can
            differ from the native format provided by the media source. See Remarks for more
            information.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.SetCurrentPositionNative(System.Guid,CSCore.Win32.PropertyVariant)">
            <summary>
            Seeks to a new position in the media source.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.SetCurrentPosition(System.Guid,CSCore.Win32.PropertyVariant)">
            <summary>
            Seeks to a new position in the media source.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.ReadSampleNative(System.Int32,System.Int32,System.Int32@,CSCore.MediaFoundation.MFSourceReaderFlag@,System.Int64@,CSCore.MediaFoundation.MFSample@)">
            <summary>
            Reads the next sample from the media source.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.ReadSample(System.Int32,System.Int32,System.Int32@,CSCore.MediaFoundation.MFSourceReaderFlag@,System.Int64@)">
            <summary>
            Reads the next sample from the media source.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.FlushNative(System.Int32)">
            <summary>
            Flushes one or more streams.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.Flush(System.Int32)">
            <summary>
            Flushes one or more streams.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.GetServiceForStreamNative(System.Int32,System.Guid,System.Guid,System.IntPtr@)">
            <summary>
            Queries the underlying media source or decoder for an interface.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.GetServiceForStream(System.Int32,System.Guid,System.Guid)">
            <summary>
            Queries the underlying media source or decoder for an interface.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.GetPresentationAttributeNative(System.Int32,System.Guid,CSCore.Win32.PropertyVariant@)">
            <summary>
            Gets an attribute from the underlying media source.
            </summary>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.MediaFoundation.MFSourceReader.GetPresentationAttribute(System.Int32,System.Guid)">
            <summary>
            Gets an attribute from the underlying media source.
            </summary>
        </member>
        <member name="T:CSCore.Streams.BlockReadEventArgs`1">
            <summary>
            Provides data for the <see cref="E:CSCore.Streams.NotificationSource.BlockRead"/> event.
            </summary>
            <typeparam name="T">Type of the <see cref="P:CSCore.Streams.BlockReadEventArgs`1.Data"/> array.</typeparam>
        </member>
        <member name="M:CSCore.Streams.BlockReadEventArgs`1.#ctor(`0[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Streams.BlockReadEventArgs`1"/> class.
            </summary>
            <param name="data">The read data.</param>
            <param name="length">The number of read elements.</param>
        </member>
        <member name="P:CSCore.Streams.BlockReadEventArgs`1.Length">
            <summary>
            Gets the number of read elements.
            </summary>
        </member>
        <member name="P:CSCore.Streams.BlockReadEventArgs`1.Data">
            <summary>
            Gets the array which contains the read data.
            </summary>
        </member>
        <member name="P:CSCore.Streams.NotificationSource.BlockCount">
            <summary>
            Interval in blocks. One block equals on sample for each channel -> (channels *
            bitspersample) bits
            </summary>
        </member>
        <member name="P:CSCore.Streams.NotificationSource.Interval">
            <summary>
            Interval in milliseconds.
            </summary>
        </member>
        <member name="E:CSCore.Streams.SimpleNotificationSource.DataRead">
            <summary>
            Raised after every time the Read method gets called.
            </summary>
        </member>
        <member name="E:CSCore.Streams.SimpleNotificationSource.BlockRead">
            <summary>
            Raised after the specific Interval
            </summary>
        </member>
        <member name="P:CSCore.Streams.SimpleNotificationSource.BlockCount">
            <summary>
            Interval in blocks. One block equals on sample for each channel -> (channels *
            bitspersample) bits
            </summary>
        </member>
        <member name="P:CSCore.Streams.SimpleNotificationSource.Interval">
            <summary>
            Interval in milliseconds.
            </summary>
        </member>
        <member name="T:CSCore.Streams.VolumeSource">
            <summary>
            Provides the ability to adjust the volume of an audio stream.
            </summary>
        </member>
        <member name="M:CSCore.Streams.VolumeSource.#ctor(CSCore.IWaveStream)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Streams.VolumeSource"/> class.
            </summary>
            <param name="source">The underlying base source.</param>
        </member>
        <member name="M:CSCore.Streams.VolumeSource.Read(System.Single[],System.Int32,System.Int32)">
            <summary>
                Reads a sequence of samples from the <see cref="T:CSCore.Streams.VolumeSource"/> and advances the position within the stream by
                the number of samples read. After reading the samples, the volume of the read samples gets manipulated.
            </summary>
            <param name="buffer">
                An array of floats. When this method returns, the <paramref name="buffer"/> contains the specified
                float array with the values between <paramref name="offset"/> and (<paramref name="offset"/> +
                <paramref name="count"/> - 1) replaced by the floats read from the current source.
            </param>
            <param name="offset">
                The zero-based offset in the <paramref name="buffer"/> at which to begin storing the data
                read from the current stream.
            </param>
            <param name="count">The maximum number of samples to read from the current source.</param>
            <returns>The total number of samples read into the buffer.</returns>
        </member>
        <member name="P:CSCore.Streams.VolumeSource.Volume">
            <summary>
            Gets or sets the volume specified by a value in the range from 0.0 to 1.0.
            </summary>
        </member>
        <member name="T:CSCore.Streams.SoundInSource">
            <summary>
            Represents an implementation of the <see cref="T:CSCore.IWaveSource"/> interface which provides the data provided by a specified <see cref="T:CSCore.SoundIn.ISoundIn"/> object.
            </summary>
        </member>
        <member name="M:CSCore.Streams.SoundInSource.#ctor(CSCore.SoundIn.ISoundIn)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Streams.SoundInSource"/> class with a default bufferSize of 5 seconds.
            </summary>
            <param name="soundIn">The soundIn which provides recorded data.</param>
            <remarks>
            Note that soundIn has to be already initialized.
            Note that old data ("old" gets specified by the bufferSize) gets overridden. 
            For example, if the bufferSize is about 5 seconds big, data which got recorded 6 seconds ago, won't be available anymore.
            </remarks>
        </member>
        <member name="M:CSCore.Streams.SoundInSource.#ctor(CSCore.SoundIn.ISoundIn,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.Streams.SoundInSource"/> class.
            </summary>
            <param name="soundIn">The soundIn which provides recorded data.</param>
            <param name="bufferSize">Size of the internal buffer in bytes.</param>
            <remarks>
            Note that soundIn has to be already initialized.
            Note that old data ("old" gets specified by the bufferSize) gets overridden. 
            For example, if the bufferSize is about 5 seconds big, data which got recorded 6 seconds ago, won't be available anymore.
            </remarks>
        </member>
        <member name="M:CSCore.Streams.SoundInSource.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads a sequence of bytes from the internal stream which holds recorded data and advances the position within the stream by the
                number of bytes read.
            </summary>
            <param name="buffer">
                An array of bytes. When this method returns, the <paramref name="buffer" /> contains the specified
                byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> +
                <paramref name="count" /> - 1) replaced by the bytes read from the current source.
            </param>
            <param name="offset">
                The zero-based byte offset in the <paramref name="buffer" /> at which to begin storing the data
                read from the current stream.
            </param>
            <param name="count">The maximum number of bytes to read from the current source.</param>
            <returns>The total number of bytes read into the buffer.</returns>
        </member>
        <member name="M:CSCore.Streams.SoundInSource.Dispose">
            <summary>
            Disposes the <see cref="T:CSCore.Streams.SoundInSource"/>.
            </summary>
        </member>
        <member name="M:CSCore.Streams.SoundInSource.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:CSCore.Streams.SoundInSource"/>.
            </summary>
            <param name="disposing">Not used.</param>
        </member>
        <member name="M:CSCore.Streams.SoundInSource.Finalize">
            <summary>
            Destructor of the <see cref="T:CSCore.Streams.SoundInSource"/> class which calls the <see cref="M:CSCore.Streams.SoundInSource.Dispose(System.Boolean)"/> method.
            </summary>
        </member>
        <member name="E:CSCore.Streams.SoundInSource.DataAvailable">
            <summary>
            Occurs when new data is available.
            </summary>
        </member>
        <member name="P:CSCore.Streams.SoundInSource.SoundIn">
            <summary>
            Gets the underlying <see cref="T:CSCore.SoundIn.ISoundIn"/> instance.
            </summary>
        </member>
        <member name="P:CSCore.Streams.SoundInSource.WaveFormat">
            <summary>
                Gets the <see cref="P:CSCore.IWaveStream.WaveFormat"/> of the recorded data.
            </summary>
        </member>
        <member name="P:CSCore.Streams.SoundInSource.Position">
            <summary>
                Gets or sets the current position in bytes. This property is currently not supported. 
            </summary>
        </member>
        <member name="P:CSCore.Streams.SoundInSource.Length">
            <summary>
            Gets the length in bytes. This property is currently not supported.
            </summary>
        </member>
        <member name="P:CSCore.Streams.SoundInSource.FillWithZeros">
            <summary>
            Gets or sets a value which indicates whether the <see cref="M:CSCore.Streams.SoundInSource.Read(System.Byte[],System.Int32,System.Int32)"/> method should always provide the requested amount of data.
            For the case that the internal buffer can't offer the requested amount of data, the rest of the requested bytes will be filled up with zeros.
            </summary>
        </member>
        <member name="P:CSCore.Tags.ID3.Frames.PictureFrame.Image">
            <summary>
            WARNING: If MimeType equals "-->" the picture will be downloaded from the web.
            Use GetURL() the get the url to the picture. If not, data, contained by the frame will
            be used.
            </summary>
        </member>
        <member name="P:CSCore.Tags.ID3.Frames.Popularimeter.Rating">
            <summary>
            Range from 1(worst) to 255(best). Zero -> Rating disabled.
            </summary>
        </member>
        <member name="P:CSCore.Tags.ID3.Frames.Popularimeter.PlayedCounter">
            <summary>
            - 1 -> ommit the counter. Default length is 4 byte. If 4 byte is not enough to hold the
              number, a byte will be added(up to 8 bytes total).
            </summary>
        </member>
        <member name="M:CSCore.Tags.ID3.Frames.TimestampTextFrame.GetFormatString(System.Int32)">
            <summary>
            Gets the formatstring of the timestamp
            </summary>
            <param name="length">length of the string which has to be parsed</param>
            <returns></returns>
        </member>
        <member name="T:CSCore.Win32.NativeBool">
            <summary>
            Represents a native 4 byte boolean value.
            </summary>
        </member>
        <member name="T:CSCore.Win32.HResult">
            <summary>
            Defines common HRESULT error codes.
            </summary>
        </member>
        <member name="T:CSCore.WaveFormatExtensible">
            <summary>
                Defines the format of waveform-audio data for formats having more than two channels or higher sample resolutions
                than allowed by <see cref="T:CSCore.WaveFormat"/>.
                Can be used to define any format that can be defined by <see cref="T:CSCore.WaveFormat"/>.
                For more information see <see href="http://msdn.microsoft.com/en-us/library/windows/hardware/gg463006.aspx"/> and
                <see href="http://msdn.microsoft.com/en-us/library/windows/hardware/ff536383(v=vs.85).aspx"/>.
            </summary>
        </member>
        <member name="M:CSCore.WaveFormatExtensible.SubTypeFromWaveFormat(CSCore.WaveFormat)">
            <summary>
                Returns the SubType-Guid of a <paramref name="waveFormat"/>. If the specified <paramref name="waveFormat"/> does
                not contain a SubType-Guid, the <see cref="P:CSCore.WaveFormat.WaveFormatTag"/> gets converted to the equal SubType-Guid
                using the <see cref="M:CSCore.AudioSubTypes.MediaTypeFromEncoding(CSCore.AudioEncoding)"/> method.
            </summary>
            <param name="waveFormat"><see cref="T:CSCore.WaveFormat"/> which gets used to determine the SubType-Guid.</param>
            <returns>SubType-Guid of the specified <paramref name="waveFormat"/>.</returns>
        </member>
        <member name="M:CSCore.WaveFormatExtensible.#ctor(System.Int32,System.Int32,System.Int32,System.Guid)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.WaveFormatExtensible"/> class.
            </summary>
            <param name="sampleRate">
                Samplerate of the waveform-audio. This value will get applied to the
                <see cref="P:CSCore.WaveFormat.SampleRate"/> property.
            </param>
            <param name="bits">
                Bits per sample of the waveform-audio. This value will get applied to the
                <see cref="P:CSCore.WaveFormat.BitsPerSample"/> property and the <see cref="P:CSCore.WaveFormatExtensible.ValidBitsPerSample"/> property.
            </param>
            <param name="channels">
                Number of channels of the waveform-audio. This value will get applied to the
                <see cref="P:CSCore.WaveFormat.Channels"/> property.
            </param>
            <param name="subFormat">Subformat of the data. This value will get applied to the <see cref="P:CSCore.WaveFormatExtensible.SubFormat"/> property.</param>
        </member>
        <member name="M:CSCore.WaveFormatExtensible.#ctor(System.Int32,System.Int32,System.Int32,System.Guid,CSCore.ChannelMask)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.WaveFormatExtensible"/> class.
            </summary>
            <param name="sampleRate">
                Samplerate of the waveform-audio. This value will get applied to the
                <see cref="P:CSCore.WaveFormat.SampleRate"/> property.
            </param>
            <param name="bits">
                Bits per sample of the waveform-audio. This value will get applied to the
                <see cref="P:CSCore.WaveFormat.BitsPerSample"/> property and the <see cref="P:CSCore.WaveFormatExtensible.ValidBitsPerSample"/> property.
            </param>
            <param name="channels">
                Number of channels of the waveform-audio. This value will get applied to the
                <see cref="P:CSCore.WaveFormat.Channels"/> property.
            </param>
            <param name="subFormat">Subformat of the data. This value will get applied to the <see cref="P:CSCore.WaveFormatExtensible.SubFormat"/> property.</param>
            <param name="channelMask">
                Bitmask specifying the assignment of channels in the stream to speaker positions. Thie value
                will get applied to the <see cref="P:CSCore.WaveFormatExtensible.ChannelMask"/> property.
            </param>
        </member>
        <member name="M:CSCore.WaveFormatExtensible.ToWaveFormat">
            <summary>
                Converts the <see cref="T:CSCore.WaveFormatExtensible"/> instance to a raw <see cref="T:CSCore.WaveFormat"/> instance by converting
                the <see cref="P:CSCore.WaveFormatExtensible.SubFormat"/> to the equal <see cref="P:CSCore.WaveFormat.WaveFormatTag"/>.
            </summary>
            <returns>A simple <see cref="T:CSCore.WaveFormat"/> instance.</returns>
        </member>
        <member name="P:CSCore.WaveFormatExtensible.ValidBitsPerSample">
            <summary>
                Gets the number of bits of precision in the signal.
                Usually equal to <see cref="P:CSCore.WaveFormat.BitsPerSample"/>. However, <see cref="P:CSCore.WaveFormat.BitsPerSample"/> is the
                container size and must be a multiple of 8, whereas <see cref="P:CSCore.WaveFormatExtensible.ValidBitsPerSample"/> can be any value not
                exceeding the container size. For example, if the format uses 20-bit samples,
                <see cref="P:CSCore.WaveFormat.BitsPerSample"/> must be at least 24, but <see cref="P:CSCore.WaveFormatExtensible.ValidBitsPerSample"/> is 20.
            </summary>
        </member>
        <member name="P:CSCore.WaveFormatExtensible.SamplesPerBlock">
            <summary>
                Gets the number of samples contained in one compressed block of audio data. This value is used in buffer
                estimation. This value is used with compressed formats that have a fixed number of samples within each block. This
                value can be set to 0 if a variable number of samples is contained in each block of compressed audio data. In this
                case, buffer estimation and position information needs to be obtained in other ways.
            </summary>
        </member>
        <member name="P:CSCore.WaveFormatExtensible.ChannelMask">
            <summary>
                Gets a bitmask specifying the assignment of channels in the stream to speaker positions.
            </summary>
        </member>
        <member name="P:CSCore.WaveFormatExtensible.SubFormat">
            <summary>
                Subformat of the data, such as <see cref="F:CSCore.AudioSubTypes.Pcm"/>. The subformat information is similar to
                that provided by the tag in the <see cref="T:CSCore.WaveFormat"/> class's <see cref="P:CSCore.WaveFormat.WaveFormatTag"/> member.
            </summary>
        </member>
        <member name="T:CSCore.Codecs.WAV.DataChunk">
            <summary>
                Represents the <see cref="T:CSCore.Codecs.WAV.DataChunk"/> of a wave file.
            </summary>
        </member>
        <member name="T:CSCore.Codecs.WAV.WaveFileChunk">
            <summary>
                Represents a wave file chunk. For more information see
                <see href="http://www.sonicspot.com/guide/wavefiles.html#wavefilechunks" />.
            </summary>
        </member>
        <member name="M:CSCore.Codecs.WAV.WaveFileChunk.#ctor(System.IO.Stream)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.Codecs.WAV.WaveFileChunk"/> class.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> which contains the wave file chunk.</param>
        </member>
        <member name="M:CSCore.Codecs.WAV.WaveFileChunk.#ctor(System.IO.BinaryReader)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.Codecs.WAV.WaveFileChunk"/> class.
            </summary>
            <param name="reader"><see cref="T:System.IO.BinaryReader"/> which should be used to read the wave file chunk.</param>
        </member>
        <member name="M:CSCore.Codecs.WAV.WaveFileChunk.FromStream(System.IO.Stream)">
            <summary>
                Parses the <paramref name="stream"/> and returns a <see cref="T:CSCore.Codecs.WAV.WaveFileChunk"/>. Note that the position of the
                stream has to point to a wave file chunk.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> which points to a wave file chunk.</param>
            <returns>
                Instance of the <see cref="T:CSCore.Codecs.WAV.WaveFileChunk"/> class or any derived classes. It the stream does not point to a
                wave file chunk the instance of the <see cref="T:CSCore.Codecs.WAV.WaveFileChunk"/> which gets return will be invalid.
            </returns>
        </member>
        <member name="P:CSCore.Codecs.WAV.WaveFileChunk.ChunkID">
            <summary>
                Gets the unique ID of the Chunk. Each type of chunk has its own id.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.WAV.WaveFileChunk.ChunkDataSize">
            <summary>
                Gets the data size of the chunk.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.WAV.DataChunk.DataChunkID">
            <summary>
                Chunk ID of the <see cref="T:CSCore.Codecs.WAV.DataChunk"/>.
            </summary>
        </member>
        <member name="M:CSCore.Codecs.WAV.DataChunk.#ctor(System.IO.Stream)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.Codecs.WAV.DataChunk"/> class.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> which contains the data chunk.</param>
        </member>
        <member name="M:CSCore.Codecs.WAV.DataChunk.#ctor(System.IO.BinaryReader)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.Codecs.WAV.DataChunk"/> class.
            </summary>
            <param name="reader"><see cref="T:System.IO.BinaryReader"/> which should be used to read the data chunk.</param>
        </member>
        <member name="T:CSCore.Codecs.WAV.FmtChunk">
            <summary>
                Represents the <see cref="T:CSCore.Codecs.WAV.FmtChunk"/> of a wave file.
            </summary>
        </member>
        <member name="F:CSCore.Codecs.WAV.FmtChunk.FmtChunkID">
            <summary>
                Chunk ID of the <see cref="T:CSCore.Codecs.WAV.FmtChunk"/>.
            </summary>
        </member>
        <member name="M:CSCore.Codecs.WAV.FmtChunk.#ctor(System.IO.Stream)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.Codecs.WAV.FmtChunk"/> class.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> which contains the fmt chunk.</param>
        </member>
        <member name="M:CSCore.Codecs.WAV.FmtChunk.#ctor(System.IO.BinaryReader)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.Codecs.WAV.FmtChunk"/> class.
            </summary>
            <param name="reader"><see cref="T:System.IO.BinaryReader"/> which should be used to read the fmt chunk.</param>
        </member>
        <member name="P:CSCore.Codecs.WAV.FmtChunk.WaveFormat">
            <summary>
                Gets the <see cref="P:CSCore.Codecs.WAV.FmtChunk.WaveFormat"/> specified by the <see cref="T:CSCore.Codecs.WAV.FmtChunk"/>.
            </summary>
        </member>
        <member name="T:CSCore.Codecs.WAV.WaveFileReader">
            <summary>
                Provides a decoder for reading wave files.
            </summary>
        </member>
        <member name="M:CSCore.Codecs.WAV.WaveFileReader.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.Codecs.WAV.WaveFileReader"/> class.
            </summary>
            <param name="fileName">Filename which points to a wave file.</param>
        </member>
        <member name="M:CSCore.Codecs.WAV.WaveFileReader.#ctor(System.IO.Stream)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.Codecs.WAV.WaveFileReader"/> class.
            </summary>
            <param name="stream">Stream which contains wave file data.</param>
        </member>
        <member name="M:CSCore.Codecs.WAV.WaveFileReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads a sequence of bytes from the <see cref="T:CSCore.Codecs.WAV.WaveFileReader"/> and advances the position within the stream by the
                number of bytes read.
            </summary>
            <param name="buffer">
                An array of bytes. When this method returns, the <paramref name="buffer"/> contains the specified
                byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> +
                <paramref name="count"/> - 1) replaced by the bytes read from the current source.
            </param>
            <param name="offset">
                The zero-based byte offset in the <paramref name="buffer"/> at which to begin storing the data
                read from the current stream.
            </param>
            <param name="count">The maximum number of bytes to read from the current source.</param>
            <returns>The total number of bytes read into the buffer.</returns>
        </member>
        <member name="M:CSCore.Codecs.WAV.WaveFileReader.Dispose">
            <summary>
                Disposes the <see cref="T:CSCore.Codecs.WAV.WaveFileReader"/> and the underlying stream.
            </summary>
        </member>
        <member name="M:CSCore.Codecs.WAV.WaveFileReader.Dispose(System.Boolean)">
            <summary>
                Disposes the <see cref="T:CSCore.Codecs.WAV.WaveFileReader"/> and the underlying stream.
            </summary>
            <param name="disposing">
                True to release both managed and unmanaged resources; false to release only unmanaged
                resources.
            </param>
        </member>
        <member name="M:CSCore.Codecs.WAV.WaveFileReader.Finalize">
            <summary>
            Destructor which calls the <see cref="M:CSCore.Codecs.WAV.WaveFileReader.Dispose(System.Boolean)"/> method.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.WAV.WaveFileReader.Chunks">
            <summary>
                Gets a list of all found chunks.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.WAV.WaveFileReader.WaveFormat">
            <summary>
                Gets the wave format of the wave file. This property gets specified by the <see cref="T:CSCore.Codecs.WAV.FmtChunk"/>.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.WAV.WaveFileReader.Position">
            <summary>
                Gets or sets the position of the <see cref="T:CSCore.Codecs.WAV.WaveFileReader"/> in bytes.
            </summary>
        </member>
        <member name="P:CSCore.Codecs.WAV.WaveFileReader.Length">
            <summary>
                Gets the length of the <see cref="T:CSCore.Codecs.WAV.WaveFileReader"/> in bytes.
            </summary>
        </member>
        <member name="T:CSCore.Codecs.WAV.WaveWriter">
            <summary>
                Encoder for wave files.
            </summary>
        </member>
        <member name="M:CSCore.Codecs.WAV.WaveWriter.#ctor(System.String,CSCore.WaveFormat)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.Codecs.WAV.WaveWriter"/> class.
            </summary>
            <param name="fileName">Filename of the destination file. This filename should typically end with the .wav extension.</param>
            <param name="waveFormat">
                Format of the waveform-audio data. Note that the <see cref="T:CSCore.Codecs.WAV.WaveWriter"/> won't convert any
                data.
            </param>
        </member>
        <member name="M:CSCore.Codecs.WAV.WaveWriter.#ctor(System.IO.Stream,CSCore.WaveFormat)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.Codecs.WAV.WaveWriter"/> class.
            </summary>
            <param name="stream">Destination stream which should be used to store the</param>
            <param name="waveFormat">
                Format of the waveform-audio data. Note that the <see cref="T:CSCore.Codecs.WAV.WaveWriter"/> won't convert any
                data.
            </param>
        </member>
        <member name="M:CSCore.Codecs.WAV.WaveWriter.Dispose">
            <summary>
                Disposes the <see cref="T:CSCore.Codecs.WAV.WaveWriter"/> and writes down the wave header.
            </summary>
        </member>
        <member name="M:CSCore.Codecs.WAV.WaveWriter.WriteToFile(System.String,CSCore.IWaveSource,System.Boolean,System.Int32)">
            <summary>
                Writes down all audio data of the <see cref="T:CSCore.IWaveSource"/> to a file.
            </summary>
            <remarks>This method is obsolete. Use the <see cref="M:CSCore.Extensions.WriteToWaveStream(CSCore.IWaveSource,System.IO.Stream)"/> extension instead.</remarks>
        </member>
        <member name="M:CSCore.Codecs.WAV.WaveWriter.WriteSample(System.Single)">
            <summary>
                Encodes a single sample.
            </summary>
            <param name="sample">The sample to encode.</param>
        </member>
        <member name="M:CSCore.Codecs.WAV.WaveWriter.WriteSamples(System.Single[],System.Int32,System.Int32)">
            <summary>
                Encodes multiple samples.
            </summary>
            <param name="samples">Float array which contains the samples to encode.</param>
            <param name="offset">Zero-based offset in the <paramref name="samples" /> array.</param>
            <param name="count">Number of samples to encode.</param>
        </member>
        <member name="M:CSCore.Codecs.WAV.WaveWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Encodes raw data in the form of a byte array.
            </summary>
            <param name="buffer">Byte array which contains the data to encode.</param>
            <param name="offset">Zero-based offset in the <paramref name="buffer" />.</param>
            <param name="count">Number of bytes to encode.</param>
        </member>
        <member name="M:CSCore.Codecs.WAV.WaveWriter.Write(System.Byte)">
            <summary>
                Writes down a single byte.
            </summary>
            <param name="value">Byte to write down.</param>
        </member>
        <member name="M:CSCore.Codecs.WAV.WaveWriter.Write(System.Int16)">
            <summary>
                Writes down a single 16 bit integer value.
            </summary>
            <param name="value">Value to write down.</param>
        </member>
        <member name="M:CSCore.Codecs.WAV.WaveWriter.Write(System.Int32)">
            <summary>
                Writes down a single 32 bit integer value.
            </summary>
            <param name="value">Value to write down.</param>
        </member>
        <member name="M:CSCore.Codecs.WAV.WaveWriter.Write(System.Single)">
            <summary>
                Writes down a single 32 bit float value.
            </summary>
            <param name="value">Value to write down.</param>
        </member>
        <member name="M:CSCore.Codecs.WAV.WaveWriter.Dispose(System.Boolean)">
            <summary>
                Disposes the <see cref="T:CSCore.Codecs.WAV.WaveWriter"/> and writes down the wave header.
            </summary>
            <param name="disposing">
                True to release both managed and unmanaged resources; false to release only unmanaged
                resources.
            </param>
        </member>
        <member name="M:CSCore.Codecs.WAV.WaveWriter.Finalize">
            <summary>
                Destructor of the <see cref="T:CSCore.Codecs.WAV.WaveWriter"/> which calls the <see cref="M:CSCore.Codecs.WAV.WaveWriter.Dispose(System.Boolean)"/> method.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.CoreAudioAPIException">
            <summary>
            CoreAudioAPI COM Exception
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.CoreAudioAPIException.Try(System.Int32,System.String,System.String)">
            <summary>
            Throws an <see cref="T:CSCore.CoreAudioAPI.CoreAudioAPIException"/> if the <paramref name="result"/> is not <see cref="F:CSCore.Win32.HResult.S_OK"/>.
            </summary>
            <param name="result">Errorcode.</param>
            <param name="interfaceName">Name of the interface which contains the COM-function which returned the specified <paramref name="result"/>.</param>
            <param name="member">Name of the COM-function which returned the specified <paramref name="result"/>.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.CoreAudioAPIException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCore.CoreAudioAPI.CoreAudioAPIException"/> class.
            </summary>
            <param name="result">Errorcode.</param>
            <param name="interfaceName">Name of the interface which contains the COM-function which returned the specified <paramref name="result"/>.</param>
            <param name="member">Name of the COM-function which returned the specified <paramref name="result"/>.</param>
        </member>
        <member name="T:CSCore.Win32.Blob">
            <summary>
            Blob
            </summary>
        </member>
        <member name="F:CSCore.Win32.Blob.Length">
            <summary>
            Number of bytes stored in the blob.
            </summary>
        </member>
        <member name="F:CSCore.Win32.Blob.Data">
            <summary>
            Pointer to a byte array which stores the data.
            </summary>
        </member>
        <member name="M:CSCore.Win32.Blob.GetData">
            <summary>
            Returns the data stored in the <see cref="T:CSCore.Win32.Blob"/>.
            </summary>
            <returns>The data stored in the <see cref="T:CSCore.Win32.Blob"/></returns>
        </member>
        <member name="M:CSCore.Win32.Blob.GetString(System.Text.Encoding)">
            <summary>
            Converts the data stored in the <see cref="T:CSCore.Win32.Blob"/> based on an <paramref name="encoding"/> to a string and returns the string.
            </summary>
            <param name="encoding">Encoding used to convert the data to a string.</param>
            <returns>String of the stored data.</returns>
        </member>
        <member name="T:CSCore.CoreAudioAPI.DataFlow">
            <summary>
            Defines constants that indicate the direction in which audio data flows between an audio endpoint device and an application.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.DataFlow.Render">
            <summary>
            Audio rendering stream. Audio data flows from the application to the audio endpoint device, which renders the stream.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.DataFlow.Capture">
            <summary>
            Audio capture stream. Audio data flows from the audio endpoint device that captures the stream, to the application.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.DataFlow.All">
            <summary>
            Audio rendering or capture stream. Audio data can flow either from the application to the audio endpoint device, or from the audio endpoint device to the application.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.DeviceState">
            <summary>
            Indicates the current state of an audio endpoint device. 
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.DeviceState.Active">
            <summary>
            The audio endpoint device is active. That is, the audio adapter that connects to the endpoint device is present and enabled. In addition, if the endpoint device plugs into a jack on the adapter, then the endpoint device is plugged in.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.DeviceState.Disabled">
            <summary>
            The audio endpoint device is disabled. The user has disabled the device in the Windows multimedia control panel, Mmsys.cpl. For more information, see Remarks.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.DeviceState.NotPresent">
            <summary>
            he audio endpoint device is not present because the audio adapter that connects to the endpoint device has been removed from the system, or the user has disabled the adapter device in Device Manager.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.DeviceState.UnPlugged">
            <summary>
            The audio endpoint device is unplugged. The audio adapter that contains the jack for the endpoint device is present and enabled, but the endpoint device is not plugged into the jack. Only a device with jack-presence detection can be in this state.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.DeviceState.All">
            <summary>
            Includes audio endpoint devices in all states—active, disabled, not present, and unplugged.
            </summary>
        </member>
        <member name="M:CSCore.Win32.PropertyVariant.GetValue">
            <summary>
            Warning: May return null if DataType is not supported.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.Role">
            <summary>
            Defines constants that indicate the role that the system has assigned to an audio endpoint device.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.Role.Console">
            <summary>
            Games, system notification sounds, and voice commands.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.Role.Multimedia">
            <summary>
            Music, movies, narration, and live music recording.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.Role.Communications">
            <summary>
            Voice communications (talking to another person).
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.StorageAccess">
            <summary>
            Specifies how to open a property store.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.StorageAccess.Read">
            <summary>
            Readable only.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.StorageAccess.Write">
            <summary>
            Writeable but not readable.
            </summary>
        </member>
        <member name="F:CSCore.CoreAudioAPI.StorageAccess.ReadWrite">
            <summary>
            Read- and writeable.
            </summary>
        </member>
        <member name="T:CSCore.CoreAudioAPI.MMDeviceEnumerator">
            <summary>
            Provides methods for enumerating multimedia device resources.
            </summary>
        </member>
        <member name="M:CSCore.CoreAudioAPI.MMDeviceEnumerator.DefaultAudioEndpoint(CSCore.CoreAudioAPI.DataFlow,CSCore.CoreAudioAPI.Role)">
            <summary>
            
            </summary>
            <param name="dataFlow"></param>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.MMDeviceEnumerator.GetDefaultAudioEndpoint(CSCore.CoreAudioAPI.DataFlow,CSCore.CoreAudioAPI.Role)">
            <summary>
            The <see cref="M:CSCore.CoreAudioAPI.MMDeviceEnumerator.GetDefaultAudioEndpoint(CSCore.CoreAudioAPI.DataFlow,CSCore.CoreAudioAPI.Role)"/> method retrieves the default audio endpoint for the specified data-flow direction and role.
            </summary>
            <param name="dataFlow">The data-flow direction for the endpoint device.</param>
            <param name="role">The role of the endpoint device.</param>
            <returns><see cref="T:CSCore.CoreAudioAPI.MMDevice"/> instance of the endpoint object for the default audio endpoint device.</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.MMDeviceEnumerator.GetDefaultAudioEndpointNative(CSCore.CoreAudioAPI.DataFlow,CSCore.CoreAudioAPI.Role,System.IntPtr@)">
            <summary>
            The <see cref="M:CSCore.CoreAudioAPI.MMDeviceEnumerator.GetDefaultAudioEndpoint(CSCore.CoreAudioAPI.DataFlow,CSCore.CoreAudioAPI.Role)"/> method retrieves the default audio endpoint for the specified data-flow direction and role.
            </summary>
            <param name="dataFlow">The data-flow direction for the endpoint device.</param>
            <param name="role">The role of the endpoint device.</param>
            <param name="device">Pointer to a pointer variable into which the method writes the address of the <see cref="T:CSCore.CoreAudioAPI.MMDevice"/> COM object of the endpoint object for the default audio endpoint device. </param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.MMDeviceEnumerator.EnumAudioEndpoints(CSCore.CoreAudioAPI.DataFlow,CSCore.CoreAudioAPI.DeviceState)">
            <summary>
            Generates a collection of audio endpoint devices that meet the specified criteria.
            </summary>
            <param name="dataFlow">The data-flow direction for the endpoint device.</param>
            <param name="stateMask">The state or states of the endpoints that are to be included in the collection.</param>
            <returns><see cref="T:CSCore.CoreAudioAPI.MMDeviceCollection"/> which contains the enumerated devices.</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.MMDeviceEnumerator.EnumAudioEndpointsNative(CSCore.CoreAudioAPI.DataFlow,CSCore.CoreAudioAPI.DeviceState,System.IntPtr@)">
            <summary>
            Generates a collection of audio endpoint devices that meet the specified criteria.
            </summary>
            <param name="dataFlow">The data-flow direction for the endpoint device.</param>
            <param name="stateMask">The state or states of the endpoints that are to be included in the collection.</param>
            <param name="collection">Pointer to a pointer variable into which the method writes the address of the <see cref="T:CSCore.CoreAudioAPI.MMDeviceCollection"/> COM object of the device-collection object.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.MMDeviceEnumerator.GetDevice(System.String)">
            <summary>
            Retrieves an audio endpoint device that is identified by an endpoint ID string.
            </summary>
            <param name="id">Endpoint ID. The caller typically obtains this string from the <see cref="P:CSCore.CoreAudioAPI.MMDevice.DeviceID"/> property or any method of the <see cref="T:CSCore.CoreAudioAPI.IMMNotificationClient"/>.</param>
            <returns><see cref="T:CSCore.CoreAudioAPI.MMDevice"/> instance for specified device.</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.MMDeviceEnumerator.GetDeviceNative(System.String,System.IntPtr@)">
            <summary>
            Retrieves an audio endpoint device that is identified by an endpoint ID string.
            </summary>
            <param name="id">Endpoint ID. The caller typically obtains this string from the <see cref="P:CSCore.CoreAudioAPI.MMDevice.DeviceID"/> property or any method of the <see cref="T:CSCore.CoreAudioAPI.IMMNotificationClient"/>.</param>
            <param name="device">Pointer to a pointer variable into which the method writes the address of the IMMDevice interface for the specified device. Through this method, the caller obtains a counted reference to the interface.</param>
            <returns>HREUSLT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.MMDeviceEnumerator.RegisterEndpointNotificationCallback(CSCore.CoreAudioAPI.IMMNotificationClient)">
            <summary>
            Registers a client's notification callback interface.
            </summary>
            <param name="client">Implementation of the <see cref="T:CSCore.CoreAudioAPI.IMMNotificationClient"/> which is should receive the notificaitons.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.MMDeviceEnumerator.RegisterEndpointNotificationCallbackNative(CSCore.CoreAudioAPI.IMMNotificationClient)">
            <summary>
            Registers a client's notification callback interface.
            </summary>
            <param name="client">Implementation of the <see cref="T:CSCore.CoreAudioAPI.IMMNotificationClient"/> which is should receive the notificaitons.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:CSCore.CoreAudioAPI.MMDeviceEnumerator.UnregisterEndpointNotificationCallback(CSCore.CoreAudioAPI.IMMNotificationClient)">
            <summary>
            Deletes the registration of a notification interface that the client registered in a previous call to the <see cref="M:CSCore.CoreAudioAPI.MMDeviceEnumerator.RegisterEndpointNotificationCallback(CSCore.CoreAudioAPI.IMMNotificationClient)"/> method.
            </summary>
            <param name="client">Implementation of the <see cref="T:CSCore.CoreAudioAPI.IMMNotificationClient"/> which should be unregistered from any notifications.</param>
        </member>
        <member name="M:CSCore.CoreAudioAPI.MMDeviceEnumerator.UnregisterEndpointNotificationCallbackNative(CSCore.CoreAudioAPI.IMMNotificationClient)">
            <summary>
            Deletes the registration of a notification interface that the client registered in a previous call to the <see cref="M:CSCore.CoreAudioAPI.MMDeviceEnumerator.RegisterEndpointNotificationCallback(CSCore.CoreAudioAPI.IMMNotificationClient)"/> method.
            </summary>
            <param name="client">Implementation of the <see cref="T:CSCore.CoreAudioAPI.IMMNotificationClient"/> which should be unregistered from any notifications.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="T:CSCore.DMO.DmoException">
            <summary>
                DirectX Media Object COM Exception
            </summary>
        </member>
        <member name="M:CSCore.DMO.DmoException.#ctor(System.Int32,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.DMO.DmoException"/> class.
            </summary>
            <param name="result">Errorcode.</param>
            <param name="interfaceName">
                Name of the interface which contains the COM-function which returned the specified
                <paramref name="result"/>.
            </param>
            <param name="member">Name of the COM-function which returned the specified <paramref name="result"/>.</param>
        </member>
        <member name="M:CSCore.DMO.DmoException.Try(System.Int32,System.String,System.String)">
            <summary>
                Throws an <see cref="T:CSCore.DMO.DmoException"/> if the <paramref name="result"/> is not <see cref="F:CSCore.Win32.HResult.S_OK"/>.
            </summary>
            <param name="result">Errorcode.</param>
            <param name="interfaceName">
                Name of the interface which contains the COM-function which returned the specified
                <paramref name="result"/>.
            </param>
            <param name="member">Name of the COM-function which returned the specified <paramref name="result"/>.</param>
        </member>
        <member name="T:CSCore.MediaFoundation.IMFAttributes">
            <summary>
            Provides a generic way to store key/value pairs on an object. The keys are GUIDs, and the values can be any of the following data types: UINT32, UINT64, double, GUID, wide-character string, byte array, or IUnknown pointer. The standard implementation of this interface holds a thread lock while values are added, deleted, or retrieved.
            For a list of predefined attribute GUIDs, see Media Foundation Attributes. Each attribute GUID has an expected data type. The various "set" methods in IMFAttributes do not validate the type against the attribute GUID. It is the application's responsibility to set the correct type for the attribute.
            To create an empty attribute store, call MFCreateAttributes.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetItem(System.Guid,CSCore.Win32.PropertyVariant@)">
            <summary>
            Retrieves the value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetItemType(System.Guid,System.Int32@)">
            <summary>
            Retrieves the data type of the value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.CompareItem(System.Guid,System.IntPtr,System.Boolean@)">
            <summary>
            Queries whether a stored attribute value equals a specified PROPVARIANT.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.Compare(CSCore.MediaFoundation.IMFAttributes,System.Int32,System.Boolean@)">
            <summary>
            Compares the attributes on this object with the attributes on another object.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetUINT32(System.Guid,System.Int32@)">
            <summary>
            Retrieves a UINT32 value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetUINT64(System.Guid,System.Int64@)">
            <summary>
            Retrieves a UINT64 value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetDouble(System.Guid,System.Double@)">
            <summary>
            Retrieves a double value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetGUID(System.Guid,System.Guid@)">
            <summary>
            Retrieves a GUID value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetStringLength(System.Guid,System.Int32@)">
            <summary>
            Retrieves the length of a string value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetString(System.Guid,System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
            Retrieves a wide-character string associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetAllocatedString(System.Guid,System.String@,System.Int32@)">
            <summary>
            Retrieves a wide-character string associated with a key. This method allocates the
            memory for the string.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetBlobSize(System.Guid,System.Int32@)">
            <summary>
            Retrieves the length of a byte array associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetBlob(System.Guid,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Retrieves a byte array associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetAllocatedBlob(System.Guid,System.IntPtr@,System.Int32@)">
            <summary>
            Retrieves a byte array associated with a key. This method allocates the memory for the
            array.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetUnknown(System.Guid,System.Guid,System.Object@)">
            <summary>
            Retrieves an interface pointer associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.SetItem(System.Guid,System.IntPtr)">
            <summary>
            Associates an attribute value with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.DeleteItem(System.Guid)">
            <summary>
            Removes a key/value pair from the object's attribute list.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.DeleteAllItems">
            <summary>
            Removes all key/value pairs from the object's attribute list.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.SetUINT32(System.Guid,System.Int32)">
            <summary>
            Associates a UINT32 value with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.SetUINT64(System.Guid,System.Int64)">
            <summary>
            Associates a UINT64 value with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.SetDouble(System.Guid,System.Double)">
            <summary>
            Associates a double value with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.SetGUID(System.Guid,System.Guid)">
            <summary>
            Associates a GUID value with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.SetString(System.Guid,System.String)">
            <summary>
            Associates a wide-character string with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.SetBlob(System.Guid,System.Byte[],System.Int32)">
            <summary>
            Associates a byte array with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.SetUnknown(System.Guid,System.Object)">
            <summary>
            Associates an IUnknown pointer with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.LockStore">
            <summary>
            Locks the attribute store so that no other thread can access it.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.UnlockStore">
            <summary>
            Unlocks the attribute store.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetCount(System.Int32@)">
            <summary>
            Retrieves the number of attributes that are set on this object.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.GetItemByIndex(System.Int32,System.Guid@,CSCore.Win32.PropertyVariant@)">
            <summary>
            Retrieves an attribute at the specified index.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFAttributes.CopyAllItems(CSCore.MediaFoundation.IMFAttributes)">
            <summary>
            Copies all of the attributes from this object into another attribute store.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaBuffer.Lock(System.IntPtr@,System.Int32@,System.Int32@)">
            <summary>
            Gives the caller access to the memory in the buffer.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaBuffer.Unlock">
            <summary>
            Unlocks a buffer that was previously locked.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaBuffer.GetCurrentLength(System.Int32@)">
            <summary>
            Retrieves the length of the valid data in the buffer.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaBuffer.SetCurrentLength(System.Int32)">
            <summary>
            Sets the length of the valid data in the buffer.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaBuffer.GetMaxLength(System.Int32@)">
            <summary>
            Retrieves the allocated size of the buffer.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetItem(System.Guid,CSCore.Win32.PropertyVariant@)">
            <summary>
            Retrieves the value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetItemType(System.Guid,System.Int32@)">
            <summary>
            Retrieves the data type of the value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.CompareItem(System.Guid,System.IntPtr,System.Boolean@)">
            <summary>
            Queries whether a stored attribute value equals a specified PROPVARIANT.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.Compare(CSCore.MediaFoundation.IMFAttributes,System.Int32,System.Boolean@)">
            <summary>
            Compares the attributes on this object with the attributes on another object.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetUINT32(System.Guid,System.Int32@)">
            <summary>
            Retrieves a UINT32 value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetUINT64(System.Guid,System.Int64@)">
            <summary>
            Retrieves a UINT64 value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetDouble(System.Guid,System.Double@)">
            <summary>
            Retrieves a double value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetGUID(System.Guid,System.Guid@)">
            <summary>
            Retrieves a GUID value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetStringLength(System.Guid,System.Int32@)">
            <summary>
            Retrieves the length of a string value associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetString(System.Guid,System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
            Retrieves a wide-character string associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetAllocatedString(System.Guid,System.String@,System.Int32@)">
            <summary>
            Retrieves a wide-character string associated with a key. This method allocates the
            memory for the string.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetBlobSize(System.Guid,System.Int32@)">
            <summary>
            Retrieves the length of a byte array associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetBlob(System.Guid,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Retrieves a byte array associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetAllocatedBlob(System.Guid,System.IntPtr@,System.Int32@)">
            <summary>
            Retrieves a byte array associated with a key. This method allocates the memory for the
            array.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetUnknown(System.Guid,System.Guid,System.Object@)">
            <summary>
            Retrieves an interface pointer associated with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.SetItem(System.Guid,System.IntPtr)">
            <summary>
            Associates an attribute value with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.DeleteItem(System.Guid)">
            <summary>
            Removes a key/value pair from the object's attribute list.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.DeleteAllItems">
            <summary>
            Removes all key/value pairs from the object's attribute list.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.SetUINT32(System.Guid,System.Int32)">
            <summary>
            Associates a UINT32 value with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.SetUINT64(System.Guid,System.Int64)">
            <summary>
            Associates a UINT64 value with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.SetDouble(System.Guid,System.Double)">
            <summary>
            Associates a double value with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.SetGUID(System.Guid,System.Guid)">
            <summary>
            Associates a GUID value with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.SetString(System.Guid,System.String)">
            <summary>
            Associates a wide-character string with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.SetBlob(System.Guid,System.Byte[],System.Int32)">
            <summary>
            Associates a byte array with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.SetUnknown(System.Guid,System.Object)">
            <summary>
            Associates an IUnknown pointer with a key.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.LockStore">
            <summary>
            Locks the attribute store so that no other thread can access it.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.UnlockStore">
            <summary>
            Unlocks the attribute store.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetCount(System.Int32@)">
            <summary>
            Retrieves the number of attributes that are set on this object.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.GetItemByIndex(System.Int32,System.Guid@,CSCore.Win32.PropertyVariant@)">
            <summary>
            Retrieves an attribute at the specified index.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaType.CopyAllItems(CSCore.MediaFoundation.IMFAttributes)">
            <summary>
            Copies all of the attributes from this object into another attribute store.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFSample.GetSampleFlags(System.Int32@)">
            <summary>
            Retrieves flags associated with the sample.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFSample.SetSampleFlags(System.Int32)">
            <summary>
            Sets flags associated with the sample.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFSample.GetSampleTime(System.Int64@)">
            <summary>
            Retrieves the presentation time of the sample.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFSample.SetSampleTime(System.Int64)">
            <summary>
            Sets the presentation time of the sample.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFSample.GetSampleDuration(System.Int64@)">
            <summary>
            Retrieves the duration of the sample.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFSample.SetSampleDuration(System.Int64)">
            <summary>
            Sets the duration of the sample.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFSample.GetBufferCount(System.Int32@)">
            <summary>
            Retrieves the number of buffers in the sample.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFSample.GetBufferByIndex(System.Int32,CSCore.MediaFoundation.IMFMediaBuffer@)">
            <summary>
            Retrieves a buffer from the sample.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFSample.ConvertToContiguousBuffer(CSCore.MediaFoundation.IMFMediaBuffer@)">
            <summary>
            Converts a sample with multiple buffers into a sample with a single buffer.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFSample.AddBuffer(CSCore.MediaFoundation.IMFMediaBuffer)">
            <summary>
            Adds a buffer to the end of the list of buffers in the sample.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFSample.RemoveBufferByIndex(System.Int32)">
            <summary>
            Removes a buffer at a specified index from the sample.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFSample.RemoveAllBuffers">
            <summary>
            Removes all buffers from the sample.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFSample.GetTotalLength(System.Int32@)">
            <summary>
            Retrieves the total length of the valid data in all of the buffers in the sample.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFSample.CopyToBuffer(CSCore.MediaFoundation.IMFMediaBuffer)">
            <summary>
            Copies the sample data to a buffer.
            </summary>
        </member>
        <member name="T:CSCore.MediaFoundation.IMFTransform">
            <summary>
            Implemented by all Media Foundation Transforms (MFTs).
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFTransform.GetStreamLimits(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Retrieves the minimum and maximum number of input and output streams.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFTransform.GetStreamCount(System.Int32@,System.Int32@)">
            <summary>
            Retrieves the current number of input and output streams on this MFT.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFTransform.GetStreamIDs(System.Int32,System.Int32[],System.Int32,System.Int32[])">
            <summary>
            Retrieves the stream identifiers for the input and output streams on this MFT.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFTransform.GetInputStreamInfo(System.Int32,CSCore.MediaFoundation.MFInputStreamInfo@)">
            <summary>
            Retrieves the buffer requirements and other information for an input stream.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFTransform.GetOutputStreamInfo(System.Int32,CSCore.MediaFoundation.MFOutputStreamInfo@)">
            <summary>
            Gets the buffer requirements and other information for an output stream on this Media
            Foundation transform (MFT).
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFTransform.GetAttributes(CSCore.MediaFoundation.IMFAttributes@)">
            <summary>
            Retrieves the attribute store for this MFT.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFTransform.GetInputStreamAttributes(CSCore.MediaFoundation.IMFAttributes@)">
            <summary>
            Retrieves the attribute store for an input stream on this MFT.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFTransform.GetOutputStreamAttributes(CSCore.MediaFoundation.IMFAttributes@)">
            <summary>
            Retrieves the attribute store for an output stream on this MFT.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFTransform.DeleteInputStream(System.Int32)">
            <summary>
            Removes an input stream from this MFT.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFTransform.AddInputStreams(System.Int32,System.Int32[])">
            <summary>
            Adds one or more new input streams to this MFT.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFTransform.SetOutputBounds(System.Int64,System.Int64)">
            <summary>
            Sets the range of time stamps the client needs for output.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaEvent.GetType(CSCore.MediaFoundation.MediaEventType@)">
            <summary>
            Retrieves the event type.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaEvent.GetExtendedType(System.Guid@)">
            <summary>
            Retrieves the extended type of the event.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaEvent.GetStatus(System.Int32@)">
            <summary>
            Retrieves an HRESULT that specifies the event status.
            </summary>
        </member>
        <member name="M:CSCore.MediaFoundation.IMFMediaEvent.GetValue(CSCore.Win32.PropertyVariant@)">
            <summary>
            Retrieves the value associated with the event, if any.
            </summary>
        </member>
        <member name="M:CSCore.DMO.IWMResamplerProps.SetHalfFilterLength(System.Int32)">
            <summary>
                Specifies the quality of the output.
            </summary>
            <param name="quality">
                Specifies the quality of the output. The valid range is 1 to 60,
                inclusive.
            </param>
            <returns></returns>
        </member>
        <member name="T:CSCore.MediaFoundation.MFTMessageType">
            <summary>
            http: //msdn.microsoft.com/de-de/library/ms697223(v=vs.85).aspx
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFTMessageType.CommandFlush">
            <summary>
            Requests the MFT to flush all stored data.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFTMessageType.CommandDrain">
            <summary>
            Requests the MFT to drain any stored data.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFTMessageType.SetD3DManager">
            <summary>
            Sets or clears the Direct3D Device Manager for DirectX Video Accereration (DXVA).
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFTMessageType.NotifyBeginStreaming">
            <summary>
            Notifies the MFT that streaming is about to begin.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFTMessageType.NotifyEndStreaming">
            <summary>
            Notifies the MFT that streaming is about to end.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFTMessageType.NotifyEndOfStream">
            <summary>
            Notifies the MFT that an input stream has ended.
            </summary>
        </member>
        <member name="F:CSCore.MediaFoundation.MFTMessageType.NotifyStartOfStream">
            <summary>
            Notifies the MFT that the first sample is about to be processed.
            </summary>
        </member>
        <member name="P:CSCore.SoundOut.DirectSound.DirectSoundNotifyEventArgs.RequestStopPlayback">
            <summary>
            Set this to stop the notification thread
            </summary>
        </member>
        <member name="F:CSCore.Tags.ID3.ID3v2TextEncodingRestriction.IsoOrUTF8">
            <summary>
            encoded with ISO-8859-1 [ISO-8859-1] or UTF-8 [UTF-8]
            </summary>
        </member>
        <member name="M:CSCore.Utils.BitReader.#ctor(System.Byte*,System.Int32)">
            <summary>
            </summary>
            <param name="buffer">buffer</param>
            <param name="offset">offset in bits</param>
        </member>
        <member name="T:CSCore.SoundOut.DirectSound.DSBufferCapsFlags">
            <summary>
            Line 2081
            </summary>
        </member>
        <member name="T:CSCore.SoundOut.DirectSound.DSResult">
            <summary>
            http: //msdn.microsoft.com/en-us/library/windows/desktop/ee416775%28v=vs.85%29.aspx
            TODO: finish
            </summary>
        </member>
        <member name="T:CSCore.SoundOut.MMInterop.MMInterops.WaveCallback">
            <summary>
            http: //msdn.microsoft.com/en-us/library/dd743869%28VS.85%29.aspx
            </summary>
        </member>
        <member name="T:CSCore.SoundOut.MMInterop.MMTime">
            <summary>
            http: //www.pinvoke.net/default.aspx/Structures/MmTime.html
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveHeader.dataBuffer">
            <summary>
            pointer to locked data buffer (lpData)
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveHeader.bufferLength">
            <summary>
            length of data buffer (dwBufferLength)
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveHeader.bytesRecorded">
            <summary>
            used for input only (dwBytesRecorded)
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveHeader.userData">
            <summary>
            for client's use (dwUser)
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveHeader.flags">
            <summary>
            assorted flags (dwFlags)
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveHeader.loops">
            <summary>
            loop control counter (dwLoops)
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveHeader.next">
            <summary>
            PWaveHdr, reserved for driver (lpNext)
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.MMInterop.WaveHeader.reserved">
            <summary>
            reserved for driver
            </summary>
        </member>
        <member name="T:CSCore.SoundOut.MMInterop.WaveMsg">
            <summary>
            uMsg
            http: //msdn.microsoft.com/en-us/library/dd743869%28VS.85%29.aspx
            </summary>
        </member>
        <member name="T:CSCore.SoundOut.PlaybackState">
            <summary>
                Represents the state of a payback.
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.PlaybackState.Stopped">
            <summary>
                Playback is stopped.
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.PlaybackState.Playing">
            <summary>
                Playback is playing.
            </summary>
        </member>
        <member name="F:CSCore.SoundOut.PlaybackState.Paused">
            <summary>
                Playback is paused.
            </summary>
        </member>
        <member name="T:CSCore.Streams.LoopStream">
            <summary>
                A Stream which can be used for endless looping.
            </summary>
        </member>
        <member name="M:CSCore.Streams.LoopStream.#ctor(CSCore.IWaveSource)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.Streams.LoopStream"/> class.
            </summary>
            <param name="source">The underlying <see cref="T:CSCore.IWaveSource"/>.</param>
        </member>
        <member name="M:CSCore.Streams.LoopStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads from the underlying <see cref="P:CSCore.WaveAggregatorBase.BaseStream"/>. If the
                <see cref="P:CSCore.WaveAggregatorBase.BaseStream"/> does not provide any more data, its position gets reseted to zero.
            </summary>
            <param name="buffer">Buffer which receives the read data.</param>
            <param name="offset">Zero-based offset offset in the <paramref name="buffer"/> at which to begin storing data.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>Actual number of read bytes.</returns>
        </member>
        <member name="P:CSCore.Streams.LoopStream.EnableLoop">
            <summary>
                Gets or sets whether looping is enabled.
            </summary>
        </member>
        <member name="E:CSCore.Streams.LoopStream.StreamFinished">
            <summary>
            Occurs when the position of the <see cref="P:CSCore.WaveAggregatorBase.BaseStream"/> gets reseted to zero and the next loop begins.
            </summary>
        </member>
        <member name="M:CSCore.Streams.SineGenerator.#ctor">
            <summary>
            1000Hz, 0.5 Amplitude, 0.0 phase
            </summary>
        </member>
        <member name="T:CSCore.Utils.Complex">
            <summary>
                Represents a complex number.
            </summary>
        </member>
        <member name="F:CSCore.Utils.Complex.Zero">
            <summary>
                A complex number with a total length of zero.
            </summary>
        </member>
        <member name="F:CSCore.Utils.Complex.Imaginary">
            <summary>
                Imaginary component of the complex number.
            </summary>
        </member>
        <member name="F:CSCore.Utils.Complex.Real">
            <summary>
                Real component of the complex number.
            </summary>
        </member>
        <member name="M:CSCore.Utils.Complex.#ctor(System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.Utils.Complex"/> structure.
            </summary>
            <param name="real">The real component of the complex number.</param>
            <remarks>The imaginary component of the complex number will be set to zero.</remarks>
        </member>
        <member name="M:CSCore.Utils.Complex.#ctor(System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:CSCore.Utils.Complex"/> structure.
            </summary>
            <param name="real">The real component of the complex number.</param>
            <param name="img">The imaginary component of the complex number.</param>
        </member>
        <member name="M:CSCore.Utils.Complex.op_Implicit(CSCore.Utils.Complex)~System.Single">
            <summary>
                Defines an implicit conversion of a complex number to a single-precision floating-point number.
            </summary>
            <param name="complex">Complex number.</param>
            <returns>The absolute value of the <paramref name="complex" />.</returns>
        </member>
        <member name="M:CSCore.Utils.Complex.op_Implicit(CSCore.Utils.Complex)~System.Double">
            <summary>
                Defines an implicit conversion of a complex number to a double-precision floating-point number.
            </summary>
            <param name="complex">Complex number.</param>
            <returns>The absolute value of the <paramref name="complex" />.</returns>
        </member>
        <member name="P:CSCore.Utils.Complex.Value">
            <summary>
                Gets the absolute value of the complex number.
            </summary>
        </member>
        <member name="T:CSCore.Utils.CRC16">
            <summary>
                http: //flac.sourceforge.net/format.html#frame_footer
                CRC-16 (polynomial = x^16 + x^15 + x^2 + x^0, initialized with 0) of everything before
                the crc, back to and including the frame header sync code
            </summary>
        </member>
        <member name="T:CSCore.Utils.CRC8">
            <summary>
                http: //flac.sourceforge.net/format.html#frame_header
                CRC-8 (polynomial = x^8 + x^2 + x^1 + x^0, initialized with 0) of everything before the
                crc, including the sync code
            </summary>
        </member>
        <member name="T:CSCore.Extensions">
            <summary>
                Provides a few basic extensions.
            </summary>
        </member>
        <member name="M:CSCore.Extensions.ToWaveSource(CSCore.ISampleSource,System.Int32)">
            <summary>
                Converts a SampleSource to either a Pcm (8, 16, or 24 bit) or IeeeFloat (32 bit) WaveSource.
            </summary>
            <param name="sampleSource">Sample source to convert to a wave source.</param>
            <param name="bits">Bits per sample.</param>
            <returns>Wave source</returns>
        </member>
        <member name="M:CSCore.Extensions.ToWaveSource(CSCore.ISampleSource)">
            <summary>
                Converts a SampleSource to IeeeFloat (32bit) WaveSource.
            </summary>
        </member>
        <member name="M:CSCore.Extensions.ToSampleSource(CSCore.IWaveSource)">
            <summary>
                Converts a WaveSource to a SampleSource.
            </summary>
        </member>
        <member name="M:CSCore.Extensions.GetLength(CSCore.IWaveStream)">
            <summary>
                Gets the length of a WaveStream as a TimeSpan.
            </summary>
        </member>
        <member name="M:CSCore.Extensions.GetPosition(CSCore.IWaveStream)">
            <summary>
                Gets the position of a WaveStream as a TimeSpan.
            </summary>
        </member>
        <member name="M:CSCore.Extensions.SetPosition(CSCore.IWaveStream,System.TimeSpan)">
            <summary>
                Sets the position of a WaveStream as a TimeSpan.
            </summary>
        </member>
        <member name="M:CSCore.Extensions.GetTime(CSCore.IWaveStream,System.Int64)">
            <summary>
                Converts a duration in bytes to a <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="source">
                <see cref="T:CSCore.IWaveSource"/> instance which provides the <see cref="T:CSCore.WaveFormat"/> used to convert
                the duration in bytes to a <see cref="T:System.TimeSpan"/>.
            </param>
            <param name="bytes">Duration in bytes to convert to a <see cref="T:System.TimeSpan"/>.</param>
            <returns>Duration as a <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="M:CSCore.Extensions.GetMilliseconds(CSCore.IWaveStream,System.Int64)">
            <summary>
                Converts a duration in bytes to a duration in milliseconds. 
            </summary>
            <param name="source">
                <see cref="T:CSCore.IWaveSource"/> instance which provides the <see cref="T:CSCore.WaveFormat"/> used to convert
                the duration in bytes to a duration in milliseconds.
            </param>
            <param name="bytes">Duration in bytes to convert to a duration in milliseconds.</param>
            <returns>Duration in milliseconds.</returns>
            <remarks>Note that a <see cref="T:CSCore.ISampleSource"/> works with samples instead of bytes.</remarks>
        </member>
        <member name="M:CSCore.Extensions.GetBytes(CSCore.IWaveStream,System.TimeSpan)">
            <summary>
                Converts a duration as a <see cref="T:System.TimeSpan"/> to a duration in bytes.
            </summary>
            <param name="source">
                <see cref="T:CSCore.IWaveSource"/> instance which provides the <see cref="T:CSCore.WaveFormat"/> used to convert
                the duration as a <see cref="T:System.TimeSpan"/> to a duration in bytes.
            </param>
            <param name="timespan">Duration as a <see cref="T:System.TimeSpan"/> to convert to a duration in bytes.</param>
            <returns>Duration in bytes.</returns>
        </member>
        <member name="M:CSCore.Extensions.GetBytes(CSCore.IWaveStream,System.Int64)">
            <summary>
                Converts a duration in milliseconds to a duration in bytes.
            </summary>
            <param name="source">
                <see cref="T:CSCore.IWaveSource"/> instance which provides the <see cref="T:CSCore.WaveFormat"/> used to convert
                the duration in milliseconds to a duration in bytes.
            </param>
            <param name="milliseconds">Duration in milliseconds to convert to a duration in bytes.</param>
            <returns>Duration in bytes.</returns>
        </member>
        <member name="M:CSCore.Extensions.WriteToFile(CSCore.IWaveSource,System.String)">
            <summary>
                Writes down all audio data of the <paramref name="source" /> to a file.
            </summary>
            <param name="source">Source which provides the audio data to write down to the file.</param>
            <param name="filename">Filename which specifies the file to use.</param>
        </member>
        <member name="M:CSCore.Extensions.WriteToWaveStream(CSCore.IWaveSource,System.IO.Stream)">
            <summary>
                Writes down all audio data of the <paramref name="source"/> to a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="source">Source which provides the audio data to write down to the <see cref="T:System.IO.Stream"/>.</param>
            <param name="stream"><see cref="T:System.IO.Stream"/> to store the audio data in.</param>
        </member>
        <member name="M:CSCore.Extensions.CheckBuffer``1(``0[],System.Int64,System.Boolean)">
            <summary>
            Checks the length of an array.
            </summary>
            <typeparam name="T">Type of the array.</typeparam>
            <param name="inst">The array to check. This parameter can be null.</param>
            <param name="size">The target length of the array.</param>
            <param name="exactSize">A value which indicates whether the length of the array has to fit exactly the specified <paramref name="size"/>.</param>
            <returns>Array which fits the specified requirements. Note that if a new array got created, the content of the old array won't get copied to the return value.</returns>
        </member>
        <member name="M:CSCore.Extensions.Synchronized``1(``0)">
            <summary>
            Creates a thread-safe (synchronized) wrapper around the specified <typeparamref name="TWaveSource"/> object.
            </summary>
            <param name="waveSource">The <typeparamref name="TWaveSource"/> object to synchronize.</param>
            <typeparam name="TWaveSource">Type of the <paramref name="waveSource"/> argument.</typeparam>
            <returns>A thread-safe wrapper around the specified <typeparamref name="TWaveSource"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="waveSource"/> is null.</exception>
        </member>
        <member name="M:CSCore.Extensions.WaitForStopped(CSCore.SoundOut.ISoundOut,System.Int32)">
            <summary>
                Not tested. This method can be buggy.
            </summary>
            <param name="soundOut"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:CSCore.Extensions.WaitForStopped(CSCore.SoundOut.ISoundOut)">
            <summary>
                Not tested. This method can be buggy.
            </summary>
            <param name="soundOut"></param>
        </member>
    </members>
</doc>
